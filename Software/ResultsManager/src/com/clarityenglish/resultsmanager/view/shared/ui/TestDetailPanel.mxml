<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
		  horizontalScrollPolicy="off"
		  horizontalAlign="left"
		  paddingRight="10"
		  creationComplete="creationComplete()"
		  implements="com.clarityenglish.common.view.interfaces.CopyReceiver">
	<mx:Script>
		<![CDATA[
			import com.clarityenglish.common.model.interfaces.CopyProvider;
			import com.clarityenglish.common.vo.tests.ScheduledTest;
			import com.clarityenglish.resultsmanager.Constants;
			import com.clarityenglish.resultsmanager.view.shared.events.TestEvent;
			
			import flash.display.*;
			import flash.display.Loader;
			import flash.display.Sprite;
			import flash.events.Event;
			import flash.system.ApplicationDomain;
			import flash.system.LoaderContext;
			
			import mx.formatters.DateFormatter;
			import mx.managers.SystemManager;
			import mx.utils.ObjectUtil;
			
			import org.davekeen.utils.DateUtils;
		
			private var copyProvider:CopyProvider;
			//[Bindable]
			//private var _isDirty:Boolean = false;
			[Bindable]
			private var _errorText:String;
			
			private var dataProvider:ScheduledTest;
			
			private var _openDate:Date;
			private var _closeDate:Date;
	
			private function creationComplete():void {
				/*
				captionData.addEventListener(Event.CHANGE, onDataChange); 
				startData.addEventListener(Event.CHANGE, onDataChange); 
				startByCode.addEventListener(Event.CHANGE, onDataChange); 
				startByTimer.addEventListener(Event.CHANGE, onDataChange); 
				showResultData.addEventListener(Event.CHANGE, onDataChange); 
				*/
				openTimeDataDate.addEventListener(Event.CHANGE, dateChanged); 
				closeTimeDataDate.addEventListener(Event.CHANGE, dateChanged); 
				openTimeDataHours.addEventListener(Event.CHANGE, dateChanged); 
				openTimeDataMins.addEventListener(Event.CHANGE, dateChanged); 
				closeTimeDataHours.addEventListener(Event.CHANGE, dateChanged); 
				closeTimeDataMins.addEventListener(Event.CHANGE, dateChanged);
			}
			
			public function setCopyProvider(copyProvider:CopyProvider):void {
				this.copyProvider = copyProvider;
				title = copyProvider.getCopyForId("testPanel");
				captionLabel.text = copyProvider.getCopyForId("testCaptionLabel");
				openTimeLabel.text = copyProvider.getCopyForId("testOpenTimeLabel");
				closeTimeLabel.text = copyProvider.getCopyForId("testCloseTimeLabel");
				startByCode.label = copyProvider.getCopyForId("testCodeLabel");
				startByTimer.label = copyProvider.getCopyForId("testTimeLabel");
				startConditionsLabel.text = copyProvider.getCopyForId("testStartConditionLabel");
				showResultLabel.text = copyProvider.getCopyForId("testShowResultLabel");
				//cancelButton.label = copyProvider.getCopyForId("cancelButton");
				saveButton.label = copyProvider.getCopyForId("saveTestDetail");
			}

			public function setDataProvider(test:ScheduledTest):void {
				if (test) {
					
					dataProvider = test;
					if (dataProvider.openTime) {
						var openDate:Date = DateUtils.ansiStringToDate(dataProvider.openTime)
						openTimeDataDate.selectedDate = openDate;
						openTimeDataHours.value = openDate.hours;
						openTimeDataMins.value = openDate.minutes;
						_openDate = openDate;
					} else {
						openTimeDataDate.selectedDate = null;
						openTimeDataHours.value = 0;
						openTimeDataMins.value = 0;
						_openDate = null;
					}
					if (dataProvider.closeTime) {
						var closeDate:Date = DateUtils.ansiStringToDate(dataProvider.closeTime)
						closeTimeDataDate.selectedDate = closeDate;
						closeTimeDataHours.value = closeDate.hours;
						closeTimeDataMins.value = closeDate.minutes;
						_closeDate = closeDate;
					} else {
						closeTimeDataDate.selectedDate = null;
						closeTimeDataHours.value = 0;
						closeTimeDataMins.value = 0;
						_closeDate = null;
					}
					startData.text = dataProvider.startData;
					captionData.text = dataProvider.caption;
					if (dataProvider.startType == 'code') {
						startByCode.selected = true;
					} else {
						startByTimer.selected = true;
					}
					showResultData.selected = dataProvider.showResult;
					
					// Is the data editable?
					setDataEditable(dataProvider.status == ScheduledTest.STATUS_PRERELEASE);
						
					//_isDirty = false;
				}
			}
			private function setDataEditable(editable:Boolean):void {
				captionData.editable = startData.editable = editable; 
				openTimeDataDate.enabled = closeTimeDataDate.enabled = editable;
				openTimeDataHours.enabled = openTimeDataMins.enabled = closeTimeDataHours.enabled = closeTimeDataMins.enabled = editable; 
				showResultData.enabled = startByCode.enabled = startByTimer.enabled = editable;
				saveButton.enabled = editable;
			}
			public function dateChanged(e:Event):void {
				if (closeTimeDataDate.selectedDate)
					_closeDate = closeTimeDataDate.selectedDate;
				if (openTimeDataDate.selectedDate)
					_openDate = openTimeDataDate.selectedDate;
				if (_closeDate) {
					_closeDate.hours = closeTimeDataHours.value;
					_closeDate.minutes = closeTimeDataMins.value;
				}
				if (_openDate) {
					_openDate.hours = openTimeDataHours.value;
					_openDate.minutes = openTimeDataMins.value;
				}
			}
			//public function onDataChange(e:Event):void {
			//	var tdA:ScheduledTest = getTestFromScreen();
			//	_isDirty = !_isEqual(tdA, dataProvider);
			//}
			private function getTestFromScreen():ScheduledTest {
				var updatedTest:ScheduledTest = new ScheduledTest();
				
				// Some data can't be changed on this screen
				updatedTest.testId = dataProvider.testId;
				updatedTest.productCode = dataProvider.productCode;
				updatedTest.groupId = dataProvider.groupId;
				updatedTest.language = dataProvider.language;
				updatedTest.status = dataProvider.status;
				
				// Data validation on times
				if (_openDate)
					updatedTest.openTime = DateUtils.dateAndTimeToString(_openDate, openTimeDataHours.value, openTimeDataMins.value);
				if (_closeDate)
					updatedTest.closeTime = DateUtils.dateAndTimeToString(_closeDate, closeTimeDataHours.value, closeTimeDataMins.value);
				updatedTest.caption = captionData.text;
				updatedTest.showResult = showResultData.selected;
				updatedTest.startType = (startByCode.selected) ? 'code' : 'timer';
				updatedTest.startData = (startByCode.selected) ? startData.text : null;
				return updatedTest;
			}
			
			// Have the user editable details changed?
			private function _isEqual(tdA:ScheduledTest, tdB:ScheduledTest):Boolean {
				return ((tdA.openTime == tdB.openTime) &&
						(tdA.closeTime == tdB.closeTime) &&
						(tdA.startData == tdB.startData) &&
						(tdA.caption == tdB.caption) &&
						(tdA.showResult == tdB.showResult) &&
						(tdA.startType == tdB.startType));
			}
			// Have enough details been added?
			private function isComplete():Boolean {
				_errorText = "";
				
				if (!_closeDate) {
					_errorText = "There must be a close time.";
					return false;
				}
					
				// Check the start time
				if (!_openDate) {
					_errorText = "There must be a start time.";
					return false;
				}
				// Check the close time
				if (_closeDate) {
					//dateInterim = endTimeData.selectedDate;
					//if (isNaN(dateInterim)) {
					//	_errorText = "The close date/time is not understood. Try something like 2016-09-17 09:30";
					//	return false;
					//}
					//var endTime:Date = new Date(dateInterim);
					// TODO This comparison should include the times as well as days part
					if (ObjectUtil.dateCompare(_openDate, _closeDate) >= 0) {
						_errorText = "The close must be after the open.";
						return false;
					}
				}
				
				// Check the code
				if (startByCode.selected) {
					if (startData.text.length < 4) {
						_errorText = "The code must be at least 4 characters long.";
						return false;
					}
				}
				
				return true;
			}
			
			// Trigger events from user action
			/*
			private function onUpdate():void {
				_isDirty = false;
				if (isComplete())
					dispatchEvent(new TestEvent(TestEvent.UPDATE, getTestFromScreen()));				
			}
			*/
			//private function onCancel():void {
			//	dispatchEvent(new TestEvent(TestEvent.CANCEL, null));
			//}
			private function onAdd():void {
				if (isComplete()) {
					dataProvider.status = ScheduledTest.STATUS_RELEASED;
					dispatchEvent(new TestEvent(TestEvent.ADD, getTestFromScreen()));
				}
			}
			private function formatDateTime(date:Date):String {
				return DateUtils.formatDate(date, "D MMM YYYY");
			}
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%">
		<mx:HBox>
			<mx:Label id="captionLabel" width="200"/>
			<mx:TextInput id="captionData" enabled="true" width="200" />
		</mx:HBox>
		<mx:HBox>
			<mx:Text id="openTimeLabel" width="200"/>
			<mx:HBox>			
				<mx:DateField width="120" id="openTimeDataDate" enabled="true" editable="false" 
						  selectableRange="{{rangeStart : new Date()}}" labelFunction="formatDateTime" yearNavigationEnabled="true" />
				<mx:NumericStepper id="openTimeDataHours" enabled="true" width="50"   
						   minimum="0" maximum="23" stepSize="1" value="9" />
				<mx:NumericStepper id="openTimeDataMins" enabled="true" width="50"   
								   minimum="0" maximum="55" stepSize="5" value="0" />
			</mx:HBox>
		</mx:HBox>
		<mx:HBox>
			<mx:Text id="closeTimeLabel" width="200"/>
			<mx:HBox>			
				<mx:DateField width="120" id="closeTimeDataDate" enabled="true" editable="false" 
							  selectableRange="{{rangeStart : new Date()}}" labelFunction="formatDateTime" yearNavigationEnabled="true" />
				<mx:NumericStepper id="closeTimeDataHours" enabled="true" width="50"   
								   minimum="0" maximum="23" stepSize="1" value="12" />
				<mx:NumericStepper id="closeTimeDataMins" enabled="true" width="50"   
								   minimum="0" maximum="55" stepSize="5" value="0" />
			</mx:HBox>
		</mx:HBox>
		<mx:HBox>
			<mx:Text id="startConditionsLabel" width="200" />
			<mx:VBox>
				<mx:RadioButton id="startByCode" groupName="startConditions" labelPlacement="right" />
				<mx:RadioButton id="startByTimer" groupName="startConditions" labelPlacement="right" />
			</mx:VBox>
			<mx:TextInput id="startData" enabled="{startByCode.selected}" />
		</mx:HBox>
		<mx:HBox>
			<mx:Text id="showResultLabel" width="200"/>
			<mx:CheckBox id="showResultData" enabled="true" />
		</mx:HBox>
		<mx:Label id="errorTextLabel" text="{_errorText}" visible="true" includeInLayout="true" />
		<mx:Button id="saveButton" click="onAdd()" />
		<!-- <mx:Button id="cancelButton" enabled="{_isDirty}" click="onCancel()" /> -->
	</mx:VBox>

</mx:TitleWindow>