<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
		  horizontalScrollPolicy="off"
		  horizontalAlign="left"
		  paddingRight="10"
		  creationComplete="creationComplete()"
		  implements="com.clarityenglish.common.view.interfaces.CopyReceiver">
	<mx:Script>
		<![CDATA[
			import com.clarityenglish.common.model.interfaces.CopyProvider;
			import com.clarityenglish.common.vo.tests.ScheduledTest;
			import com.clarityenglish.resultsmanager.Constants;
			import com.clarityenglish.resultsmanager.view.shared.events.TestEvent;
			import com.clarityenglish.utils.TraceUtils;
			
			import flash.display.*;
			import flash.display.Loader;
			import flash.display.Sprite;
			import flash.events.Event;
			import flash.system.ApplicationDomain;
			import flash.system.LoaderContext;
			
			import mx.formatters.DateFormatter;
			import mx.managers.SystemManager;
			import mx.utils.ObjectUtil;
			
			import org.davekeen.utils.DateUtils;
		
			private var copyProvider:CopyProvider;
			[Bindable]
			private var _isDirty:Boolean = false;
			[Bindable]
			private var _errorText:String;
			
			private var dataProvider:ScheduledTest;
	
			private function creationComplete():void {
				captionData.addEventListener(Event.CHANGE, onDataChange); 
				openTimeData.addEventListener(Event.CHANGE, onDataChange); 
				endTimeData.addEventListener(Event.CHANGE, onDataChange); 
				startData.addEventListener(Event.CHANGE, onDataChange); 
				startByCode.addEventListener(Event.CHANGE, onDataChange); 
				startByTimer.addEventListener(Event.CHANGE, onDataChange); 
				showResultData.addEventListener(Event.CHANGE, onDataChange); 
			}
			
			public function setCopyProvider(copyProvider:CopyProvider):void {
				this.copyProvider = copyProvider;
				title = copyProvider.getCopyForId("testPanel");
				captionLabel.text = copyProvider.getCopyForId("testCaptionLabel");
				openTimeLabel.text = copyProvider.getCopyForId("testOpenTimeLabel");
				endTimeLabel.text = copyProvider.getCopyForId("testEndTimeLabel");
				startByCode.label = copyProvider.getCopyForId("testCodeLabel");
				startByTimer.label = copyProvider.getCopyForId("testTimeLabel");
				startConditionsLabel.text = copyProvider.getCopyForId("testStartConditionLabel");
				showResultLabel.text = copyProvider.getCopyForId("testShowResultLabel");
				updateButton.label = copyProvider.getCopyForId("updateTest");
				addButton.label = copyProvider.getCopyForId("addTest");
			}

			public function setDataProvider(test:ScheduledTest):void {
				dataProvider = test;
				if (dataProvider.openTime)
					openTimeData.selectedDate = DateUtils.ansiStringToDate(dataProvider.openTime);
				if (dataProvider.closeTime)
					endTimeData.selectedDate = DateUtils.ansiStringToDate(dataProvider.closeTime);
				startData.text = dataProvider.startData;
				captionData.text = dataProvider.caption;
				if (dataProvider.startType == 'code') {
					startByCode.selected = true;
				} else {
					startByTimer.selected = true;
				}
				showResultData.selected = dataProvider.showResult;
				_isDirty = false;
			}
			public function onDataChange(e:Event):void {
				// If this is adding a new test, don't need an update
				var tdA:ScheduledTest = getTestFromScreen();
				_isDirty = (addButton.visible) ? false : !_isEqual(tdA, dataProvider);
			}
			private function getTestFromScreen():ScheduledTest {
				var updatedTest:ScheduledTest = new ScheduledTest();
				
				// Some data can't be changed on this screen
				updatedTest.testId = dataProvider.testId;
				updatedTest.productCode = dataProvider.productCode;
				updatedTest.groupId = dataProvider.groupId;
				updatedTest.language = dataProvider.language;
				
				// Data validation on times
				if (openTimeData.selectedDate)
					updatedTest.openTime = DateUtils.dateToAnsiString(openTimeData.selectedDate);
				if (endTimeData.selectedDate)
					updatedTest.closeTime = DateUtils.dateToAnsiString(endTimeData.selectedDate);
				updatedTest.caption = captionData.text;
				updatedTest.showResult = showResultData.selected;
				updatedTest.startType = (startByCode.selected) ? 'code' : 'timer';
				updatedTest.startData = (startByCode.selected) ? startData.text : null;
				return updatedTest;
			}
			// Have the user editable details changed?
			private function _isEqual(tdA:ScheduledTest, tdB:ScheduledTest):Boolean {
				return ((tdA.openTime == tdB.openTime) &&
						(tdA.closeTime == tdB.closeTime) &&
						(tdA.startData == tdB.startData) &&
						(tdA.caption == tdB.caption) &&
						(tdA.showResult == tdB.showResult) &&
						(tdA.startType == tdB.startType));
			}
			// Have enough details been added?
			private function isComplete():Boolean {
				// Check the start time
				if (!openTimeData.selectedDate) {
					_errorText = "There must be a start time.";
					return false;
				}
				// Check the close time
				if (endTimeData.selectedDate) {
					//dateInterim = endTimeData.selectedDate;
					//if (isNaN(dateInterim)) {
					//	_errorText = "The close date/time is not understood. Try something like 2016-09-17 09:30";
					//	return false;
					//}
					//var endTime:Date = new Date(dateInterim);
					if (ObjectUtil.dateCompare(openTimeData.selectedDate, endTimeData.selectedDate) >= 0) {
						_errorText = "The close must be after the start.";
						return false;
					}
				}
				
				// Check the code
				if (startByCode.selected) {
					if (startData.text.length < 4) {
						_errorText = "The code must be at least 4 characters long.";
						return false;
					}
				}
				
				return true;
			}
			
			// Trigger events from user action
			private function onUpdate():void {
				_isDirty = false;
				dispatchEvent(new TestEvent(TestEvent.UPDATE, getTestFromScreen()))				
			}
			private function onAdd():void {
				if (isComplete())
					dispatchEvent(new TestEvent(TestEvent.ADD, getTestFromScreen()))
			}
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%">
		<mx:HBox>
			<mx:Label id="captionLabel" />
			<mx:TextInput id="captionData" enabled="true" />
		</mx:HBox>
		<mx:HBox>
			<mx:Label id="openTimeLabel" />
			<mx:DateField id="openTimeData" enabled="true" editable="true" 
						  selectableRange="{{rangeStart : new Date()}}" formatString="DD/MM/YYYY" yearNavigationEnabled="true" />
		</mx:HBox>
		<mx:HBox>
			<mx:Label id="endTimeLabel" />
			<mx:DateField id="endTimeData" editable="true" enabled="true" 
						  selectableRange="{{rangeStart : new Date()}}" formatString="DD/MM/YYYY" yearNavigationEnabled="true" />
		</mx:HBox>
		<mx:HBox>
			<mx:Label id="startConditionsLabel" />
			<mx:VBox>
				<mx:RadioButton id="startByCode" groupName="startConditions" labelPlacement="right" />
				<mx:RadioButton id="startByTimer" groupName="startConditions" labelPlacement="right" />
			</mx:VBox>
			<mx:TextInput id="startData" enabled="{startByCode.selected}" />
		</mx:HBox>
		<mx:HBox>
			<mx:Label id="showResultLabel" />
			<mx:CheckBox id="showResultData" enabled="true" />
		</mx:HBox>
		<mx:Label id="errorTextLabel" text="{_errorText}" />
		<mx:Button id="updateButton" visible="{_isDirty}" includeInLayout="{_isDirty}" click="onUpdate()" />
		<mx:Button id="addButton" visible="false" includeInLayout="false" click="onAdd()" />
	</mx:VBox>

</mx:TitleWindow>