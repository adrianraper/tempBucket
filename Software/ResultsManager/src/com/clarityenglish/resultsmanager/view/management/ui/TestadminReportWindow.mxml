<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:controls = "org.davekeen.controls.*"
				xmlns:fxc="com.fxcomps.vacombobox.*"
				creationComplete="creationComplete()"
				width="390"
				height="350"
				borderAlpha="0.9" borderColor="{Constants.popupBackgroundColour}"
				implements="com.clarityenglish.common.view.interfaces.CopyReceiver">
	<mx:Script>
		<![CDATA[
		import com.clarityenglish.common.model.interfaces.CopyProvider;
		import com.clarityenglish.common.vo.Reportable;
		import com.clarityenglish.common.vo.content.Content;
		import com.clarityenglish.common.vo.content.Course;
		import com.clarityenglish.common.vo.content.Exercise;
		import com.clarityenglish.common.vo.content.Title;
		import com.clarityenglish.common.vo.content.Unit;
		import com.clarityenglish.common.vo.manageable.Group;
		import com.clarityenglish.common.vo.manageable.Manageable;
		import com.clarityenglish.common.vo.manageable.User;
		import com.clarityenglish.resultsmanager.Constants;
		import com.clarityenglish.resultsmanager.view.management.events.ReportEvent;
		import com.clarityenglish.resultsmanager.view.shared.ui.ReportableTreeItemRenderer;
		import com.clarityenglish.utils.TraceUtils;
		
		import flash.events.Event;
		
		import mx.collections.ArrayCollection;
		import mx.core.ClassFactory;
		import mx.core.IFlexDisplayObject;
		import mx.managers.PopUpManager;
		
		import org.davekeen.utils.ClassUtils;
		
		public var parentView:IFlexDisplayObject;
		
		private var _forReportables:Array;		
		private var _onReportables:Array;
		
		private var copyProvider:CopyProvider;
		// v3.0.5 For title specific reports
		private var specialReportTemplate:String = "DPTSummary";
		
		public function setCopyProvider(copyProvider:CopyProvider):void {
			this.copyProvider = copyProvider;
			
			title = copyProvider.getCopyForId("generateTestadminReportWindowTitle");
			closeWindowButton.label = copyProvider.getCopyForId("close");
			toDateCheckBox.label = copyProvider.getCopyForId("toDate");
			fromDateCheckBox.label = copyProvider.getCopyForId("fromDate");
			/*
			showAttempts.text = copyProvider.getCopyForId("showAttempts");
			allAttempts.label = copyProvider.getCopyForId("allAttempts");
			firstAttempt.label = copyProvider.getCopyForId("firstAttempts");
			lastAttempt.label = copyProvider.getCopyForId("lastAttempts");
			*/
			filterStep.text = copyProvider.getCopyForId("reportFilterStep", {item:1});
			// gh#777
			includeInactiveUsersCheckBox.label = copyProvider.getCopyForId("includeInactiveUsersCheckBox");
			generateSpecialReportButton.label = copyProvider.getCopyForId("testReport");
		}
		
		private function creationComplete():void {
		}
		
		// **
		// To be clear. onReportables is the title
		//				forReportables is the group you selected from test admin screen
		// **
		public function set onReportables(onReportables:Array):void {
			_onReportables = onReportables;
		}
		public function set forReportables(forReportables:Array):void {
			_forReportables = forReportables;
		}
		// v3.0.4 Generic holder to run a special template
		private function onClickSpecialReport():void {
			onGenerateReport(specialReportTemplate);
		}
		private function removePopup():void {
			PopUpManager.removePopUp(this);
		}

		private function onGenerateReport(template:String = "standard" ):void {
			
			var reportEvent:ReportEvent = new ReportEvent(ReportEvent.GENERATE, _forReportables, _onReportables, true);
			
			// Add in the date options
			if (fromDateCheckBox.selected) {
				// v3.0.6 Bug #227 If the check box is selected, but no date is selected, default to today
				if (fromDateChooser.selectedDate == null) {
					fromDateChooser.selectedDate = new Date(); // Set to today
				}
				reportEvent.fromDate = fromDateChooser.selectedDate;
			}
			
			if (toDateCheckBox.selected) {
				// v3.0.6 Bug #227 If the check box is selected, but no date is selected, default to today
				//TraceUtils.myTrace("selectedDate=" + toDateChooser.selectedDate + ".");
				if (toDateChooser.selectedDate == null) {
					toDateChooser.selectedDate = new Date(); // Set to today
				}
				// v3.0.4 The to date should always be the end of the day
				reportEvent.toDate = new Date(toDateChooser.selectedDate.setHours(23,59,59,999));
			}
			
			// Add in the attempts option
			//reportEvent.attempts = attemptsRadioGroup.selection.data as String;
			
			// If I want to generate to a particular template?
			reportEvent.template = template;

			// v3.2 Add in optional studentID to the report
			reportEvent.includeStudentID = false;
			// gh#777
			reportEvent.includeInactiveUsers = includeInactiveUsersCheckBox.selected;
			
			// Dispatch it in order to generate the report
			//gh#28, gh#1470
			//reportEvent.onClass = 'Title'; // how is this set?
			reportEvent.forClass = 'Group';
			parentView.dispatchEvent(reportEvent);
		}
		
		]]>
	</mx:Script>
	
		<mx:VBox width="100%" height="100%" verticalGap="10" paddingLeft="20" paddingBottom="10">
			<mx:Label id="filterStep" paddingTop="3" styleName="subHeadingLabelBlack" />
			<mx:HBox width="100%">
				<mx:VBox>
					<mx:CheckBox id="fromDateCheckBox" />
					<mx:DateField id="fromDateChooser" formatString="YYYY/MM/DD" enabled="{fromDateCheckBox.selected}" yearNavigationEnabled="true" />
				</mx:VBox>
				<mx:Spacer width="25%" />
				<mx:VBox>
					<mx:CheckBox id="toDateCheckBox" />
					<mx:DateField id="toDateChooser" formatString="YYYY/MM/DD" enabled="{toDateCheckBox.selected}" yearNavigationEnabled="true" />
				</mx:VBox>
			</mx:HBox>
			<mx:Spacer height="5" />				
			<!-- gh#777 -->
			<mx:HRule width="90%" />
			<mx:Spacer height="5" />				
			<mx:CheckBox id="includeInactiveUsersCheckBox" />
		</mx:VBox>
	<mx:ControlBar width="100%" horizontalAlign="right">
		<mx:Button id="closeWindowButton" click="removePopup()" />
		<mx:Button id="generateSpecialReportButton" click="onClickSpecialReport()" />
	</mx:ControlBar>
	
</mx:TitleWindow>