<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:view="com.clarityenglish.resultsmanager.view.management.components.*"
		   xmlns:ui="com.clarityenglish.resultsmanager.view.shared.ui.*"
		   implements="com.clarityenglish.common.view.interfaces.CopyReceiver">
	<mx:Script>
		<![CDATA[
			import com.clarityenglish.common.events.EmailEvent;
			import com.clarityenglish.common.model.interfaces.CopyProvider;
			import com.clarityenglish.common.vo.content.Title;
			import com.clarityenglish.common.vo.email.TemplateDefinition;
			import com.clarityenglish.common.vo.manageable.Manageable;
			import com.clarityenglish.common.vo.manageable.User;
			import com.clarityenglish.common.vo.tests.TestDetail;
			import com.clarityenglish.resultsmanager.Constants;
			import com.clarityenglish.resultsmanager.view.management.events.ReportEvent;
			import com.clarityenglish.resultsmanager.view.management.ui.TestadminReportWindow;
			import com.clarityenglish.resultsmanager.view.shared.events.TestDetailEvent;
			import com.clarityenglish.utils.TraceUtils;
			
			import flash.text.StyleSheet;
			
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import org.davekeen.utils.ClassUtils;
		
			private var copyProvider:CopyProvider;
			
			public var manageables:Array;
			
			private var reportWindow:TestadminReportWindow;
							
			[Bindable]
			public var selectedGroup:Manageable;
			public var selectedTitle:Title;
			
			// Icon for the alert window
			[Embed(source="/../assets/warning_icon.swf")]
			private var alertWarningIcon:Class;	
			
			public function setCopyProvider(copyProvider:CopyProvider):void {
				this.copyProvider = copyProvider;
				
				testDetailPanel.setCopyProvider(copyProvider);
				listOfTestsLabel.text = copyProvider.getCopyForId("listOfTestsLabel");
				newTestButton.label = copyProvider.getCopyForId("addTest");
				selectGroupLabel.text = copyProvider.getCopyForId("selectGroup");
				deleteTestButton.label = copyProvider.getCopyForId("deleteTest");
				
				firstStepWindow.title = copyProvider.getCopyForId("testAdminFirstStep");
				licenceUseLabel.title = copyProvider.getCopyForId("licenceUse");
				licencesScheduledLabel.text = copyProvider.getCopyForId("licencesScheduled");
				licencesUsedLabel.text = copyProvider.getCopyForId("licencesUsed");
				licencesPurchasedLabel.text = copyProvider.getCopyForId("licencesPurchased");
				
				generateReportButton.label = copyProvider.getCopyForId("generateReport");
				sendWelcomeEmailButton.label = copyProvider.getCopyForId("sendWelcomeEmail");
				sendResultEmailButton.label = copyProvider.getCopyForId("sendResultEmail");
			}
			
			private function onSendWelcomeEmail(e:Event):void {
				// TODO where should this be set. rm.xml, config.xml?
				var testDetail:TestDetail = testList.selectedItem as TestDetail;
				var welcomeEmailTemplate:TemplateDefinition = new TemplateDefinition();
				welcomeEmailTemplate.filename = "user/PPT-welcome";
				welcomeEmailTemplate.name = "invitation";
				welcomeEmailTemplate.data = {testDetail: testDetail};

				showSendEmailDialog(function(e:CloseEvent):void {
					if (e.detail == Alert.YES)
						dispatchEvent(new EmailEvent(EmailEvent.SEND_EMAIL, welcomeEmailTemplate, new Array(selectedGroup)));
				}, welcomeEmailTemplate );
			}
			private function onSendResultEmail(e:Event):void {
				// TODO where should this be set. rm.xml, config.xml?
				var testDetail:TestDetail = testList.selectedItem as TestDetail;
				var resultEmailTemplate:TemplateDefinition = new TemplateDefinition();
				resultEmailTemplate.filename = (testDetail.showResult) ? "user/PPT-with-result" : "user/PPT-without-result";
				resultEmailTemplate.name = "result";
				resultEmailTemplate.data = {testDetail: testDetail};
				
				showSendEmailDialog(function(e:CloseEvent):void {
					if (e.detail == Alert.YES)
						dispatchEvent(new EmailEvent(EmailEvent.SEND_EMAIL, resultEmailTemplate, new Array(selectedGroup)));
				}, resultEmailTemplate );
			}
			private function showSendEmailDialog(alertListener:Function, template:TemplateDefinition):void {
				var userCount:uint = 0;
				var usersWithoutEmail:uint = 0;
				var manageables:Array = selectedGroup.getSubUsers();
				
				// Count how many users, and note how many don't have emails
				for each (var manageable:Manageable in manageables) {
					if (manageable is User) {
						if ((manageable as User).email) {
							userCount++;
						} else {
							usersWithoutEmail++;
						}
					}
				}
				var alertVersion:String = (usersWithoutEmail == 0) ? "sendEmailAlert" : "sendEmailWarnAboutNoEmail";
				var text:String = copyProvider.getCopyForId(alertVersion, {userCount: userCount, emailType: template.name, noEmailCount: usersWithoutEmail});
				Alert.show(text, "Confirm", Alert.YES | Alert.NO, this, alertListener, alertWarningIcon);
			}
			
			// Show limited report filtering window
			public function onGenerateReport(e:Event):void {
				if (!reportWindow) {
					reportWindow = PopUpManager.createPopUp(UIComponent(parentApplication), TestadminReportWindow, true) as TestadminReportWindow;
				} else {
					PopUpManager.addPopUp(reportWindow, UIComponent(parentApplication), true);
				}
				
				reportWindow.setCopyProvider(copyProvider);
				reportWindow.parentView = this;
				reportWindow.onReportables = new Array(selectedTitle);
				reportWindow.forReportables = new Array(selectedGroup); 
				PopUpManager.centerPopUp(reportWindow);
			}
				
			public function showLicencesUsed(purchased:uint, used:uint, scheduled:uint):void {
				licencesPurchasedData.text = purchased.toString();
				licencesUsedData.text = used.toString();
				licencesScheduledData.text = scheduled.toString();
			}
			private function onTestChange(e:ListEvent):void {
				var selectedTest:TestDetail = testList.selectedItem as TestDetail;
				testDetailPanel.setDataProvider(selectedTest);
				testDetailPanel.addButton.visible = testDetailPanel.addButton.includeInLayout = false;
				
				// You can send out the result email once the test is closed
				sendResultEmailButton.visible = sendResultEmailButton.includeInLayout = selectedTest.isTestClosed();
				// You can send out the invitation email only before it is open 
				sendWelcomeEmailButton.visible = sendWelcomeEmailButton.includeInLayout = !selectedTest.isTestStarted();
				// You can see the results any time after it opens 
				generateReportButton.visible = generateReportButton.includeInLayout = selectedTest.isTestStarted();
				
				// You can only delete a test if it was set for the currently selected group
				// This is to stop you deleting a test set for a parent when you are in a child
				// And it has not yet started
				deleteTestButton.visible = deleteTestButton.includeInLayout = (selectedTest.groupId == selectedGroup.id) && !selectedTest.isTestStarted();
				
			}
			private function onNewTestButtonClick(e:Event):void {
				var newTestDetail:TestDetail = new TestDetail();
				newTestDetail.groupId = selectedGroup.id;
				newTestDetail.testId = (testList.dataProvider[0] as TestDetail).testId;
				newTestDetail.language = (testList.dataProvider[0] as TestDetail).language;
				testDetailPanel.setDataProvider(newTestDetail);
				testDetailPanel.addButton.visible = testDetailPanel.addButton.includeInLayout = true;
				testDetailPanel.visible = true;
			}
			private function onDeleteTestButtonClick(e:Event):void {
				var selectedTest:TestDetail = testList.selectedItem as TestDetail;
				dispatchEvent(new TestDetailEvent(TestDetailEvent.DELETE, selectedTest))				
			}
			
		]]>
	</mx:Script>
	<!--
				
	-->
	<mx:HDividedBox width="100%" height="100%" paddingLeft="4" paddingRight="4" paddingBottom="4" >
		<view:ManageablesView id="manageablesView" width="40%" height="100%"/>
		<mx:VBox width="30%" height="100%" visible="{selectedGroup == null}" includeInLayout="{selectedGroup == null}">
			<mx:Spacer height="50" />
			<mx:TitleWindow id="firstStepWindow" paddingTop="20" width="100%" height="100" verticalAlign="top" >
				<mx:Label id="selectGroupLabel" fontWeight="bold" />
			</mx:TitleWindow>
		</mx:VBox>
		<mx:VBox width="30%" height="100%" visible="{selectedGroup != null}" includeInLayout="{selectedGroup != null}">
			<mx:HBox width="100%" >
  				<mx:Label id="listOfTestsLabel" styleName="subHeadingLabelBlack" />			
				<mx:Label id="testListLabel" text="{selectedGroup.name}" styleName="subHeadingLabelBlack" />
			</mx:HBox>
			<mx:List id="testList"
					 width="100%"
					 height="50%"
					 labelField="caption"
					 itemRenderer="com.clarityenglish.resultsmanager.view.shared.ui.TestDetailsItemRenderer"
					 change="onTestChange(event)" />
			<mx:HBox width="100%" >
				<mx:Button id="newTestButton" visible="true" includeInLayout="true" height="18" click="onNewTestButtonClick(event)" />
				<mx:Button id="deleteTestButton" visible="false" includeInLayout="false" height="18" click="onDeleteTestButtonClick(event)" />
			</mx:HBox>
			<mx:Spacer height="5" />
			<ui:TestDetailPanel width="99%" id="testDetailPanel" visible="{testList.selectedItem != null}" includeInLayout="{testList.selectedItem != null}" />
			<mx:Spacer height="5" />
			<mx:Button id="generateReportButton" visible="false" includeInLayout="false" height="18" click="onGenerateReport(event)" />
			<mx:Button id="sendWelcomeEmailButton" visible="false" includeInLayout="false" height="18" click="onSendWelcomeEmail(event)" />
			<mx:Button id="sendResultEmailButton" visible="false" includeInLayout="false" height="18" click="onSendResultEmail(event)" />
		</mx:VBox>
		<mx:VBox width="20%" height="100%">
			<mx:TitleWindow id="licenceUseLabel" paddingTop="20" width="100%" height="300" verticalAlign="top" >
				<mx:HBox>
					<mx:Label id="licencesPurchasedLabel" />
					<mx:TextInput id="licencesPurchasedData" enabled="false" />
				</mx:HBox>
				<mx:HBox>
					<mx:Label id="licencesUsedLabel" />
					<mx:TextInput id="licencesUsedData" enabled="false" />
				</mx:HBox>
				<mx:HBox>
					<mx:Label id="licencesScheduledLabel" />
					<mx:TextInput id="licencesScheduledData" enabled="false" />
				</mx:HBox>
			</mx:TitleWindow>
		</mx:VBox>
	</mx:HDividedBox>
</mx:Canvas>