<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 creationComplete="creationComplete()" horizontalScrollPolicy="off"
		 implements="com.clarityenglish.common.view.interfaces.CopyReceiver">
	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.adobe.serialization.json.JSONDecoder;
			import com.adobe.serialization.json.JSONEncoder;
			import com.clarityenglish.common.model.interfaces.CopyProvider;
			import com.clarityenglish.common.vo.tests.ScheduledTest;
			import com.clarityenglish.resultsmanager.Constants;
			import com.clarityenglish.resultsmanager.view.shared.events.TestEvent;
			import com.clarityenglish.testadmin.view.login.components.FlatButtonSkin;
			import com.clarityenglish.testadmin.view.login.components.GradientBackground;
			
			import flash.display.*;
			import flash.display.Loader;
			import flash.display.Sprite;
			import flash.events.Event;
			import flash.system.ApplicationDomain;
			import flash.system.LoaderContext;
			
			import mx.collections.ArrayCollection;
			import mx.formatters.DateFormatter;
			import mx.managers.SystemManager;
			import mx.utils.ObjectUtil;
			
			import org.davekeen.utils.DateUtils;
			
			private var copyProvider:CopyProvider;
			//[Bindable]
			//private var _isDirty:Boolean = false;
			[Bindable]
			private var _errorText:String;
			
			private var dataProvider:ScheduledTest;
			
			private var _openDate:Date;
			private var _closeDate:Date;
			[Bindable]
			private var _startByCode:Boolean;
			[Bindable]
			private var _showResult:Boolean;
			// gtp#60
			private var _language:String;
			
			[Bindable]
			public var times:ArrayCollection = new ArrayCollection();
			
			private function displayTime(item:Object):String {
				return leadingZero(item.data.hours) + ":" + leadingZero(item.data.mins);
			}
			private function leadingZero(num:Number):String {
				if (num <= 0)
					return "00";
				if (num < 10)
					return "0" + num;
				return num.toString();
			}
			private function setTimeIndex(hours:uint, mins:uint):uint {
				// 4 time settings per hour
				return (hours * 4) + Math.round(mins / 15);
			}
			private function creationComplete():void {
				/*
				captionData.addEventListener(Event.CHANGE, onDataChange); 
				startData.addEventListener(Event.CHANGE, onDataChange); 
				startByCode.addEventListener(Event.CHANGE, onDataChange); 
				startByTimer.addEventListener(Event.CHANGE, onDataChange); 
				showResultData.addEventListener(Event.CHANGE, onDataChange); 
				*/
				openTimeDataDate.addEventListener(Event.CHANGE, dateChanged); 
				closeTimeDataDate.addEventListener(Event.CHANGE, dateChanged); 
				openTimeDataHours.addEventListener(Event.CHANGE, dateChanged); 
				closeTimeDataHours.addEventListener(Event.CHANGE, dateChanged); 
				
				for (var i:uint = 0; i<24; i++) {
					times.addItem({data: {hours:i, mins:0}});
					times.addItem({data: {hours:i, mins:15}});
					times.addItem({data: {hours:i, mins:30}});
					times.addItem({data: {hours:i, mins:45}});
				}
			}
			
			public function setCopyProvider(copyProvider:CopyProvider):void {
				this.copyProvider = copyProvider;
				//title = copyProvider.getCopyForId("testPanel");
				captionLabel.text = copyProvider.getCopyForId("testCaptionLabel");
				openTimeLabel.text = copyProvider.getCopyForId("testOpenTimeLabel");
				closeTimeLabel.text = copyProvider.getCopyForId("testCloseTimeLabel");
				startByCode.label = copyProvider.getCopyForId("testStartConditionLabel");
				//startByTimer.label = copyProvider.getCopyForId("testTimeLabel");
				//startConditionsLabel.text = copyProvider.getCopyForId("testStartConditionLabel");
				showResult.label = copyProvider.getCopyForId("testShowResultLabel");
				cancelButton.label = copyProvider.getCopyForId("cancelButton");
				saveButton.label = copyProvider.getCopyForId("saveTestDetail");
				//startByTimer.label = hideResult.label = copyProvider.getCopyForId("noButton");
				// ctp#60
				languageLabel.text = copyProvider.getCopyForId("languageLabel");
				// ctp#214
				//emailInsertionNoteLabel.text = copyProvider.getCopyForId("emailInsertionNoteLabel");
				// ctp#351
				//emailInsertionNameLabel.text = copyProvider.getCopyForId("emailInsertionNameLabel");
				//emailInsertionEmailLabel.text = copyProvider.getCopyForId("emailInsertionEmailLabel");
				//emailInsertionSubjectLabel.text = copyProvider.getCopyForId("emailInsertionSubjectLabel");
			}
			
			public function setDataProvider(test:ScheduledTest):void {
				if (test) {
					
					dataProvider = test;
					if (dataProvider.openTime) {
						var openDate:Date = DateUtils.ansiStringToDate(dataProvider.openTime);
						openTimeDataDate.selectedDate = openDate;
						openTimeDataHours.selectedIndex = setTimeIndex(openDate.hours, openDate.minutes);
						_openDate = openDate;
					} else {
						openTimeDataDate.selectedDate = null;
						openTimeDataHours.selectedIndex = -1;
						_openDate = null;
					}
					if (dataProvider.closeTime) {
						var closeDate:Date = DateUtils.ansiStringToDate(dataProvider.closeTime);
						closeTimeDataDate.selectedDate = closeDate;
						closeTimeDataHours.selectedIndex = setTimeIndex(closeDate.hours, closeDate.minutes);
						_closeDate = closeDate;
					} else {
						closeTimeDataDate.selectedDate = null;
						closeTimeDataHours.selectedIndex = -1;
						_closeDate = null;
					}
					startData.text = dataProvider.startData;
					captionData.text = dataProvider.caption;
					
					_startByCode = (dataProvider.startType == 'code');
					_showResult = (dataProvider.showResult);
					
					// ctp#60
					_language = dataProvider.language;
					// TODO where to get the list of available languages from?
					languageData.dataProvider = new ArrayCollection([{label:"English", data:"EN"},
						{label:"Bahasa Indonesia", data:"ID"},
						{label:"漢語", data:"ZH-TW"}]);
					for (var i:uint=0; i<languageData.dataProvider.length; i++) {
						if (languageData.dataProvider[i].data == _language) {
							languageData.selectedIndex = i;
							break;
						}
					}
					
					//dataProvider.emailInsertion = '"{\"note\":\"Come to the classroom\"}"';
					/*
					try {
						var emailInsertionObject:Object = (dataProvider.emailInsertion) ? JSON.decode(unescape(dataProvider.emailInsertion)) : new Object();
					} catch(e:Error) {
						emailInsertionObject = new Object();
					}
					// Catch JSON parse error that can leave a string not an object
					if (emailInsertionObject is String)
						emailInsertionObject = new Object();
					
					// ctp#214 ctp#351
					//emailInsertionNoteData.text = (emailInsertionObject.note) ? (emailInsertionObject.note) : '';
					//emailInsertionNameData.text = (emailInsertionObject.name) ? unescape(emailInsertionObject.name) : Constants.userName;
					//emailInsertionEmailData.text = (emailInsertionObject.email) ? unescape(emailInsertionObject.email) : Constants.email;
					//emailInsertionSubjectData.text = (emailInsertionObject.subject) ? unescape(emailInsertionObject.subject) : copyProvider.getCopyForId("emailInsertionSubject", {name: emailInsertionNameData.text});
					*/
					
					// Is the data editable?
					setDataEditable(dataProvider.status == ScheduledTest.STATUS_PRERELEASE);
					
					_errorText == '';
					//_isDirty = false;
				}
			}
			private function setDataEditable(editable:Boolean):void {
				captionData.editable = startData.editable = editable; 
				openTimeDataDate.enabled = closeTimeDataDate.enabled = editable;
				openTimeDataHours.enabled = closeTimeDataHours.enabled = editable; 
				showResult.enabled = startByCode.enabled = editable;
				saveButton.enabled = cancelButton.enabled = editable;
				languageData.enabled = editable;

				// This work, but gives wrong look
				//wholeDetailPanel.enabled = editable;
				var styleName:String = (editable) ? null : "gradientBackgroundEnabled";
				wholeDetailPanel.setStyle("styleName", (editable) ? null : "gradientBackgroundEnabled");
				
				// Turn off all selection and focus for stuff in the panel
				wholeDetailPanel.tabEnabled = editable;
				wholeDetailPanel.focusEnabled = editable;
				//captionData.selectable = editable;
			}
			
			private function selectionChanged(e:Event):void {
				switch (e.currentTarget) {
					case startByCode:
						_startByCode = e.currentTarget.selected;
						break;
					case showResult:
						_showResult = e.currentTarget.selected;
						break;
				}
			}
			public function dateChanged(e:Event):void {
				if (openTimeDataDate.selectedDate)
					_openDate = openTimeDataDate.selectedDate;
				if (_openDate) {
					_openDate.hours = openTimeDataHours.selectedItem.data.hours;
					_openDate.minutes = openTimeDataHours.selectedItem.data.mins;
				}
				if (closeTimeDataDate.selectedDate)
					_closeDate = closeTimeDataDate.selectedDate;
				if (_closeDate) {
					_closeDate.hours = closeTimeDataHours.selectedItem.data.hours;
					_closeDate.minutes = closeTimeDataHours.selectedItem.data.mins;
				}
			}

			private function getTestFromScreen():ScheduledTest {
				var updatedTest:ScheduledTest = new ScheduledTest();
				
				// Some data can't be changed on this screen
				updatedTest.testId = dataProvider.testId;
				updatedTest.productCode = dataProvider.productCode;
				updatedTest.groupId = dataProvider.groupId;
				updatedTest.language = dataProvider.language;
				updatedTest.status = dataProvider.status;
				
				if (_openDate)
					updatedTest.openTime = DateUtils.dateAndTimeToString(_openDate);
				if (_closeDate)
					updatedTest.closeTime = DateUtils.dateAndTimeToString(_closeDate);
				updatedTest.caption = captionData.text;
				updatedTest.showResult = showResult.selected;
				updatedTest.startType = (startByCode.selected) ? 'code' : 'timer';
				updatedTest.startData = (startByCode.selected) ? startData.text : null;
				updatedTest.language = languageData.selectedItem.data;
				
				return updatedTest;
			}
			
			private function safeChars(text:String):String {
				var build:String = escape(text);
				var pattern:RegExp = /%22/g;
				return build.replace(pattern, "%27");
			}
			
			// Have the user editable details changed?
			private function _isEqual(tdA:ScheduledTest, tdB:ScheduledTest):Boolean {
				return ((tdA.openTime == tdB.openTime) &&
					(tdA.closeTime == tdB.closeTime) &&
					(tdA.startData == tdB.startData) &&
					(tdA.caption == tdB.caption) &&
					(tdA.showResult == tdB.showResult) &&
					(tdA.startType == tdB.startType) && 
					(tdA.language == tdB.language)); 
					// (tdA.emailInsertion == tdB.emailInsertion));
			}
			// Have enough details been added?
			private function isComplete():Boolean {
				_errorText = "";
				
				if (!_closeDate) {
					_errorText = copyProvider.getCopyForId("testMissingCloseTime");
					return false;
				}
				
				// Check the start time
				if (!_openDate) {
					_errorText = copyProvider.getCopyForId("testMissingOpenTime");
					return false;
				}
				// Check the close time
				if (_closeDate) {
					if (ObjectUtil.dateCompare(_openDate, _closeDate) >= 0) {
						_errorText = copyProvider.getCopyForId("testCloseBeforeOpen");
						return false;
					}
				}
				
				// Check the code
				if (_startByCode) {
					var minLength:uint = 3;
					if (startData.text.length < minLength) {
						_errorText = copyProvider.getCopyForId("testCodeTooShort", {min: minLength}); // "The code must be at least 3 characters.";
						return false;
					}
				}
				
				return true;
			}
			
			// Trigger events from user action
			/*
			private function onUpdate():void {
			_isDirty = false;
			if (isComplete())
			dispatchEvent(new TestEvent(TestEvent.UPDATE, getTestFromScreen()));				
			}
			*/
			private function onCancel():void {
				dispatchEvent(new TestEvent(TestEvent.CANCEL, null));
			}
			private function onAdd():void {
				if (isComplete()) {
					dataProvider.status = ScheduledTest.STATUS_RELEASED;
					dispatchEvent(new TestEvent(TestEvent.ADD, getTestFromScreen()));
				}
			}
			private function formatDateTime(date:Date):String {
				return DateUtils.formatDate(date, "D MMM YYYY");
			}
		]]>
	</mx:Script>
	<mx:Style>
	</mx:Style>
	<!-- backgroundColor="#ECECEC" borderStyle="solid" -->
	<mx:VBox id="wholeDetailPanel" width="100%" height="100%" verticalGap="0" >
		<mx:VBox width="100%" height="100%" verticalGap="0" paddingLeft="20" paddingRight="20">
			<mx:Label id="captionLabel" width="100%" styleName="inputPromptBlack"/>
			<mx:TextInput id="captionData" styleName="inputEntry" width="100%" enabled="true"/>
			<mx:Text id="openTimeLabel" width="100%" paddingTop="10" styleName="inputPromptBlack"/>
			<mx:HBox>			
				<mx:DateField id="openTimeDataDate" width="110" editable="false" enabled="true"
							  labelFunction="formatDateTime" styleName="inputPromptBlack"
							  selectableRange="{{rangeStart : new Date()}}"
							  yearNavigationEnabled="true"/>
				<mx:ComboBox id="openTimeDataHours" enabled="true" width="80" styleName="inputPromptBlack"
							 dataProvider="{times}" labelFunction="displayTime" />
			</mx:HBox>				
			<mx:Text id="closeTimeLabel" width="100%" paddingTop="10" styleName="inputPromptBlack"/>
			<mx:HBox>			
				<mx:DateField id="closeTimeDataDate" width="110" editable="false" enabled="true"
							  labelFunction="formatDateTime" styleName="inputPromptBlack"
							  selectableRange="{{rangeStart : new Date()}}"
							  yearNavigationEnabled="true"/>
				<mx:ComboBox id="closeTimeDataHours" enabled="true" width="80"
							 dataProvider="{times}" labelFunction="displayTime" styleName="inputPromptBlack"/>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" paddingTop="10">
				<mx:CheckBox id="startByCode" selected="{_startByCode}" change="selectionChanged(event)" styleName="inputPromptBlack"/>
				<mx:TextInput id="startData" styleName="inputEntry" enabled="{_startByCode}" width="100"/>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" paddingTop="10">
				<mx:CheckBox id="showResult" selected="{_showResult}" styleName="inputPromptBlack" />
			</mx:HBox>
			<mx:Text id="languageLabel" width="100%" paddingTop="10" styleName="inputPromptBlack"/>
			<mx:ComboBox id="languageData" width="150" styleName="inputEntry"/>
			<mx:Label id="errorTextLabel" text="{_errorText}" styleName="errorMessage"
					  visible="{!(_errorText == '')}" includeInLayout="{!(_errorText == '')}" textAlign="center"
					  paddingTop="10"/>
			
		</mx:VBox>
		<mx:Spacer height="100%" />
		<mx:Button id="saveButton" width="100%" height="30" click="onAdd()"
				   disabledSkin="{FlatButtonSkin}" downSkin="{FlatButtonSkin}"
				   overSkin="{FlatButtonSkin}" textRollOverColor="#FFFFFF"
				   upSkin="{FlatButtonSkin}" styleName="flatButton"/>
		<mx:Spacer height="6" />
		<mx:Button id="cancelButton" width="100%" height="30" click="onCancel()"
				   disabledSkin="{FlatButtonSkin}" downSkin="{FlatButtonSkin}"
				   overSkin="{FlatButtonSkin}" textRollOverColor="#FFFFFF"
				   upSkin="{FlatButtonSkin}" styleName="flatButton"/>
	</mx:VBox>
	
</mx:VBox>