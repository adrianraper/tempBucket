<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:view="com.clarityenglish.testadmin.view.management.components.*"
		   xmlns:ui="com.clarityenglish.testadmin.view.management.ui.*"
		   implements="com.clarityenglish.common.view.interfaces.CopyReceiver">
	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.adobe.serialization.json.JSONDecoder;
			import com.adobe.serialization.json.JSONEncoder;
			import com.clarityenglish.common.events.EmailEvent;
			import com.clarityenglish.common.model.interfaces.CopyProvider;
			import com.clarityenglish.common.vo.content.Title;
			import com.clarityenglish.common.vo.email.TemplateDefinition;
			import com.clarityenglish.common.vo.manageable.Manageable;
			import com.clarityenglish.common.vo.manageable.User;
			import com.clarityenglish.common.vo.tests.ScheduledTest;
			import com.clarityenglish.resultsmanager.Constants;
			import com.clarityenglish.resultsmanager.view.management.events.ReportEvent;
			import com.clarityenglish.resultsmanager.view.management.ui.TestadminReportWindow;
			import com.clarityenglish.resultsmanager.view.shared.events.TestEvent;
			import com.clarityenglish.testadmin.view.login.components.FlatButtonSkin;
			import com.clarityenglish.common.events.LoginEvent;
			
			import flash.text.StyleSheet;
			
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import org.davekeen.utils.ClassUtils;
			import org.davekeen.utils.DateUtils;
			
			private var copyProvider:CopyProvider;
			
			public var manageables:Array;
			
			private var reportWindow:TestadminReportWindow;
			
			public var defaultLanguage:String;
			public var productCode:String;
			
			[Bindable]
			public var selectedGroup:Manageable;
			public var selectedTitle:Title;
			
			// gh#1499
			[Bindable]
			public var licencesPurchased:uint;
			[Bindable]
			public var licencesUsed:uint;
			public var _licencesScheduled:uint;
			[Bindable]
			public var licencesNeeded:int;
			
			// ctp#374
			[Bindable]
			private var addingNew:Boolean = false;
			
			// Icon for the alert window
			[Embed(source="/../assets/warning_icon.swf")]
			private var alertWarningIcon:Class;	

			private var specialReportTemplate:String = "DPTSummary";

			public function initLicencesUsed(purchased:uint, used:uint, scheduled:uint):void {
				licencesPurchased = purchased;
				licencesUsed = used;
				licencesScheduled = scheduled;
				licencesNeeded = (licencesUsed + _licencesScheduled) - licencesPurchased;
				//licencesNeeded = 15;
				var licencesLeft:int = (licencesPurchased - licencesUsed);
				var replaceObj:Object = {"licencesScheduled": _licencesScheduled.toString(), 
					"licencesAvailable": (licencesLeft <= 0) ? '0' : licencesLeft.toString(),
					"licencesNeeded" : licencesNeeded.toString()};
				licencesNeededLabel.text = copyProvider.getCopyForId("licencesNeededWarning", replaceObj);
				buyMoreButton.label = copyProvider.getCopyForId('buyMoreLicences', replaceObj);
				
				// ctp#206 Are you allowed to schedule a test?
				// This is not much use as it will get overwritten during use...
				if (licencesUsed >= licencesPurchased) {
					newTestButton.enabled = false;
				} else {
					newTestButton.enabled = true;					
				}				
			}
			public function set licencesScheduled(value:uint):void {
				_licencesScheduled = value;
				initLicencesUsed(licencesPurchased, licencesUsed, value);
			}
			[Bindable]
			public function get licencesScheduled():uint {
				return _licencesScheduled;
			}
			
			public function setCopyProvider(copyProvider:CopyProvider):void {
				this.copyProvider = copyProvider;
				
				testDetailPanel.setCopyProvider(copyProvider);
				//listOfTestsLabel.text = copyProvider.getCopyForId("listOfTestsLabel");
				newTestButton.label = copyProvider.getCopyForId("addTest");
				selectGroupLabel.text = copyProvider.getCopyForId("selectGroup");
				deleteTestButton.label = copyProvider.getCopyForId("deleteTest");
				//releaseTestButton.label = copyProvider.getCopyForId("releaseTest");
				
				//firstStepWindow.title = copyProvider.getCopyForId("testAdminFirstStep");
				//licenceUseLabel.text = copyProvider.getCopyForId("licenceUse");
				licencesScheduledLabel.text = copyProvider.getCopyForId("licencesScheduled");
				licencesUsedLabel.text = copyProvider.getCopyForId("licencesUsed");
				licencesPurchasedLabel.text = copyProvider.getCopyForId("licencesPurchased");
				
				sendWelcomeEmailButton.label = copyProvider.getCopyForId("sendWelcomeEmail");
				sendResultEmailButton.label = copyProvider.getCopyForId("sendResultEmail");
				
				manageablesLabel.text = copyProvider.getCopyForId("testAdminManageables");
				detailedManageablesLabel.text = copyProvider.getCopyForId("detailedTestAdminManageablesLabel");
				testsLabel.text = copyProvider.getCopyForId("testAdminTests");
				detailedTestsLabel.text = copyProvider.getCopyForId("detailedTestAdminTests");
				testDetailsLabel.text = copyProvider.getCopyForId("testAdminTestDetails");
				detailedTestDetailsLabel.text = copyProvider.getCopyForId("checkTestDetails");
				
				logoutButton.label = copyProvider.getCopyForId("logoutButton");
				helpButton.label = copyProvider.getCopyForId("helpButton");
			}
			
			private function onSendWelcomeEmail(e:Event):void {
				// TODO where should this be set. rm.xml, config.xml?
				var test:ScheduledTest = testList.selectedItem as ScheduledTest;
				var welcomeEmailTemplate:TemplateDefinition = new TemplateDefinition();
				welcomeEmailTemplate.filename = "user/DPT-welcome";
				welcomeEmailTemplate.name = "invitation";
				
				// ctp#214 Need to send the test administrator details for the email too
				var administrator:Object = {name: Constants.userName, email: Constants.email};
				welcomeEmailTemplate.data = {test: test, administrator: administrator};
				// ctp#354
				//var emailInsertion:Object = (test.emailInsertion) ? JSON.decode(test.emailInsertion) : null;
				//var usersWithoutEmail:uint = countUsersWithNoEmail();
				
				/*
				if (usersWithoutEmail >= 1) {
					// Remove the alert and show users with no email on the preview screen
					showSendEmailDialog(usersWithoutEmail, function(e:CloseEvent):void {
						if (e.detail == Alert.OK)
							dispatchEvent(new EmailEvent(EmailEvent.PREVIEW_EMAIL, welcomeEmailTemplate, new Array(selectedGroup)));
					}, welcomeEmailTemplate );
				} else {
				*/
				dispatchEvent(new EmailEvent(EmailEvent.PREVIEW_EMAIL, welcomeEmailTemplate, new Array(selectedGroup)));
			}
			
			// This function not used (or tested) yet
			private function onSendResultEmail(e:Event):void {
				var test:ScheduledTest = testList.selectedItem as ScheduledTest;
				var resultEmailTemplate:TemplateDefinition = new TemplateDefinition();
				resultEmailTemplate.filename = (test.showResult) ? "user/DPT-with-result" : "user/DPT-without-result";
				resultEmailTemplate.name = "result";
				
				// ctp#214 Need to send the test administrator details for the email too
				var administrator:Object = {name: Constants.userName, email: Constants.email};
				resultEmailTemplate.data = {test: test, administrator: administrator};
				
				dispatchEvent(new EmailEvent(EmailEvent.PREVIEW_EMAIL, resultEmailTemplate, new Array(selectedGroup)));
			}
			
			private function countUsersWithNoEmail():uint {
				//var userCount:uint = 0;
				var usersWithoutEmail:uint = 0;
				var manageables:Array = selectedGroup.getSubUsers();
				
				// Count how many users, and note how many don't have emails
				for each (var manageable:Manageable in manageables) {
					if (manageable is User) {
						if ((manageable as User).email) {
							//userCount++;
						} else {
							usersWithoutEmail++;
						}
					}
				}	
				return usersWithoutEmail;
			}
			private function showSendEmailDialog(usersWithoutEmail:uint, alertListener:Function, template:TemplateDefinition):void {
				var warningLiteral:String = (usersWithoutEmail > 1) ? "sendEmailWarnAboutNoEmailMultiple" : "sendEmailWarnAboutNoEmailSingle";
				var text:String = copyProvider.getCopyForId(warningLiteral, {emailType: template.name, noEmailCount: usersWithoutEmail});
				Alert.show(text, "Confirm", Alert.OK | Alert.CANCEL, this, alertListener, alertWarningIcon);
			}
			
			// Show limited report filtering window
			// Don't offer any filtering
			/*
			public function onGenerateReport(e:Event):void {
				if (!reportWindow) {
					reportWindow = PopUpManager.createPopUp(UIComponent(parentApplication), TestadminReportWindow, true) as TestadminReportWindow;
				} else {
					PopUpManager.addPopUp(reportWindow, UIComponent(parentApplication), true);
				}
				
				reportWindow.setCopyProvider(copyProvider);
				reportWindow.parentView = this;
				reportWindow.onReportables = new Array(selectedTitle);
				// gh#1523
				
				reportWindow.
				PopUpManager.centerPopUp(reportWindow);
			}
			*/
			public function onGenerateReport(e:Event):void {
				var selectedTest:ScheduledTest = testList.selectedItem as ScheduledTest;
				var onReportables:Array = new Array(selectedTitle);
				var forReportables:Array = new Array(selectedGroup, selectedTest); 
				var reportEvent:ReportEvent = new ReportEvent(ReportEvent.GENERATE, forReportables, onReportables, true);
				
				reportEvent.template = specialReportTemplate;
				
				reportEvent.includeInactiveUsers = true;;
				
				reportEvent.forClass = 'Group';
				dispatchEvent(reportEvent);
			}
			
			private function onTestChange(e:ListEvent):void {
				if (testList.selectedItem) {
					var selectedTest:ScheduledTest = testList.selectedItem as ScheduledTest;
					testDetailPanel.setDataProvider(selectedTest);
					detailedTestDetailsLabel.text = (selectedTest.status == ScheduledTest.STATUS_PRERELEASE) ? copyProvider.getCopyForId("setTestDetails")
						: copyProvider.getCopyForId("checkTestDetails");
				}
				resetButtons();
			}
			
			private function onNewTestButtonClick(e:Event):void {				
				var newScheduledTest:ScheduledTest = new ScheduledTest();
				newScheduledTest.groupId = selectedGroup.id;
				// gh#1523 Fake a testId to allow this to be in a List (to do with Reportable.uid)
				newScheduledTest.testId = '1';
				
				newScheduledTest.productCode = productCode;
				newScheduledTest.language = defaultLanguage;
				
				// defaults for a new test
				newScheduledTest.caption = "New test";
				newScheduledTest.status = ScheduledTest.STATUS_PRERELEASE;
				var today:Date = new Date();
				today.hours = 9;
				today.minutes = 0;
				today.seconds = 0;
				newScheduledTest.openTime = DateUtils.dateAndTimeToString(today);
				var later:Date = new Date();
				later.hours = 17;
				later.minutes = 0;			
				later.seconds = 0;
				newScheduledTest.closeTime = DateUtils.dateAndTimeToString(later);
				
				// Put it temporarily into the list
				//testList.dataProvider.addItem(newScheduledTest);
				//testList.selectedIndex = testList.dataProvider.length - 1;
				// ctp#374
				addingNew = true;
				// ctp#378
				generateReportButton.visible = generateReportButton.includeInLayout = false;
				deleteTestButton.visible = deleteTestButton.includeInLayout = false;
				sendWelcomeEmailButton.visible = sendWelcomeEmailButton.includeInLayout = false;
				
				testDetailPanel.setDataProvider(newScheduledTest);
				testDetailPanel.captionData.setFocus();
				testDetailPanel.visible = true;

				detailedTestDetailsLabel.text = copyProvider.getCopyForId("setTestDetails");
			}
			
			private function onDeleteTestButtonClick(e:Event):void {
				var selectedTest:ScheduledTest = testList.selectedItem as ScheduledTest;
				// If this test is not really saved, delete just removes it from the list
				switch (selectedTest.status) {
					case ScheduledTest.STATUS_PRERELEASE:
						var currentSelectedIndex:int = testList.selectedIndex;
						testList.dataProvider.removeItemAt(currentSelectedIndex);
						testList.selectedIndex = currentSelectedIndex - 1;
						break;
					// Delete the test, and if it is active reduce the scheduled test count
					case ScheduledTest.STATUS_OPEN:
					case ScheduledTest.STATUS_CLOSED:
					case ScheduledTest.STATUS_RELEASED:
					default:
						if (selectedTest.status != ScheduledTest.STATUS_CLOSED)
							clearLicencesScheduled();
						selectedTest.status = ScheduledTest.STATUS_DELETED;
						dispatchEvent(new TestEvent(TestEvent.DELETE, selectedTest));
				}
				resetSelection();
			}
			
			/*
			private function onReleaseTestButtonClick(e:Event):void {
			var selectedTest:ScheduledTest = testList.selectedItem as ScheduledTest;
			selectedTest.status = ScheduledTest.STATUS_RELEASED;
			dispatchEvent(new TestEvent(TestEvent.UPDATE, selectedTest));
			}
			*/
			// gh#1499
			public function addLicencesScheduled():void {
				licencesScheduled += selectedGroup.userCount;
				//if (licencesNeeded > 0) {
				//	var text:String = copyProvider.getCopyForId("notEnoughLicences", {licencesAvailable: (licencesPurchased - licencesUsed), licencesScheduled: licencesScheduled});
				//	Alert.show(text, "Please note", Alert.OK, this, null, alertWarningIcon);
				//}
			}
			// gh#1499 Reduce the number of scheduled tests
			// As a test can be deleted at any point, this makes the scheduled count an estimate if the test is active
			// so you don't need a complex counting basis
			public function clearLicencesScheduled():void {
				licencesScheduled -= selectedGroup.userCount;
			}
			
			// For the currently selected test, what actions can you take?
			public function resetButtons():void {
				addingNew = false;
				newTestButton.visible = newTestButton.includeInLayout = (selectedGroup);
				var selectedTest:ScheduledTest = testList.selectedItem as ScheduledTest;
				
				if (selectedTest) {
					// You can send out the result email once the test is closed
					//sendResultEmailButton.visible = sendResultEmailButton.includeInLayout = selectedTest.isTestClosed();
					
					// You can release a prerelease test
					//releaseTestButton.visible = releaseTestButton.includeInLayout = selectedTest.isTestDraft();
					
					// You can send out the invitation email anytime before it closes 
					sendWelcomeEmailButton.visible = sendWelcomeEmailButton.includeInLayout = (selectedTest.isTestReleased() && !selectedTest.isTestClosed());
					
					// You can see the results any time after it opens 
					generateReportButton.visible = generateReportButton.includeInLayout = selectedTest.isTestStarted();
					if (selectedTest.isTestClosed()) {
						generateReportButton.label = copyProvider.getCopyForId("generateReport");
					} else {
						generateReportButton.label = copyProvider.getCopyForId("checkProgress");
					}					
					// You can delete a test if it was set for the currently selected group
					// This is to stop you deleting a test set for a parent when you are in a child
					// You can delete a test at any time. 
					if (selectedGroup)
						deleteTestButton.visible = deleteTestButton.includeInLayout = (selectedTest.groupId == selectedGroup.id);
				} else {
					sendWelcomeEmailButton.visible = sendWelcomeEmailButton.includeInLayout = false;
					generateReportButton.visible = generateReportButton.includeInLayout = false;
					deleteTestButton.visible = deleteTestButton.includeInLayout = false; 
				}
				//if (selectedGroup) {
					//testListLabel.text = copyProvider.getCopyForId(("listOfTestsLabel"), {"name": selectedGroup.name});
					//actionsLabel.text = copyProvider.getCopyForId(("actionLabel"));
				//}
				
			}
			public function resetSelection():void {
				testList.selectedIndex = -1;
				onTestChange(null);
			}
			public function refreshSelection():void {
				onTestChange(null);
			}
			public function showCaption(item:Object):String {
				switch (item.status) {
					case ScheduledTest.STATUS_PRERELEASE:
						var statusString:String = 'not saved';
						break;
					case ScheduledTest.STATUS_RELEASED:
						statusString = 'ready';
						break;
					case ScheduledTest.STATUS_OPEN:
						statusString = 'in progress';
						break;
					case ScheduledTest.STATUS_CLOSED:
						statusString = 'complete';
						break;
					// This is not anticipated being used
					case ScheduledTest.STATUS_DELETED:
						statusString = 'archived';
						break;
				}	 
				return item.caption + " (" + statusString + ")"; 
			}
			private function onLogout():void {
				dispatchEvent(new LoginEvent(LoginEvent.LOGOUT, null, null));
			}
			private function onHelp():void {
				navigateToURL(new URLRequest("https://www.clarityenglish.com/support/DPTAdminPanel.pdf"), "_blank");
			}
			
		]]>
	</mx:Script>
	<!--
	
	-->
	<mx:VBox width="100%" height="100%" verticalGap="0" >
  	  <mx:HBox id="adminPanelBanner" width="100%" height="94" verticalAlign="middle"
			   paddingBottom="0" horizontalGap="30"
			   borderSides="bottom" borderStyle="solid">
		  <mx:Spacer width="0"/>
		  <mx:Image source="@Embed('/../assets/dpt_admin_panel_logo_smallest.png')"/>
		  <mx:Spacer width="100%"/>
		  <mx:VBox width="160" backgroundColor="#D95982" cornerRadius="6" 
				   paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10"
				   visible="{licencesNeeded &gt; 0}" includeInLayout="{licencesNeeded &gt; 0}">
			  <mx:Text id="licencesNeededLabel" color="#ffffff" width="100%"/>
		  </mx:VBox>
		  <!-- ctp#399 visible="{licencesNeeded &gt; -10}" includeInLayout="{licencesNeeded &gt; -10}" -->
		  <mx:Button id="buyMoreButton" height="30" visible="false" includeInLayout="false"
					 overSkin="{FlatButtonSkin}" upSkin="{FlatButtonSkin}" downSkin="{FlatButtonSkin}" styleName="flatButton"
					 textRollOverColor="#FFFFFF"/>
		  <mx:VBox width="100%" verticalGap="0">
			  <mx:Label width="100%" text="{licencesPurchased.toString()}" styleName="licenceNumber" textAlign="center" />
			  <mx:Label width="100%" id="licencesPurchasedLabel" paddingTop="-8" textAlign="center" styleName="detailedHeadingLabelBlack" />
		  </mx:VBox>
		  <mx:VBox width="100%" verticalGap="0">
			  <mx:Label width="100%" text="{licencesUsed.toString()}" styleName="licenceNumber" textAlign="center" />
			  <mx:Label width="100%" id="licencesUsedLabel" paddingTop="-8" textAlign="center" styleName="detailedHeadingLabelBlack" />
		  </mx:VBox>
		  <mx:VBox width="100%" verticalGap="0">
			  <mx:Label width="100%" text="{licencesScheduled.toString()}" styleName="licenceNumber" textAlign="center" />
			  <mx:Label width="100%" id="licencesScheduledLabel" paddingTop="-8" textAlign="center" styleName="detailedHeadingLabelBlack" />
		  </mx:VBox>
		  <mx:Button id="helpButton" click="onHelp()" width="100" height="30" 
					 overSkin="{FlatButtonSkin}" upSkin="{FlatButtonSkin}" downSkin="{FlatButtonSkin}"
					 textRollOverColor="#FFFFFF" styleName="flatButton"/>
		  <mx:Button id="logoutButton" click="onLogout()" width="100" height="30" 
					 overSkin="{FlatButtonSkin}" upSkin="{FlatButtonSkin}" downSkin="{FlatButtonSkin}"
					 textRollOverColor="#FFFFFF" styleName="flatButton"/>
		  <mx:Spacer width="10"/>
	  </mx:HBox>
	  <mx:HBox width="100%" height="100%" borderStyle="none" horizontalGap="0">
		  <mx:VBox width="33%" height="100%" borderSides="right" borderStyle="solid">
			  <mx:Canvas width="100%" height="76" backgroundColor="#44AA66" backgroundAlpha="0.2" horizontalScrollPolicy="off" verticalScrollPolicy="off" >
				  <mx:Label height="100%" text="1" styleName="bannerStepNumbers" x="0" y="-24" />
				  <mx:VBox width="100%" height="100%" horizontalAlign="center" horizontalCenter="0" paddingTop="10">
				  	<mx:Label id="manageablesLabel" styleName="subHeadingLabelBlack" width="100%" textAlign="center" />
				  	<mx:Text id="detailedManageablesLabel" styleName="detailedHeadingLabelBlack" width="160" textAlign="center" />
			  	</mx:VBox>
			  </mx:Canvas>
			  <view:ManageablesView id="manageablesView" width="100%" height="100%" paddingLeft="0"/>
		  </mx:VBox>
		  <mx:VBox borderSides="right" borderStyle="solid" width="33%" height="100%" >
			  <mx:Canvas width="100%" height="76" backgroundColor="#44AA99" backgroundAlpha="0.2" horizontalScrollPolicy="off" verticalScrollPolicy="off" >
				  <mx:Label height="100%" text="2" styleName="bannerStepNumbers" x="0" y="-24" />
				  <mx:VBox width="100%" height="100%" horizontalAlign="center" horizontalCenter="0" paddingTop="10">
					  <mx:Label id="testsLabel" styleName="subHeadingLabelBlack" width="100%" textAlign="center" />
				      <mx:Label id="detailedTestsLabel" styleName="detailedHeadingLabelBlack" width="160" textAlign="center" />
				  </mx:VBox>
			  </mx:Canvas>
			  <mx:Text id="selectGroupLabel" paddingTop="50" width="280" height="100%" visible="{selectedGroup == null}" includeInLayout="{selectedGroup == null}" 
					   styleName="testList" textAlign="center" horizontalCenter="0" />
			  <mx:List id="testList" width="100%" height="100%" change="onTestChange(event)" selectionColor="#44aa66" rollOverColor="#00a79d"
							 textSelectedColor="#ffffff" labelFunction="showCaption" verticalAlign="middle" rowHeight="32" paddingLeft="16" 
							 visible="{selectedGroup != null}" includeInLayout="{selectedGroup != null}" styleName="testList"
							 borderStyle="none">
				</mx:List>
				<mx:Button id="newTestButton" width="100%" height="30" click="onNewTestButtonClick(event)" 
						   overSkin="{FlatButtonSkin}" upSkin="{FlatButtonSkin}" downSkin="{FlatButtonSkin}" disabledSkin="{FlatButtonSkin}"
						   textRollOverColor="0xFFFFFF"
						   visible="{selectedGroup != null}" includeInLayout="{selectedGroup != null}" styleName="flatButton" />
		  </mx:VBox>
		  <mx:VBox width="34%" height="100%" >
				<mx:Canvas width="100%" height="76" backgroundColor="#00A79D" backgroundAlpha="0.2" horizontalScrollPolicy="off" verticalScrollPolicy="off" >
					<mx:Label height="100%" text="3" styleName="bannerStepNumbers" x="0" y="-24" />
					<mx:VBox width="100%" height="100%" horizontalAlign="center" horizontalCenter="0" paddingTop="10">
						<mx:Label id="testDetailsLabel" styleName="subHeadingLabelBlack" width="100%" textAlign="center" />
						<mx:Label id="detailedTestDetailsLabel" styleName="detailedHeadingLabelBlack" width="160" textAlign="center" />
					</mx:VBox>
				</mx:Canvas>
		  		<ui:TestDetailPanel width="100%" height="100%" id="testDetailPanel" 
								visible="{(testList.selectedItem != null || addingNew) &amp;&amp; selectedGroup != null}" 
								includeInLayout="true" />
				<mx:VBox width="100%" horizontalAlign="center" verticalGap="6" visible="{selectedGroup != null}" includeInLayout="{selectedGroup != null}">					
					<mx:Button id="generateReportButton" visible="false" includeInLayout="false" width="100%" height="30" click="onGenerateReport(event)" 
							   overSkin="{FlatButtonSkin}" upSkin="{FlatButtonSkin}" downSkin="{FlatButtonSkin}"
							   textRollOverColor="#FFFFFF" styleName="flatButton"/>
					<mx:Button id="sendWelcomeEmailButton" visible="false" includeInLayout="false" width="100%" height="30" click="onSendWelcomeEmail(event)" 
							   overSkin="{FlatButtonSkin}" upSkin="{FlatButtonSkin}" downSkin="{FlatButtonSkin}"
							   textRollOverColor="#FFFFFF" styleName="flatButton"/>
					<mx:Button id="sendResultEmailButton" visible="false" includeInLayout="false" width="100%" height="30" click="onSendResultEmail(event)" 
							   overSkin="{FlatButtonSkin}" upSkin="{FlatButtonSkin}" downSkin="{FlatButtonSkin}"
							   textRollOverColor="#FFFFFF" styleName="flatButton"/>
					<mx:Button id="deleteTestButton" visible="false" includeInLayout="false" width="100%" height="30" click="onDeleteTestButtonClick(event)" 
							   overSkin="{FlatButtonSkin}" upSkin="{FlatButtonSkin}" downSkin="{FlatButtonSkin}"
							   textRollOverColor="#FFFFFF" styleName="flatButton"/>
				</mx:VBox>
			</mx:VBox>
		</mx:HBox>
	</mx:VBox>
</mx:Canvas>