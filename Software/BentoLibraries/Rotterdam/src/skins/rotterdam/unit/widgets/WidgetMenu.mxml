<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:widgets="skins.rotterdam.unit.widgets.*">
	
	<fx:Script>
		<![CDATA[
			import com.clarityenglish.common.model.interfaces.CopyProvider;
			import com.clarityenglish.rotterdam.view.unit.events.WidgetMenuEvent;
			
			import skins.assets.widgets.*;
			
			import spark.components.ButtonBarButton;
			import spark.events.IndexChangeEvent;
			
			private var _xml:XML;
			
			private var currentIndex:Number;
			
			protected var copyProvider:CopyProvider;
			
			[Bindable]
			protected var menuRenameItemLabel:String;
			
			[Bindable]
			protected var menuCopyItemLabel:String;
			
			[Bindable]
			protected var menuDeleteItemLabel:String;
			
			[Bindable]
			protected var menuEditItemLabel:String;
			
			public function get xml():XML {
				return _xml;
			}
			
			public function set xml(value:XML):void {
				_xml = value;
				
				if (_xml) {
					currentIndex = _xml.@span;
					
					// Set the span indicator from the @span attribute
					spanButtonBar.selectedIndex = _xml.@span - 1;
					
					// If there is a state with the type of the widget then set it (this allows menu customization based on widget type)
					setCurrentState(hasState(_xml.@type) ? _xml.@type : "normal");
				} else {
					setCurrentState("normal");
				}
			}
			
			public function setCopyProvider(copyProvider:CopyProvider):void {
				this.copyProvider = copyProvider;
				
				menuRenameItemLabel = copyProvider.getCopyForId('menuRenameItem');
				menuCopyItemLabel = copyProvider.getCopyForId('menuCopyItem');
				menuDeleteItemLabel = copyProvider.getCopyForId('menuDeleteItem');
				menuEditItemLabel = copyProvider.getCopyForId('menuEditItem');
			}
			
			protected function onRenameClick(event:MouseEvent):void {
				dispatchEvent(new WidgetMenuEvent(WidgetMenuEvent.MENU_HIDE, true));
				// gh#187
				dispatchEvent(new WidgetMenuEvent(WidgetMenuEvent.WIDGET_RENAME, true));
			}
			
			protected function onDeleteClick(event:MouseEvent):void {
				dispatchEvent(new WidgetMenuEvent(WidgetMenuEvent.MENU_HIDE, true));
				dispatchEvent(new WidgetMenuEvent(WidgetMenuEvent.WIDGET_DELETE, true, xml));
			}
			
			protected function onCopyClick(event:MouseEvent):void {
				dispatchEvent(new WidgetMenuEvent(WidgetMenuEvent.MENU_HIDE, true));
				// Not yet implemented
			}
			
			protected function onEditClick(event:MouseEvent):void {
				dispatchEvent(new WidgetMenuEvent(WidgetMenuEvent.MENU_HIDE, true));
				dispatchEvent(new WidgetMenuEvent(WidgetMenuEvent.WIDGET_EDIT, true, xml));
			}
			
			protected function onSpanChange(event:IndexChangeEvent):void {
				// gh#331
				if (event.target.selectedIndex == -1) {
					event.target.selectedIndex = currentIndex;
				} else {
					// Change the @span attribute in the XML based on the selection and shut the menu
					_xml.@span = event.target.selectedIndex + 1;
					dispatchEvent(new WidgetMenuEvent(WidgetMenuEvent.MENU_HIDE, true));
					currentIndex = event.target.selectedIndex;
				}				
			}
			
			public function setSpanButtonEnable(index:Number, enable:Boolean):void {
				(spanButtonBar.dataGroup.getElementAt(index) as ButtonBarButton).enabled = enable;
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="text" />
	</s:states>
	
	<!-- The menu -->
	<s:Group id="menu" top="25" right="0" width="162">
		<s:Rect left="0" right="0" top="0" bottom="0" radiusX="6" radiusY="6">
			<s:stroke>
				<s:SolidColorStroke color="#D8D8D8" />
			</s:stroke>
			<s:fill>
				<s:SolidColor color="#FFFFFF" />
			</s:fill>
		</s:Rect>
		
		<s:VGroup left="0" right="0" gap="0" horizontalAlign="center">
			<s:Button id="renameButton" label="{menuRenameItemLabel}" icon="{CopyIcon}" width="100%" height="50" click="onRenameClick(event)" enabled="true" />
			
			<s:Line width="135">
				<s:stroke>
					<s:SolidColorStroke color="#D8D8D8" />
				</s:stroke>
			</s:Line>
			
			<s:Button id="deleteButton" label="{menuDeleteItemLabel}" icon="{DeleteIcon}" width="100%" height="50" click="onDeleteClick(event)" />
			
			<s:Line width="135">
				<s:stroke>
					<s:SolidColorStroke color="#D8D8D8" />
				</s:stroke>
			</s:Line>
			
			<s:Button id="copyButton" label="{menuCopyItemLabel}" icon="{CopyIcon}" width="100%" height="50" click="onCopyClick(event)" enabled="false" />
			
			<s:Line width="135" excludeFrom="text" >
				<s:stroke>
					<s:SolidColorStroke color="#D8D8D8" />
				</s:stroke>
			</s:Line>
			
			<s:Button id="editButton" label="{menuEditItemLabel}"  width="100%" height="50" click="onEditClick(event)" excludeFrom="text" />
			
			<s:ButtonBar id="spanButtonBar" width="100%" height="50" change="onSpanChange(event)" color="0xD8D8D8">
				<s:dataProvider>
					<s:ArrayList>
						<fx:Object icon="{Span1Icon}" label="" />
						<fx:Object icon="{Span2Icon}" label="" />
						<fx:Object icon="{Span3Icon}" label="" />
					</s:ArrayList>
				</s:dataProvider>
			</s:ButtonBar>
		</s:VGroup>
	</s:Group>
	
</s:Group>
