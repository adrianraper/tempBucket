<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.

 @see spark.components.ToggleButton

 @langversion 3.0
 @playerversion Flash 10
 @playerversion AIR 1.5
 @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="21"
                   minHeight="21"
                   alpha.disabledStates="0.5">
    <fx:Metadata>[HostComponent("spark.components.ButtonBarButton")]</fx:Metadata>

    <!-- host component -->
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
         For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */
        override public function get colorizeExclusions():Array {return exclusions;}

        /**
         * @private
         */
        override protected function initializationComplete():void {
            useChromeColor = true;
            super.initializationComplete();
        }

        /**
         * @private
         */
        private var cornerRadius:Number = 6;
    </fx:Script>

    <fx:Declarations>
        <s:GlowFilter id="glowFilter" alpha="0.6" blurX="2" blurY="0" color="0x000000" knockout="false" quality="10" />
        <s:DropShadowFilter id="dropShadowFilter" blurX="2" blurY="0" angle="-90" distance="0.5" alpha="0.8" />
    </fx:Declarations>

    <fx:Script>
		<![CDATA[

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            /*
            if (shadow) {
                if (getStyle("buttonHeight"))
                    shadow.height = getStyle("buttonHeight");
                else
                    shadow.height = 35;
            }
            */
            if (filler) {
                if (getStyle("buttonHeight"))
                    filler.height = getStyle("buttonHeight");
                else
                    filler.height = 35;
            }
            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }
        ]]>
	</fx:Script>

    <s:transitions>
        <s:Transition fromState="up" toState="over" autoReverse="true" >
            <s:AnimateColor  targets="{[color1, color2]}"  duration="200" />
        </s:Transition>

        <s:Transition  fromState="over" toState="up" autoReverse="true" >
            <s:AnimateColor targets="{[color1, color2]}" duration="300" />
        </s:Transition>
    </s:transitions>

    <!-- states -->
    <s:states>
        <s:State name="up" stateGroups="upStates" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="upStates, selectedStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="disabledStates, selectedStates" />
    </s:states>

    <s:Rect id="filler" left="0" right="0" filters="{dropShadowFilter}"
            topLeftRadiusX="{cornerRadius}" topLeftRadiusY="{cornerRadius}" topRightRadiusX="{cornerRadius}" topRightRadiusY="{cornerRadius}" >
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry id="color1" color="#ffffff" color.selectedStates="#333333" color.down="#373737" ratio="0" />
                <s:GradientEntry id="color2" color="#dcdcdc" color.selectedStates="#595959" color.down="#111111" ratio="1"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>

    <s:Label id="labelDisplay"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1" verticalAlign="middle"
             color.up="#666666" color.over="#666666" color="#ffffff"
            left="10" right="10" top="4" bottom="4">
    </s:Label>

</s:SparkButtonSkin>
