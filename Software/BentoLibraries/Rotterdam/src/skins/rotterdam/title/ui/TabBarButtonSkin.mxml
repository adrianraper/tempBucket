<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.

 @see spark.components.ToggleButton

 @langversion 3.0
 @playerversion Flash 10
 @playerversion AIR 1.5
 @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="21"
                   minHeight="21"
                   alpha.disabledStates="0.5">
    <fx:Metadata>[HostComponent("spark.components.ButtonBarButton")]</fx:Metadata>

    <!-- host component -->
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
         For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */
        override public function get colorizeExclusions():Array {return exclusions;}

        /**
         * @private
         */
        override protected function initializationComplete():void {
            useChromeColor = true;
            super.initializationComplete();
        }

        /**
         * @private
         */
        private var cornerRadius:Number = 2;
    </fx:Script>

    <fx:Declarations>
        <s:GlowFilter id="glowFilter" alpha="0.6" blurX="2" blurY="2" color="0x000000" knockout="false" quality="10" />
    </fx:Declarations>

    <s:transitions>
        <s:Transition fromState="up" toState="over" autoReverse="true" >
            <s:AnimateColor  targets="{[color1, color2]}"  duration="200" />
        </s:Transition>

        <s:Transition  fromState="over" toState="up" autoReverse="true" >
            <s:AnimateColor targets="{[color1, color2]}" duration="300" />
        </s:Transition>

    </s:transitions>

    <!-- states -->
    <s:states>
        <s:State name="up" stateGroups="upStates" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="upStates, selectedStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="disabledStates, selectedStates" />
    </s:states>

    <!-- layer 2: fill -->
    <!--- @private -->
    <s:Group id="trapezoidTab" left="0" right="0" top="0" bottom="0" filters="{glowFilter}">
        <s:Path left="0" right="0" top="0" bottom="0" >
            <s:data>M110.999 37.2583C111.778 39.3154 110.616 40.999 108.416 40.999L4 40.999C1.7998 40.999 0 39.1992 0 36.999L0 4C0 1.7998 1.7998 0 4 0L92.8911 0C95.0913 0 97.5283 1.68359 98.3076 3.74072L110.999 37.2583Z</s:data>
            <s:fill>
                <s:LinearGradient rotation="90">
                    <s:GradientEntry id="color1" color.selectedStates="#FFC700" color.over="#FFD43B" color.down="#FFD43B" color.up="#F2F2F2" ratio="0.5" />
                    <s:GradientEntry id="color2" color.selectedStates="#FF9D00" color.over="#FFE382" color.down="#FFE382" color.up="#E6E6E6" />
                </s:LinearGradient>
            </s:fill>
        </s:Path>
        <s:Label id="labelDisplay"
                 horizontalCenter="-6" verticalCenter="2" paddingRight="10" paddingLeft="10" fontWeight="bold" fontSize="13">
        </s:Label>
    </s:Group>

</s:SparkButtonSkin>
