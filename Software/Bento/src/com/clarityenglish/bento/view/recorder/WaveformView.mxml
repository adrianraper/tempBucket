<?xml version="1.0" encoding="utf-8"?>
<bento:BentoView xmlns:fx="http://ns.adobe.com/mxml/2009"
			  	 xmlns:s="library://ns.adobe.com/flex/spark"
			  	 xmlns:mx="library://ns.adobe.com/flex/mx"
			 	 xmlns:ui="com.clarityenglish.bento.view.recorder.ui.*"
			 	 xmlns:bento="com.clarityenglish.bento.view.base.*"
			 	 creationComplete="creationComplete()">
		 
	<fx:Script>
		<![CDATA[
			import com.clarityenglish.bento.model.adaptor.IRecorderAdaptor;
			import com.clarityenglish.bento.view.recorder.events.RecorderEvent;
			import com.clarityenglish.bento.view.recorder.events.WaveformEvent;
			import com.clarityenglish.bento.view.recorder.events.WaveformRangeEvent;
			import com.clarityenglish.bento.view.recorder.ui.LevelMeter;
			import com.clarityenglish.bento.view.recorder.ui.WaveformRenderer;
			
			import spark.components.Button;
			import spark.components.HSlider;
			import spark.components.RichText;
			import spark.components.VSlider;
			
			private static const SECONDS_TO_SHOW:Number = 5;
			
			private var _isRecordEnabled:Boolean;
			
			private var _isMinimized:Boolean;
			
			private var _dragMode:String;
			
			[Bindable]
			public var samples:ByteArray;
			
			[Bindable]
			public var sampleRate:Number;
			
			[Bindable]
			public var isRecording:Boolean;
			
			[SkinPart]		
			public var recordButton:Button;
			
			[SkinPart]
			public var playButton:Button;
			
			[SkinPart]
			public var pauseButton:Button;
			
			[SkinPart]
			public var stopButton:Button;
			
			[SkinPart]
			public var saveButton:Button;
			
			[SkinPart]
			public var openButton:Button;
			
			[SkinPart]
			public var newButton:Button;
			
			[SkinPart]
			public var compareButton:Button;
			
			[SkinPart]
			public var minButton:Button;
			
			[SkinPart]
			public var maxButton:Button;
			
			[SkinPart]
			public var helpButton:Button;
			
			[Bindable]
			[SkinPart]
			public var gainSlider:VSlider;
			
			[Bindable]
			[SkinPart]
			public var scrubSlider:HSlider;
			
			[SkinPart]
			public var levelMeter:LevelMeter;
			
			[SkinPart]
			public var richText:RichText;
			
			[Bindable]
			public var mp3FileSizeText:String = "-";
			
			[Bindable]
			public var durationText:String = "-";
			
			// v4.0.1.1 Small step to help trouble shoot
			public var microphoneName:String;
			public var audioStatus:String;
			
			private var showAllContextMenuItem:ContextMenuItem;
			private var resetViewContextMenuItem:ContextMenuItem;
			private var cutContextMenuItem:ContextMenuItem;
			
			[Bindable]
			public function set isRecordEnabled(value:Boolean):void {
				_isRecordEnabled = value;
				invalidateSkinState();
			}
			
			public function get isRecordEnabled():Boolean { return _isRecordEnabled; }
			
			[Bindable]
			public function set isMinimized(value:Boolean):void {
				_isMinimized = value;
				invalidateSkinState();
			}
			
			public function get isMinimized():Boolean { return _isMinimized; }
			
			[Bindable]
			public function set dragMode(value:String):void {
				_dragMode = value;
				
				if (cutContextMenuItem) cutContextMenuItem.visible = !value;
			}
			
			public function get dragMode():String { return _dragMode; }
			
			/**
			 * This resets the wave renderer to go back to the beginning and show the set amount of seconds.  Called on startup and when the user clicks NEW.
			 */
			public function reset():void {
				waveformRenderer.leftSample = 0;
				waveformRenderer.clearSelection();
				waveformRenderer.followMode = true;
				waveformRenderer.showSamples = SECONDS_TO_SHOW * sampleRate;
				
				waveformRenderer.invalidateDisplayList();
			}
			
			private function creationComplete():void {
				// Get the adaptor interface so we can use the same methods in the AIR and web versions
				/*var recorderAdaptor:IRecorderAdaptor = parentApplication.recorderAdaptor as IRecorderAdaptor;
				
				showAllContextMenuItem = new ContextMenuItem("Show full waveform");
				resetViewContextMenuItem = new ContextMenuItem("Reset view");
				cutContextMenuItem = new ContextMenuItem("Cut selected area", true, false, dragMode == WaveformRenderer.SELECT);
				
				showAllContextMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onMenuItemSelect);
				resetViewContextMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onMenuItemSelect);
				cutContextMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onMenuItemSelect);
				
				var menuItems:Array = [ showAllContextMenuItem, resetViewContextMenuItem, cutContextMenuItem ];
				
				contextMenu = new ContextMenu();
				recorderAdaptor.setContextMenuItems(contextMenu, menuItems);*/
				
				// v4.0.1.1 Small step to help trouble shoot
				if (isRecordEnabled)
					recordButton.toolTip = "Record from " + microphoneName;
				//levelMeter.toolTip = audioStatus;
			}
			
			private function onMenuItemSelect(e:ContextMenuEvent):void {
				switch (e.target) {
					case showAllContextMenuItem:
						waveformRenderer.showAll();
						// There seems to be a Flex 4 bug where the context menu is left behind (only in web mode) so might need to do some kind of redraw here
						break;
					case resetViewContextMenuItem:
						reset();
						
						waveformRenderer.invalidateDisplayList();
						break;
					case cutContextMenuItem:
						dispatchEvent(new WaveformRangeEvent(WaveformRangeEvent.CUT, waveformRenderer.leftSelection, waveformRenderer.rightSelection));
						waveformRenderer.clearSelection();
						break;
				}
			}
			
			override protected function partAdded(partName:String, instance:Object):void {
				switch (instance) {
					case recordButton:
						recordButton.addEventListener(MouseEvent.CLICK, function():void { dispatchEvent(new WaveformEvent(WaveformEvent.RECORD)); } );
						break;
					case playButton:
						playButton.addEventListener(MouseEvent.CLICK, function():void { dispatchEvent(new WaveformEvent(WaveformEvent.PLAY)); } );
						break;
					case pauseButton:
						pauseButton.addEventListener(MouseEvent.CLICK, function():void { dispatchEvent(new WaveformEvent(WaveformEvent.PAUSE)); } );
						break;
					case stopButton:
						stopButton.addEventListener(MouseEvent.CLICK, function():void { dispatchEvent(new WaveformEvent(WaveformEvent.STOP)); } );
						break;
					case saveButton:
						saveButton.addEventListener(MouseEvent.CLICK, function():void { dispatchEvent(new WaveformEvent(WaveformEvent.SAVE_MP3)); } );
						break;
					case openButton:
						openButton.addEventListener(MouseEvent.CLICK, function():void { dispatchEvent(new WaveformEvent(WaveformEvent.LOAD_MP3)); } );
						break;
					case newButton:
						newButton.addEventListener(MouseEvent.CLICK, function():void { dispatchEvent(new WaveformEvent(WaveformEvent.NEW_WAVE)); } );
						break;
					case compareButton:
						compareButton.addEventListener(MouseEvent.CLICK, function():void { dispatchEvent(new WaveformEvent(WaveformEvent.COMPARE)); } );
						break;
					/*case minButton:
						minButton.addEventListener(MouseEvent.CLICK, function():void { dispatchEvent(new WaveformEvent(WaveformEvent.STOP)); 
																					   dispatchEvent(new RecorderEvent(RecorderEvent.CHANGE_STATE, "record", true));
																					   dispatchEvent(new AIRWindowEvent(AIRWindowEvent.RELEASE_ALWAYS_IN_FRONT, true)); } );
						break;*/
					case minButton:
						minButton.addEventListener(MouseEvent.CLICK, function():void { isMinimized = true; } );
						break;
					case maxButton:
						maxButton.addEventListener(MouseEvent.CLICK, function():void { isMinimized = false; } );
						break
					case helpButton:
						helpButton.addEventListener(MouseEvent.CLICK, function():void { dispatchEvent(new RecorderEvent(RecorderEvent.HELP, "help", true)); } );
						break;
					case richText:
						richText.textFlow = textFlow;
						break;
				}
			}
			
			private function onWaveformSelect(e:WaveformRangeEvent):void {
				cutContextMenuItem.enabled = e.left < e.right;
			}
			
			override protected function getCurrentSkinState():String {
				return ((isRecordEnabled) ? "record" : "playback") + "_" + ((_isMinimized) ? "minimized" : "full");
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- <s:RadioButtonGroup id="dragModeGroup" /> -->
		<s:TextFlow id="textFlow">
			<s:p><s:span>{(isRecordEnabled) ? mp3FileSizeText : ""}</s:span></s:p><s:p><s:span>{durationText}</s:span></s:p>
		</s:TextFlow>
	</fx:Declarations>
	
	<!-- This with the scrub bar	
	<ui:WaveformRenderer id="waveformRenderer" data="{samples}" playbackGain="{gainSlider.value}" scrubValue="{scrubSlider.value}" width="100%" height="100%" sampleRate="{sampleRate}" dragMode="{dragMode}" select="onWaveformSelect(event)" showSamples="{SECONDS_TO_SHOW * sampleRate}" />
	 -->
	<!-- This without the scrub bar	 -->
	<ui:WaveformRenderer id="waveformRenderer" data="{samples}" playbackGain="{gainSlider.value}" scrubValue="{scrubSlider.value}" width="100%" height="100%" sampleRate="{sampleRate}" dragMode="{dragMode}" select="onWaveformSelect(event)" showSamples="{SECONDS_TO_SHOW * sampleRate}" />
	<!-- This with the scrub bar	 -->
	
</bento:BentoView>