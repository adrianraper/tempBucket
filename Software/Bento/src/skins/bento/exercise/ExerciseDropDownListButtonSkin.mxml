<?xml version="1.0" encoding="utf-8"?>

<!--

	ADOBE SYSTEMS INCORPORATED
	Copyright 2010 Adobe Systems Incorporated
	All Rights Reserved.

	NOTICE: Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the anchor button on a Spark DropDownList component.

	  @see spark.components.DropDownList
	  @see spark.skins.spark.DropDownListSkin

	  @langversion 3.0
	  @playerversion Flash 10
	  @playerversion AIR 1.5
	  @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:fb="http://ns.adobe.com/flashbuilder/2009">

	<fx:Metadata>
		<![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
    ]]>
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.utils.ObjectUtil;
			/* Define the skin elements that should not be colorized.
			   For dropDownList buttons, the graphics are colorized but the arrow is not. */
			static private const exclusions:Array = ["arrow"];
			
			private var cornerRadius:Number = 2;
			
			/**
			 * @private
			 */
			override public function get colorizeExclusions():Array {
				return exclusions;
			}
			
			/* Define the symbol fill items that should be colored by the "symbolColor" style. */
			static private const symbols:Array = [];
			
			/**
			 * @private
			 */
			override public function get symbolItems():Array {
				return symbols
			};
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void {
				useChromeColor = true;
				super.initializationComplete();
				
				hostComponent.addEventListener("contentChange", onContentChange, false, 0, true);
			}
			
			/**
			 *  @private
			 */
            /*
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				var cr:Number = getStyle("cornerRadius");
				
				if (cornerRadius != cr) {
					cornerRadius = cr;
					fill.radiusX = cornerRadius;
					lowlight.radiusX = cornerRadius;
					highlight.radiusX = cornerRadius;
					border.radiusX = cornerRadius;
				}
				
				if (highlightStroke)
					highlightStroke.radiusX = cornerRadius;
				if (hldownstroke1)
					hldownstroke1.radiusX = cornerRadius;
				if (hldownstroke2)
					hldownstroke2.radiusX = cornerRadius;
				
				arrowGroup.left = hostComponent.content ? 10 : (unscaledWidth - 11) / 2;
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			*/
			protected function onContentChange(event:Event):void {
				//arrowGroup.horizontalCenter = hostComponent.content ? null : 0;
				invalidateDisplayList();
			}
		]]>
	</fx:Script>

	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>

	<!-- Fill, this is needed so that mouse click anywhere activates the dropdown -->
	<s:Rect id="fill" left="0" right="0" top="1" bottom="0">
		<s:fill>
            <s:SolidColor color="#ffffff" />
		</s:fill>
	</s:Rect>

	<!-- layer 3: fill lowlight -->
	<!---
	<s:Rect id="lowlight" left="1" right="1" top="1" bottom="1" radiusX="4">
		<s:fill>
			<s:LinearGradient rotation="270">
				<s:GradientEntry color="0xC9C9C9" ratio="0.0" alpha="0.0627" />
				<s:GradientEntry color="0xC9C9C9" ratio="0.48" alpha="0.0099" />
				<s:GradientEntry color="0xC9C9C9" ratio="0.48001" alpha="0" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
     @private -->
	<!-- layer 4: fill highlight -->
	<!---
	<s:Rect id="highlight" left="1" right="1" top="1" bottom="1" radiusX="4">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFFFF" ratio="0.0" alpha="0.33" alpha.over="0.22" alpha.down="0.12" />
				<s:GradientEntry color="0xFFFFFF" ratio="0.48" alpha="0.33" alpha.over="0.22" alpha.down="0.12" />
				<s:GradientEntry color="0xFFFFFF" ratio="0.48001" alpha="0" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
     @private -->
	<!-- layer 5: highlight stroke (all states except down) -->
	<!---
	<s:Rect id="highlightStroke" left="1" right="1" top="1" bottom="1" excludeFrom="down" radiusX="4">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0xFFFFFF" alpha.over="0.22" />
				<s:GradientEntry color="0xD8D8D8" alpha.over="0.22" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
     @private -->
	<!-- layer 6: highlight stroke (down state only) -->
	<!---
	<s:Rect id="hldownstroke1" left="1" right="1" top="1" bottom="1" radiusX="4" includeIn="down">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x000000" alpha="0.25" ratio="0.0" />
				<s:GradientEntry color="0x000000" alpha="0.25" ratio="0.001" />
				<s:GradientEntry color="0x000000" alpha="0.07" ratio="0.0011" />
				<s:GradientEntry color="0x000000" alpha="0.07" ratio="0.965" />
				<s:GradientEntry color="0x000000" alpha="0.00" ratio="0.9651" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
     @private -->
	<!---
	<s:Rect id="hldownstroke2" left="2" right="2" top="2" bottom="2" radiusX="4" includeIn="down">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x000000" alpha="0.09" ratio="0.0" />
				<s:GradientEntry color="0x000000" alpha="0.00" ratio="0.0001" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
     @private -->
	<!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<!---
	<s:Rect id="border" left="0" right="0" top="0" bottom="0" radiusX="4">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0xFF0000" alpha.down="0.6375" />
				<s:GradientEntry color="0x999999" alpha.down="0.85" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
     @private -->

    <!-- gh#996 This blob colour should be picked up from program.css -->
    <s:Group verticalCenter="1" right="4" visible="{!hostComponent.content}">
        <s:Path x="0" y="0" data="M 0 0 L 8 0 L 4 6.928 L 0 0Z">
            <s:stroke>
                <s:SolidColorStroke color="0x0A789D"/>
            </s:stroke>
            <s:fill>
                <s:SolidColor color="0x0A789D" />
            </s:fill>
        </s:Path>
    </s:Group>

    <!-- underline (for text input - determined by whether or not the component is editable) gh#60 -->
    <!-- gh#472 {hostComponent.editable} -->
    <s:Line left="0" right="0" bottom="1" visible="true">
        <s:stroke>
            <s:SolidColorStroke color="#6A6A6A" weight="1" alpha="0.8" />
        </s:stroke>
    </s:Line>
</s:SparkSkin>
