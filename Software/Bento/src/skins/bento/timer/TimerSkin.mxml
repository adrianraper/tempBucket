<?xml version="1.0"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:assets="skins.assets.*" xmlns:tlfcomponents="com.clarityenglish.textLayout.components.*">

    <fx:Metadata>
        [HostComponent("com.clarityenglish.bento.view.timer.TimerComponent")]
    </fx:Metadata>

    <fx:Declarations>
        <s:DropShadowFilter id="dropShadowFilter" color="#B2B2B2" blurX="3" blurY="3" alpha="0.4" distance="0" angle="90" knockout="false" inner="true"/>
    </fx:Declarations>

    <fx:Style>
        .dataTipStyle {
            fontFamily: HelveticaNoCFF;
        }
    </fx:Style>

    <fx:Script>
        <![CDATA[
        import mx.events.FlexEvent;
        import mx.events.SliderEvent;

        protected function timeConvert(value:Number):String {
            var hours:Number = Math.floor(value / 60);
            var mins:Number = value % 60;

            return String("0" + hours).substr(-2) + ":" + String("0" + mins).substr(-2);
        }

        protected function onSliderChange(event:SliderEvent):void {
            midTipLabel.left = (hostComponent.sliderWidth * (timerSlider.values[0] / timerSlider.maximum) < hostComponent.sliderWidth * 0.15)? hostComponent.sliderWidth * 0.15 : hostComponent.sliderWidth * (timerSlider.values[0] / timerSlider.maximum);

            var lastTipDist:Number = hostComponent.sliderWidth * (timerSlider.values[1] / timerSlider.maximum);
            if (lastTipDist < hostComponent.sliderWidth - 100) {
                lastTipLabel.left = lastTipDist < (midTipLabel.left + hostComponent.sliderWidth * 0.13)? (midTipLabel.left + hostComponent.sliderWidth * 0.13) : lastTipDist;
            } else {
                 lastTipLabel.left = hostComponent.sliderWidth - 100;
            }
        }

        private function getDataTip(value:String):String {
            if (timerSlider.getFocus() == timerSlider.getThumbAt(0)) {
                // return the duration of second session.
                return hostComponent.timerSectionLabels[1] + ' ' + timeConvert(timerSlider.values[1] - Number(value));
            } else {
                // return the duration of the thirs session.
                return hostComponent.timerSectionLabels[2] + ' ' + timeConvert(timerSlider.maximum - Number(value));
            }
        }
        ]]>
    </fx:Script>

    <!-- states -->
    <s:states>
        <s:State name="disabled" />
        <s:State name="normal" />

        <s:State name="startState" />
        <s:State name="pauseState" />
        <s:State name="resumeState" />
        <s:State name="completeState" />
    </s:states>

    <!--Timer-->
    <s:Group left="0" right="0" height="100%" top="0" filters="{[dropShadowFilter]}">
        <s:Rect width="100%" height="100%">
            <s:fill>
                <s:SolidColor color="#FFFFFF" />
            </s:fill>
        </s:Rect>
        <s:HGroup percentWidth="{hostComponent.isTimerAutoControl? 100 : 87}" height="100%" gap="0" horizontalAlign="center" verticalAlign="middle">
            <s:Group id="timerSessionGroup" width="82%" height="100%">
                <!--Fake HSlider-->
                <s:Group width="{hostComponent.timerWidth}" height="{hostComponent.timerHeight}" verticalCenter="10" horizontalCenter="0" excludeFrom="startState">
                    <s:Rect width="100%" height="100%" radiusX="6" radiusY="6">
                        <s:fill>
                            <s:SolidColor color="#DDDDDC" />
                        </s:fill>
                    </s:Rect>
                    <s:Rect width="98.5%" height="70%" verticalCenter="0" horizontalCenter="0" radiusX="6" radiusY="6">
                        <s:fill>
                            <s:SolidColor color="#FFFFFF" />
                        </s:fill>
                    </s:Rect>
                    <s:HGroup width="{hostComponent.sliderWidth}" height="{hostComponent.sliderHeight}" verticalCenter="0" horizontalCenter="0" gap="0">
                        <s:Rect id="planningBar" height="100%" percentWidth="{hostComponent.firstRectPercentWidth}" topLeftRadiusX="4" topLeftRadiusY="4" bottomLeftRadiusX="4" bottomLeftRadiusY="4">
                            <s:fill>
                                <s:SolidColor color="{hostComponent.trackColor}" />
                            </s:fill>
                        </s:Rect>
                        <s:Rect id="writingBar" height="100%" percentWidth="{hostComponent.midRectPercentWidth}"
                                topLeftRadiusY="{hostComponent.secondLeftRadius}" topLeftRadiusX="{hostComponent.secondLeftRadius}" bottomLeftRadiusX="{hostComponent.secondLeftRadius}" bottomLeftRadiusY="{hostComponent.secondLeftRadius}"
                                topRightRadiusY="{hostComponent.secondRightRadius}" topRightRadiusX="{hostComponent.secondRightRadius}" bottomRightRadiusX="{hostComponent.secondRightRadius}" bottomRightRadiusY="{hostComponent.secondRightRadius}">
                            <s:fill>
                                <s:SolidColor color="{hostComponent.trackHighLightColor}" />
                            </s:fill>
                        </s:Rect>
                        <s:Rect id="proofreadingBar" height="100%" percentWidth="{hostComponent.lastRectPercentWidth}" topRightRadiusX="4" topRightRadiusY="4" bottomRightRadiusX="4" bottomRightRadiusY="4">
                            <s:fill>
                                <s:SolidColor color="{hostComponent.trackColor}"/>
                            </s:fill>
                        </s:Rect>
                    </s:HGroup>
                </s:Group>
                <!--Real HSlider-->
                <s:Group width="{hostComponent.timerWidth}" height="{hostComponent.timerHeight}" verticalCenter="10" horizontalCenter="0" includeIn="startState">
                    <s:Rect width="100%" height="100%" radiusX="5" radiusY="5">
                        <s:fill>
                            <s:SolidColor color="#222222" />
                        </s:fill>
                    </s:Rect>
                    <assets:sideindicator left="10" verticalCenter="0" visible="{!hostComponent.isTimeFixed}" />
                    <assets:sideindicator right="10" verticalCenter="0" visible="{!hostComponent.isTimeFixed}" />
                    <mx:HSlider id="timerSlider" width="{hostComponent.timerWidth + 10}" height="{hostComponent.timerHeight}" verticalCenter="0" horizontalCenter="0" thumbCount="2" snapInterval="1" minimum="0" showDataTip="false" liveDragging="true" change="onSliderChange(event)" dataTipStyleName="dataTipStyle"
                                trackSkin="skins.bento.timer.HSliderTrackSkin"
                                trackHighlightSkin="skins.bento.timer.HSliderTrackHighlightSkin" showTrackHighlight="true"
                                thumbSkin="skins.bento.timer.HSliderThumbSkin" enabled="{!hostComponent.isTimeFixed}"
                                visible="{hostComponent.timerTotalTime.length > 1}"/>
                    <s:Rect left="10" right="10" height="{hostComponent.sliderHeight}" verticalCenter="0" horizontalCenter="0" radiusX="4" radiusY="4" visible="{hostComponent.timerTotalTime.length == 1}">
                        <s:fill>
                            <s:SolidColor color="{hostComponent.trackColor}" />
                        </s:fill>
                    </s:Rect>
                </s:Group>
                <!--Data Tip-->
                <s:Group id="tipLabelGroup" width="{hostComponent.sliderWidth}" horizontalCenter="0" verticalCenter="{hostComponent.sliderHeight * -1}">
                    <s:Label id="firstTipLabel" color="#333333" text="{hostComponent.timerSectionLabels[0] + ' ' + timeConvert(timerSlider.values[0])}" fontSize="{hostComponent.textSize - 7}" visible="{hostComponent.timerTotalTime.length > 1}" />
                    <s:Label id="midTipLabel" color="#333333" text="{hostComponent.timerSectionLabels[1] + ' ' + timeConvert(timerSlider.values[1] - timerSlider.values[0])}" fontSize="{hostComponent.textSize - 7}"  visible="{hostComponent.timerTotalTime.length > 1}" />
                    <s:Label id="lastTipLabel" color="#333333" text="{hostComponent.timerSectionLabels[2] + ' ' + timeConvert(timerSlider.maximum - timerSlider.values[1])}" fontSize="{hostComponent.textSize - 7}"  visible="{hostComponent.timerTotalTime.length > 2}" />
                </s:Group>
                <!--Progress Bar-->
                <s:Group id="progressBarGroup" width="{hostComponent.sliderWidth}" height="{hostComponent.sliderHeight}" horizontalCenter="0" verticalCenter="10" excludeFrom="startState">
                    <s:Rect id="progressBar" height="{hostComponent.sliderHeight * 0.4}" width="100%" horizontalCenter="0" verticalCenter="0">
                        <s:fill>
                            <s:LinearGradient>
                                <s:GradientEntry color="{hostComponent.progressLeftColor}" />
                                <s:GradientEntry color="{hostComponent.progressMidColor}" />
                                <s:GradientEntry color="{hostComponent.progressRightColor}" />
                            </s:LinearGradient>
                        </s:fill>
                    </s:Rect>
                    <!--Shrink the width of progress cover rect to show the red progress bar.-->
                    <s:HGroup width="100%" height="100%" gap="-1" horizontalAlign="right">
                        <s:Rect id="firstProgressCoverRect" height="100%" percentWidth="{hostComponent.firstRectPercentWidth}" topLeftRadiusX="4" topLeftRadiusY="4" bottomLeftRadiusY="4" bottomLeftRadiusX="4"
                                topRightRadiusY="{hostComponent.firstRightRadius}" topRightRadiusX="{hostComponent.firstRightRadius}" bottomRightRadiusX="{hostComponent.firstRightRadius}" bottomRightRadiusY="{hostComponent.firstRightRadius}">
                            <s:fill>
                                <s:SolidColor color="{hostComponent.trackColor}" />
                            </s:fill>
                        </s:Rect>
                        <s:Rect id="midProgressCoverRect" height="100%" percentWidth="{hostComponent.midRectPercentWidth}"
                                topLeftRadiusY="{hostComponent.secondLeftRadius}" topLeftRadiusX="{hostComponent.secondLeftRadius}" bottomLeftRadiusX="{hostComponent.secondLeftRadius}" bottomLeftRadiusY="{hostComponent.secondLeftRadius}"
                                topRightRadiusY="{hostComponent.secondRightRadius}" topRightRadiusX="{hostComponent.secondRightRadius}" bottomRightRadiusX="{hostComponent.secondRightRadius}" bottomRightRadiusY="{hostComponent.secondRightRadius}">
                            <s:fill>
                                <s:SolidColor color="{hostComponent.trackHighLightColor}" />
                            </s:fill>
                        </s:Rect>
                        <s:Rect id="lastProgressCoverRect" height="100%" percentWidth="{hostComponent.lastRectPercentWidth}" topRightRadiusX="4" topRightRadiusY="4" bottomRightRadiusY="4" bottomRightRadiusX="4">
                            <s:fill>
                                <s:SolidColor color="{hostComponent.trackColor}" />
                            </s:fill>
                        </s:Rect>
                    </s:HGroup>
                </s:Group>
            </s:Group>

            <s:Group width="18%" height="100%">
                <s:Group left="0" width="90%" height="100%">
                    <s:HGroup width="100%" height="100%" gap="{hostComponent.isTimeFixed? 3 : 6}" horizontalAlign="center" verticalAlign="middle" verticalCenter="{hostComponent.sliderHeight * -1}" includeIn="startState">
                        <s:Rect percentWidth="{hostComponent.isTimeFixed? 12 : 16}" height="1">
                            <s:fill>
                                <s:SolidColor color="#222222" />
                            </s:fill>
                        </s:Rect>
                        <s:Label text="Total time" fontSize="{hostComponent.textSize - 7}" />
                        <s:Rect percentWidth="{hostComponent.isTimeFixed? 12 : 16}" height="1">
                            <s:fill>
                                <s:SolidColor color="#222222" />
                            </s:fill>
                        </s:Rect>
                    </s:HGroup>
                    <s:Group width="100%" verticalCenter="10"  horizontalCenter="0" includeIn="startState">
                        <s:HGroup horizontalCenter="0" horizontalAlign="center" verticalAlign="middle" visible="{!hostComponent.isTimeFixed}" includeInLayout="{!hostComponent.isTimeFixed}">
                            <s:TextInput id="hoursTextInput" width="38" height="40" text="{hostComponent.hoursText}" textAlign="center" color="0xFFFFFF" fontSize="{hostComponent.textSize}" contentBackgroundColor="#0A789D" focusAlpha="0" softKeyboardType="number" restrict="0-9" />
                            <s:Label text=":" />
                            <s:TextInput id="minsTextInput" width="38" height="40" text="{hostComponent.minsText}" textAlign="center" color="0xFFFFFF" fontSize="{hostComponent.textSize}" contentBackgroundColor="#0A789D" focusAlpha="0" softKeyboardType="number" restrict="0-9" />
                            <s:Label text=":" />
                            <s:Label id="secondsTextLabel" text="00" width="28" height="40" verticalAlign="middle" color="0x333333" fontSize="{hostComponent.textSize}" />
                            <!--s:TextInput id="secondsTextInput" width="38" height="40" text="00" textAlign="center" color="0xFFFFFF" fontSize="20" contentBackgroundColor="#0A789D" focusAlpha="0" softKeyboardType="number" restrict="0-9" editable="false" /-->
                        </s:HGroup>
                        <s:Label id="staticTimeLabel" text="{hostComponent.totalTimeLabelText}" horizontalCenter="0" verticalCenter="0" color="#ED1F24" fontSize="{hostComponent.textSize}" visible="{hostComponent.isTimeFixed}" includeInLayout="{hostComponent.isTimeFixed}" />
                    </s:Group>

                    <s:Label id="totalTimeLabel" verticalCenter="10" horizontalCenter="0" color="#ED1F24" text="{hostComponent.totalTimeLabelText}" fontSize="{hostComponent.textSize}" excludeFrom="startState" />
                </s:Group>
            </s:Group>
        </s:HGroup>

        <s:Group width="13%" height="100%" right="0" visible="{!hostComponent.isTimerAutoControl}" includeInLayout="{!hostComponent.isTimerAutoControl}">
            <s:HGroup width="100%" height="100%" gap="0" verticalAlign="middle" includeIn="startState">
                <s:Button id="startButton" percentWidth="{hostComponent.isTimeFixed? 100 : 50}" height="100%" color="0x333333" fontSize="{hostComponent.textSize - 5}" buttonMode="true" useHandCursor="true" label="Start" enabled="true" />
                <s:Button id="resetButton" width="50%" height="100%" color="0x333333" fontSize="{hostComponent.textSize - 5}" buttonMode="true" useHandCursor="true" label="Reset" visible="{!hostComponent.isTimeFixed}" includeInLayout="{!hostComponent.isTimeFixed}" />
            </s:HGroup>
            <s:HGroup width="100%" height="100%" gap="0" verticalAlign="middle" includeIn="pauseState, resumeState">
                <s:Group width="50%" height="100%">
                    <s:Button id="pauseButton" width="100%" height="100%" color="0x333333" fontSize="{hostComponent.textSize - 5}" buttonMode="true" useHandCursor="true" label="Pause" includeIn="pauseState"/>
                    <s:Button id="resumeButton" width="100%" height="100%" color="0x333333" fontSize="{hostComponent.textSize - 5}" buttonMode="true" useHandCursor="true" label="Resume" includeIn="resumeState"/>
                </s:Group>
                <s:Button id="stopButton" width="50%" height="100%" color="0x333333" fontSize="{hostComponent.textSize - 5}" buttonMode="true" useHandCursor="true" label="Stop" includeIn="pauseState, resumeState"/>
            </s:HGroup>
        </s:Group>

        <s:Group width="17%" height="100%" right="0" includeIn="completeState">
            <s:Button id="resetCompleteButton" width="100%" height="100%" color="#333333" fontSize="{hostComponent.textSize - 5}" buttonMode="true" useHandCursor="true" label="Reset" />
        </s:Group>
    </s:Group>
    <!--tlfcomponents:AudioPlayer id="audioPlayer" visible="false" /-->
</s:Skin>
