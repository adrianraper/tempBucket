<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false" xmlns:layout="org.alivepdf.layout.*" xmlns:ui="com.clarityenglish.clearpronunciation.view.home.ui.*">
	
	<fx:Script>
		<![CDATA[
			import com.clarityenglish.clearpronunciation.view.home.event.ListItemSelectedEvent;
			import com.clarityenglish.common.model.interfaces.CopyProvider;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var leftIconString:String;
			
			[Bindable]
			private var rightIconString:String;
			
			[Bindable]
			private var listItemIndex:String;
			
			[Bindable]
			private var unitItemPieChartArrayCollection:ArrayCollection;
			
			[Bindable]
			private var exerciseXMLListCollection:XMLListCollection;
			
			private var _copyProvider:CopyProvider;
			private var _showPieChart:Boolean;
			
			[Bindable]
			public function get copyProvider():CopyProvider {
				return _copyProvider;
			}
			
			public function set copyProvider(value:CopyProvider):void {
				_copyProvider = value;
			}
			
			[Bindable]
			public function get showPieChart():Boolean {
				return _showPieChart;
			}
			
			public function set showPieChart(value:Boolean):void {
				_showPieChart = value;
			}
			
			public function getUnitIndex(unit:Object):Number {
				return unit.parent().unit.(@id == unit.@id).childIndex() + 1;
			}
			
			public override function set data(value:Object):void {
				super.data = value;
				
				if (data) {
					leftIconString = String(data.@caption).split(' ')[0];
					rightIconString = String(data.@caption).split(' ')[1];
					
					if (showPieChart) {
						pieChart.visible = data.@coverage == 0? false : true;
						unitItemPieChartArrayCollection = new ArrayCollection([{coverage: 100 - data.@coverage}, {coverage: data.@coverage}]);
						
						unitListBackgroundRect.width = 269;
						unitListBackgroundRect.left = 40;
					} else {
						// adjust position and size for the drop down list in course page
						unitListItemVGroup.width = 240;
						unitListBackgroundRect.width = 230;
						unitListBackgroundRect.left = 10;
						exerciseListVGroup.paddingLeft = 10;
						unitListButtonHGroup.left = 10;
						unitListButton.scaleX = unitListButton.scaleY = 0.9;
					}
					
					if (getUnitIndex(data) < 10) {
						listItemIndex = "0" + String(getUnitIndex(data));
					} else {
						listItemIndex = String(getUnitIndex(data));
					}
					
					exerciseXMLListCollection = new XMLListCollection();
					exerciseXMLListCollection.addItem(data.exercise.(@["class"] == "practiseSounds"));
					for each (var exerciseXML:XML in data.exercise.(@["class"] == "exercise").exercise) {
						exerciseXMLListCollection.addItem(exerciseXML);
					}
				}		
			}
			
			protected function onExerciseListClick(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				dispatchEvent(new ListItemSelectedEvent(ListItemSelectedEvent.SELECTED, true, exerciseList.selectedItem));
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	
	<!--Background rectangle-->
	<s:Rect id="unitListBackgroundRect" height.selected="200" radiusX="10" radiusY="10">
		<s:fill>
			<s:SolidColor color="#FFEFD2" alpha="0" alpha.selected="0.6" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="#FFBF4A" weight="1" alpha="0" alpha.selected="1" />
		</s:stroke>
	</s:Rect>
	
	<s:VGroup id="unitListItemVGroup" height="100%" width="310" gap="0">
		<s:Group id="unitHGroup" left="0" top="0" width="100%" height="50">
			<s:HGroup id="unitListButtonHGroup" width="100%" height="50">
				<mx:PieChart id="pieChart" dataProvider="{unitItemPieChartArrayCollection}" width="45" height="45" left="0" visible="{showPieChart}" includeInLayout="{showPieChart}">
					<mx:series>
						<mx:PieSeries field="coverage" labelPosition="none" filters="{[]}">
							<mx:fills>
								<s:SolidColor color="#FFFFFF" />
								<s:SolidColor color="#005D5F" />
							</mx:fills>
						</mx:PieSeries>
					</mx:series>
				</mx:PieChart>
				<ui:UnitListButton id="unitListButton" width="100%" height="100%" itemIndex="{listItemIndex}" caption="{data.@caption}" leftIconString="{data.@leftIcon}" rightIconString="{data.@rightIcon}" copyProvider="{copyProvider}" />
			</s:HGroup>
		</s:Group>
		
		<s:VGroup id="exerciseListVGroup" paddingLeft="40" width="100%">
			<s:Group left="0" height="0" height.hovered="150" height.selected="150" width="100%">
				<s:List id="exerciseList" left="0" width="100%" height="95%" dataProvider="{exerciseXMLListCollection}" includeIn="selected" includeInLayout="{currentState == 'selected'}" fontSize="13" contentBackgroundAlpha="0" click="onExerciseListClick(event)">
					<s:layout>
						<s:VerticalLayout />
					</s:layout>
					<s:itemRenderer>
						<fx:Component>
							<s:ItemRenderer width="100%" height="100%" autoDrawBackground="false">
								<fx:Script>
									<![CDATA[
										public override function set data(value:Object):void {
											super.data = value;
											
											if (outerDocument.showPieChart) {
												exerciseListButton.setStyle("fontSize", 13);
											} else {
												exerciseListButton.setStyle("fontSize", 11);
												exerciseListButton.width = 240;
											}
												
										}
									]]>
								</fx:Script>
								<s:states>
									<s:State name="normal" />
									<s:State name="hovered" />
									<s:State name="selected" />
								</s:states>
								
								<s:Button id="exerciseListButton" width="100%" height="23" label="{data.@caption}" skinClass="skins.clearpronunciation.home.ui.ExerciseListButtonSkin" />	
							</s:ItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:List>
			</s:Group>	
		</s:VGroup>
	</s:VGroup>
	
</s:ItemRenderer>
