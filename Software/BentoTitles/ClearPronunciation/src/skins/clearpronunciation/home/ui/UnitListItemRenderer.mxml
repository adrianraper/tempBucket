<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false" xmlns:layout="org.alivepdf.layout.*" xmlns:ui="com.clarityenglish.clearpronunciation.view.home.ui.*" creationComplete="onCreationComplete(event)">
	
	<fx:Script>
		<![CDATA[
			import com.clarityenglish.clearpronunciation.view.home.event.ListItemSelectedEvent;
			import com.clarityenglish.clearpronunciation.view.home.ui.ExerciseListRenderer;
			import com.clarityenglish.common.model.interfaces.CopyProvider;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.StateChangeEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var listItemIndex:String;
			
			[Bindable]
			private var unitItemPieChartArrayCollection:ArrayCollection;
			
			[Bindable]
			private var exerciseXMLListCollection:XMLListCollection;
			
			[Bindable]
			private var exerciseListRenderer:ClassFactory;
			
			public static var exerciseSelectedIndex:Number;
			public static var selectedUnitCaption:String;
			
			private var _copyProvider:CopyProvider;
			private var _showPieChart:Boolean;
			private var _isPlatformTablet:Boolean;
			
			[Bindable]
			public function get copyProvider():CopyProvider {
				return _copyProvider;
			}
			
			public function set copyProvider(value:CopyProvider):void {
				_copyProvider = value;
			}
			
			[Bindable]
			public function get showPieChart():Boolean {
				return _showPieChart;
			}
			
			public function set showPieChart(value:Boolean):void {
				_showPieChart = value;
			}
			
			[Bindable]
			public function get isPlatformTablet():Boolean {
				return _isPlatformTablet;
			}
			
			public function set isPlatformTablet(value:Boolean):void {
				_isPlatformTablet = value;
			}
			
			public function getUnitIndex(unit:Object):Number {
				return unit.parent().unit.(@id == unit.@id).childIndex() + 1;
			}
			
			override public function set data(value:Object):void {
				super.data = value;
				
				if (value == null)
					return;
				
				if (showPieChart) {
					pieChart.visible = data.@coverage == 0? false : true;
					unitItemPieChartArrayCollection = new ArrayCollection([{coverage: 100 - data.@coverage}, {coverage: data.@coverage}]);
					
					unitListBackgroundRect.width = 269;
					unitListBackgroundRect.left = 40;
				} else {
					// adjust position and size for the drop down list in course page
					unitListBackgroundRect.left = 10;
					unitListButtonHGroup.left = 10;
					exerciseListVGroup.paddingLeft = 10;
					exerciseListVGroup.width = 240;
					if (isPlatformTablet) {
						unitListItemVGroup.width = 240;
						unitListBackgroundRect.width = 230;
						unitListButton.scaleX = unitListButton.scaleY = 0.9;
					} else {
						unitListItemVGroup.width = 230;
						unitListBackgroundRect.width = 220;
						unitListButton.scaleX = unitListButton.scaleY = 0.85;
					}
				}
				
				if (data.hasOwnProperty("@leftIcon")) {
					unitListButton.leftItemButtonLabel = (data.@caption ).split(" ")[0];
					unitListButton.rightItemButtonLabel = (data.@caption).split(" ")[1];
					
					unitListButton.visible = true;
					unitListLabel.visible = false;	
				} else {
					unitListButton.visible = false;
					unitListLabel.visible = true;
				}
				
				
				if (getUnitIndex(data) < 10) {
					listItemIndex = "0" + String(getUnitIndex(data));
				} else {
					listItemIndex = String(getUnitIndex(data));
				}
				
				exerciseXMLListCollection = new XMLListCollection();
				if (data.exercise.(@["class"] == "practiseSounds").toXMLString() != "") {
					exerciseXMLListCollection.addItem(data.exercise.(@["class"] == "practiseSounds"));
				}
				for each (var exerciseXML:XML in data.exercise.(@["class"] == "exercise").exercise) {
					exerciseXMLListCollection.addItem(exerciseXML);
				}
				exerciseListRenderer = new ClassFactory(ExerciseListRenderer);
				exerciseListRenderer.properties = {showPieChart: showPieChart};
				// alice: data will be reset when you srcoll or come back from course page to home page, so you will lose the selected exercise 
				if (exerciseList && selectedUnitCaption == data.@caption) {
					exerciseList.selectedIndex = exerciseSelectedIndex;
				}
			}
			
			protected function onExerciseListClick(event:MouseEvent):void {
				// record the selected exercise in a static variable
				selectedUnitCaption = unitListLabel.text;
				exerciseSelectedIndex = exerciseList.selectedIndex;
				dispatchEvent(new ListItemSelectedEvent(ListItemSelectedEvent.SELECTED, true, exerciseList.selectedItem));
			}
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				if (exerciseList) {
					exerciseList.selectedIndex = exerciseSelectedIndex;
					exerciseList.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE));
				}
			}
			
			protected function onUnitListVGroupClick(event:MouseEvent):void
			{
				// alice: in course page unit list, when you select another unit and reopen the last selected unit, the last selected exercise will disappear
				// so here we use static variable to reset the selected exercise
				if (unitListLabel.text == selectedUnitCaption) {
					exerciseList.selectedIndex = exerciseSelectedIndex;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	
	<!--Background rectangle-->
	<s:Rect id="unitListBackgroundRect" height.selected="200" radiusX="10" radiusY="10">
		<s:fill>
			<s:SolidColor color="#FFEFD2" alpha="0" alpha.selected="0.6" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="#FFBF4A" weight="1" alpha="0" alpha.selected="1" />
		</s:stroke>
	</s:Rect>
	
	<s:VGroup id="unitListItemVGroup" left="0" height="100%" width="310" gap="0" click="onUnitListVGroupClick(event)">
		<s:Group id="unitHGroup" left="0" top="0" width="100%" height="50">
			<s:HGroup id="unitListButtonHGroup" left="0" width="100%" height="50" gap="-1">
				<mx:PieChart id="pieChart" dataProvider="{unitItemPieChartArrayCollection}" width="45" height="45" left="0" visible="{showPieChart}" includeInLayout="{showPieChart}">
					<mx:series>
						<mx:PieSeries field="coverage" labelPosition="none" filters="{[]}">
							<mx:fills>
								<s:SolidColor color="#FFFFFF" />
								<s:SolidColor color="#005D5F" />
							</mx:fills>
						</mx:PieSeries>
					</mx:series>
				</mx:PieChart>
				<s:Group width="100%" height="100%">
					<ui:UnitListButton id="unitListButton" width="100%" height="100%" itemIndex="{listItemIndex}" caption="{data.@caption}" copyProvider="{copyProvider}" leftIconString="{data.@leftIcon}" rightIconString="{data.@rightIcon}" />
					<s:Label id="unitListLabel" verticalCenter="0" horizontalCenter="0" text="{data.@caption}" visible="false" />
				</s:Group>		
			</s:HGroup>
		</s:Group>
		
		<s:VGroup id="exerciseListVGroup" paddingLeft="40" width="100%">
			<s:Group left="0" height="0" height.selected="160" width="100%" includeIn="selected">
				<s:List id="exerciseList" left="0" width="100%" height="95%" dataProvider="{exerciseXMLListCollection}" labelField="@caption" includeInLayout="{currentState == 'selected'}" fontSize="13" borderVisible="false" contentBackgroundAlpha="0" 
						click="onExerciseListClick(event)" itemRenderer="{exerciseListRenderer}" >
					<s:layout>
						<s:VerticalLayout />
					</s:layout>
				</s:List>
			</s:Group>	
		</s:VGroup>
	</s:VGroup>
	
</s:ItemRenderer>
