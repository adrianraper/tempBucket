<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the first button in a Spark ButtonBar component.  

@see spark.components.ButtonBar
@see spark.components.ButtonBarButton

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   minWidth="44" minHeight="44" 
				   alpha.disabled="0.5">
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("com.clarityenglish.ielts.view.zone.ui.ChannelListRenderer")]
		]]>
	</fx:Metadata>
	
	<fx:Declarations>
		<s:DropShadowFilter id="dropShadowFilter" angle="0" distance="0.4" alpha="0.3" />
	</fx:Declarations>
	
	<fx:Script fb:purpose="styling">
		import com.clarityenglish.ielts.view.zone.ZoneView;
		
		/* Define the skin elements that should not be colorized. 
		For toggle button, the graphics are colorized but the label is not. */
		static private const exclusions:Array = ["labelDisplay"];
		
		/** 
		 * @private
		 */     
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>
	
	<s:Group left="0" right="0" top="0" bottom="0">
		<!-- layer 2: fill -->
		<!--- @private -->
		<s:Rect id="fill" left="0" right="0" top="0" bottom="0" topRightRadiusX="8" topRightRadiusY="8" bottomRightRadiusX="8" bottomRightRadiusY="8" filters="{dropShadowFilter}">
			<s:fill>
				<s:LinearGradient>
					<s:GradientEntry color="#3D3D3D"
									 color.selectedStates="{getStyle(ZoneView.horribleHackCourseClass + 'ColorDark')}"
									 color.over="#013F4F" 
									 color.down="{getStyle(ZoneView.horribleHackCourseClass + 'ColorDark')}"/>
					<s:GradientEntry color="#4D4D4E"
									 color.selectedStates="{getStyle(ZoneView.horribleHackCourseClass + 'Color')}"
									 color.over="#01BFEB"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
	</s:Group>
	
	<!-- layer 8: text -->
	<!---  @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Label id="labelDisplay"
			 textAlign="left"
			 verticalAlign="middle"
			 maxDisplayedLines="1"
			 horizontalCenter="0" verticalCenter="1"
			 left="10" right="10" top="2" bottom="2"
			 color="0xFFFFFF"
			 color.over="0xFFFFFF"
			 color.down="0xFFFFFF"
			 color.up="0xFFFFFF"
			 color.selectedUpStates="0xFFFFFF"
			 fontSize="13"
			 >
	</s:Label>
	
</s:SparkButtonSkin>