<?xml version="1.0" encoding="utf-8"?>
<util:TLF2Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:elements="com.clarityenglish.textLayout.elements.*"
			   xmlns:ui="com.clarityenglish.bento.view.exercise.ui.*"
			   xmlns:util="com.clarityenglish.textLayout.util.*"
			   xmlns:components="com.clarityenglish.textLayout.components.*"
			   xmlns:exercise="com.clarityenglish.bento.view.exercise.components.*"
			   xmlns:debugger="com.demonsters.debugger.*"
			   xmlns:sparkTree="com.sparkTree.*" 
			   creationComplete="creationComplete()">
	<fx:Metadata>
		[SWF(width=900, height=500)]
	</fx:Metadata>
	
	<fx:Declarations>
		<fx:XML id="nodes" source="exercises/menu.xml" />
	</fx:Declarations>
	
	<fx:Style source="bento.css" />
	
	<fx:Script>
		<![CDATA[
			import com.clarityenglish.bento.vo.content.Exercise;
			import com.clarityenglish.common.model.ConfigProxy;
			
			import mx.collections.IList;
			import mx.collections.XMLListCollection;
			import mx.logging.Log;
			import mx.logging.LogEventLevel;
			import mx.logging.targets.TraceTarget;
			
			import spark.events.IndexChangeEvent;
			
			private var urlLoader:URLLoader;
			[Bindable]private var dataProvider:IList;

			private var contentPath:String = "";
			//private contentPath = new URLRequest("exercises/menu.xml");
			private var configProxy:ConfigProxy = new ConfigProxy();
			
			private function creationComplete():void {
				// Configure logging
				var logTarget:TraceTarget = new TraceTarget();
				logTarget.filters = ["com.clarityenglish.*"];
				logTarget.level = LogEventLevel.ALL;
				logTarget.includeDate = false;
				logTarget.includeTime = false;
				logTarget.includeCategory = true;
				logTarget.includeLevel = true;
				Log.addTarget(logTarget);
				
				buttonBar.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE));
				//menuTree.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE));
				
				setDataProvider(); 
			}
			
			protected function onButtonBarChange(event:IndexChangeEvent):void {
				var selectedExercise:String = event.target.selectedItem;
				
				// Load the configuration file
				urlLoader = new URLLoader();
				urlLoader.addEventListener(Event.COMPLETE, onExerciseLoadComplete);
				urlLoader.load(new URLRequest("exercises/" + selectedExercise + ".xml"));
			}
			// If you are reading from the tree
			protected function onSelectItemChange(event:IndexChangeEvent):void {
				var contentPath:String = configProxy.getContentPath();
				if (event.target.selectedItem) {
					var selectedExercise:String = event.target.selectedItem.@id;
					// Load the configuration file
					urlLoader = new URLLoader();
					urlLoader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
					urlLoader.addEventListener(Event.COMPLETE, onExerciseLoadComplete);
					try {
						trace("open file:" + contentPath + "Exercises/" + selectedExercise + "-new.xml");
						urlLoader.load(new URLRequest(contentPath + "Exercises/" + selectedExercise + "-new.xml"));
					}
					catch (error:SecurityError)
					{
						trace("A SecurityError has occurred.");
					}
				}
			}
			
			protected function onExerciseLoadComplete(event:Event):void {
				var exercise:Exercise = new Exercise();
				exercise.rootPath = "exercises";
				exercise.xml = new XML(urlLoader.data);
				
				exerciseView.exercise = exercise;
			}
			private function errorHandler(e:IOErrorEvent):void {
				trace("Had problem loading the XML File.");
			}
			private function setDataProvider():void {
				/*
				var xml:XML = <root>
	                <title label="Road to IELTS" data="1">
	                    <course label="Leisure and entertainment" data="2">
	                        <unit label="Listening" data="3">
								<exercise label="Exercise 1" data="4" />
							</unit>
	                    </course>
	                </title>
			    </root>;
				*/
				var collection:XMLListCollection = new XMLListCollection(nodes.children());
				this.dataProvider = collection;
			}
			public function treeLabeller(item:Object):String {
				return unescape(item.@caption);
			}
			
		]]>
	</fx:Script>
	
	<util:layout>
		<s:HorizontalLayout />
	</util:layout>

	<s:VGroup width="300">
		<s:DropDownList id="buttonBar" width="100%" requireSelection="true" selectedIndex="16" change="onButtonBarChange(event)">
			<mx:ArrayCollection>
				<fx:String>Grid1</fx:String>
				<fx:String>Grid2</fx:String>
				<fx:String>Grid3</fx:String>
				<fx:String>SpaceBug</fx:String>
				<fx:String>GapFill1</fx:String>
				<fx:String>GapFill2</fx:String>
				<fx:String>TrueFalse1</fx:String>
				<fx:String>TrueFalse2</fx:String>
				<fx:String>TrueFalse3</fx:String>
				<fx:String>DropDown1</fx:String>
				<fx:String>DragAndDrop1</fx:String>
				<fx:String>DragAndDrop2</fx:String>
				<fx:String>DragAndDrop3</fx:String>
				<fx:String>TargetSpotting1</fx:String>
				<fx:String>R2I1</fx:String>
				<fx:String>R2I2</fx:String>
				<fx:String>TestTrueFalse3</fx:String>
				<fx:String>PercentWidth</fx:String>
				<fx:String>FixedHeight</fx:String>
				<fx:String>xhtmlfail</fx:String>
			</mx:ArrayCollection>
		</s:DropDownList>
		<sparkTree:Tree id="menuTree" labelFunction="treeLabeller"
						width="100%" height="450" dataProvider="{dataProvider}"
						change="onSelectItemChange(event)" >
		</sparkTree:Tree>
	</s:VGroup>
	
	<exercise:ExerciseView id="exerciseView" width="80%" height="100%" />
	
	<debugger:MonsterDebuggerFlex id="monsterDebugger"/>
	
</util:TLF2Application>
