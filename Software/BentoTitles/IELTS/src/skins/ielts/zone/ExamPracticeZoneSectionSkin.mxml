<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:speakingtest="com.clarityenglish.ielts.view.zone.speakingtest.*"
		xmlns:tlfcomponents="com.clarityenglish.textLayout.components.*"
		xmlns:ui="com.clarityenglish.ielts.view.zone.ui.*"
		xmlns:components="com.clarityenglish.components.*"
		xmlns:timer="com.clarityenglish.bento.view.timer.*"
		xmlns:assets="skins.ielts.assets.zone.*"
		creationComplete="onCreationComplete(event)"
		removedFromStage="onRemoveFromStage(event)">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.ielts.view.zone.ExamPracticeZoneSectionView")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[			
			import com.clarityenglish.ielts.IELTSApplication;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.events.FlexEvent;
			
			private var changeWatcher:ChangeWatcher;
			
			protected function onCreationComplete(event:FlexEvent):void {
				// for direct start, scroll to the specified exercise
				if (list.scroller.horizontalScrollBar)
					list.scroller.horizontalScrollBar.value += (list.scroller.viewport.width * (hostComponent.pageToScroll - 1));

			}
			
			protected function scrollBy(pages:int):void {
				list.scroller.horizontalScrollBar.value += (list.scroller.viewport.width * pages);
			}
			
			protected function onRemoveFromStage(event:Event):void {
				if (changeWatcher) changeWatcher.unwatch();
				changeWatcher = null;
			}
		]]>
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="disabled" />
		<s:State name="normal" />
		
		<s:State name="reading" />
		<s:State name="writing" />
		<s:State name="listening" />
		<s:State name="speaking" />
	</s:states>
	

	<!--s:Label id="examZoneNoTestLabel" visible="{list.dataProvider.length == 0}" left="20" top="35" right="25" /-->
	
	<s:List id="list"
			width="514"
			top="0"
			bottom="0"
			horizontalCenter="0"
			contentBackgroundColor="#FFFFFF"
			verticalScrollPolicy="off"
			pageScrollingEnabled="true"
			scrollSnappingMode="leadingEdge"
			borderVisible="false">
		<s:layout>
			<s:HorizontalLayout gap="0" useVirtualLayout="true" />
		</s:layout>
		<s:itemRenderer>
			<fx:Component>
				<s:DataRenderer width="514" height="100%" addedToStage="onAddedToStage(event)" removedFromStage="onRemovedFromStage(event)">
					<fx:Script>
						<![CDATA[
							import com.clarityenglish.bento.BentoApplication;
							import com.clarityenglish.bento.events.ExerciseEvent;
							import com.clarityenglish.ielts.IELTSApplication;

							import mx.binding.utils.ChangeWatcher;
							import mx.collections.ListCollectionView;
							
							import spark.components.List;
							
							private var changeWatcher:ChangeWatcher;

							[Bindable]
							private var courseClass:String;
							
							protected function onAddedToStage(event:Event):void {
								//var zoneView:ZoneView = outerDocument.parentDocument["hostComponent"];
								//changeWatcher = ChangeWatcher.watch(zoneView, "courseClass", onCourseClassChanged, false, true);
							}
							
							protected function onRemovedFromStage(event:Event):void {
								if (changeWatcher) changeWatcher.unwatch();
								changeWatcher = null;
							}
							
							private function onCourseClassChanged(e:Event):void {
								callLater(invalidateDisplayList);
							}
							
							public function getSequenceNumber(data:Object):Number {
								return (owner as List).dataProvider.getItemIndex(data) + 1;
							}
							
							override public function set data(value:Object):void {
								super.data = value;
								
								if (data) {
									var idx:int = ((owner as List).dataProvider as ListCollectionView).getItemIndex(data);
									courseClass = outerDocument.hostComponent.courseClass;
									practiceTestButton.thumbnailSource =  outerDocument.hostComponent.assetFolder + "testpracticequestion_" + courseClass + (idx + 1) + ".png";
									practiceTestButton.textBackgroundColor = getStyle(courseClass + "ExamPracticeColor");
									answerKeyButton.thumbnailSource = outerDocument.hostComponent.assetFolder + "testpracticekey_" + courseClass + (idx + 1) + ".png";
									answerKeyButton.textBackgroundColor = getStyle(courseClass + "ExamPracticeColor");
									indexLabel.text = String(idx + 1);
									indexLabel.setStyle("color", getStyle(courseClass + "ExamPracticeColor"));
									moduleLabel.text = getProductModule(outerDocument.hostComponent.productCode);
									moduleLabel.setStyle("color", getStyle(courseClass + "ExamPracticeDarkColor"));
									captionLabel.text = data.@caption;
									captionLabel.setStyle("color", getStyle(courseClass + "ExamPracticeDarkColor"));

									// GH #49
									practiceTestButton.enabled = answerKeyButton.enabled = audioPlayer.enabled = !(data.attribute("enabledFlag").length() > 0 && (Number(data.@enabledFlag.toString()) & 8));

									//gh #184
									if (practiceTestButton.enabled) {
										//practiceLabel.text = data.@caption;
										practiceLabel.text = "";
										practiceTestGroup.toolTip = null;
										answerKeyGroup.toolTip = null;
										testDriveInformation.includeInLayout = testDriveInformation.visible = false;
									} else {
										// gh#1161
										if (outerDocument.hostComponent.isTestDrive) {
											practiceLabel.text = "";
											testDriveInformation.includeInLayout = testDriveInformation.visible = true;
											if (courseClass == 'reading') {
												testDriveInfo.caption = outerDocument.hostComponent.getCopyProvider().getCopyForId('exampleInReadingTest1');
											} else {
												testDriveInfo.caption = outerDocument.hostComponent.getCopyProvider().getCopyForId('exampleInReading');
											}
										} else {
											practiceLabel.text = outerDocument.hostComponent.getCopyProvider().getCopyForId("notAvailblePracticeTest");
										}
										// gh#759
										practiceTestGroup.toolTip = getToolTip(outerDocument.hostComponent.productVersion, getSequenceNumber(data));
										answerKeyGroup.toolTip = getToolTip(outerDocument.hostComponent.productVersion, getSequenceNumber(data));
									}

								}
							}
							
							// gh#759
							protected function getToolTip(productVersion:String, sequenceNumber:Number = 0):String {
								switch (productVersion) {
									case IELTSApplication.FULL_VERSION:
										return outerDocument.hostComponent.getCopyProvider().getCopyForId("notCurAvailable");
										break;
									case IELTSApplication.LAST_MINUTE:
										return outerDocument.hostComponent.getCopyProvider().getCopyForId("onlyAvailableFV");
										break;
									case IELTSApplication.TEST_DRIVE:
										if (sequenceNumber >= 3) {
											return outerDocument.hostComponent.getCopyProvider().getCopyForId("onlyAvailableFVWebsite");
										}
										return outerDocument.hostComponent.getCopyProvider().getCopyForId("onlyAvailableLM");
										break;
									case BentoApplication.DEMO:
										return outerDocument.hostComponent.getCopyProvider().getCopyForId("notAvailbleDemo");
										break;
									default:
										return outerDocument.hostComponent.getCopyProvider().getCopyForId("notAvailble");
								}
							}

							protected function getProductModule(productCode:String):String {
								switch (productCode) {
									case IELTSApplication.ACADEMIC_MODULE:
										return outerDocument.hostComponent.getCopyProvider().getCopyForId("AC");
										break;
									case IELTSApplication.GENERAL_TRAINING_MODULE:
										return outerDocument.hostComponent.getCopyProvider().getCopyForId("GT");
										break;
									default:
										return outerDocument.hostComponent.getCopyProvider().getCopyForId("AC");
								}
							}
							
							private function onButtonClick(node:XML, attribute:String = "href"):void {
								dispatchEvent(new ExerciseEvent(ExerciseEvent.EXERCISE_SELECTED, node.@[attribute], node, attribute));
							}
						]]>
					</fx:Script>

					<fx:Declarations>
						<s:DropShadowFilter id="dropShadowFilterBottom" color="#CCCCCC" blurX="5" blurY="5" alpha="0.75" distance="1" angle="90" />
						<s:DropShadowFilter id="dropShadowFilterTop" color="#CCCCCC" blurX="5" blurY="5" alpha="0.75" distance="1" angle="270" />
					</fx:Declarations>

					<s:Label id="practiceLabel" top="{courseClass != 'listening' ? 305 : 330}" horizontalCenter="0" fontSize="16" visible="{data.attribute('href').length() > 0}" />

					<!-- gh#1161 -->
					<s:Group id="testDriveInformation" verticalCenter="0" horizontalCenter="0" includeInLayout="{outerDocument.hostComponent.isTestDrive}" visible="{outerDocument.hostComponent.isTestDrive}" >
						<ui:InfoLabel id="testDriveInfo" />
					</s:Group>

					<!--gh#759 using group to show tooltip when button is disabled-->
					<s:HGroup top="{courseClass != 'listening' ? 105 : 135}" horizontalCenter="0" gap="0" visible="{data.attribute('href').length() > 0}">
						<s:Group id="practiceTestGroup">
							<ui:ExamPracticeButton id="practiceTestButton" color="#FFFFFF" label="{data.@caption}" isBottomLeftRound="true" click="onButtonClick(data as XML)" useHandCursor="true" buttonMode="true" />
						</s:Group>
						<s:Group id="answerKeyGroup">
							<ui:ExamPracticeButton id="answerKeyButton" color="#FFFFFF" label="{data.@answerCaption}" isBottomRightRound="true" click="onButtonClick(data as XML, 'answerHref')" useHandCursor="true" buttonMode="true" />
						</s:Group>
					</s:HGroup>

					<s:Group top="{courseClass != 'listening' ? 55 : 85}" horizontalCenter="0" filters="{[dropShadowFilterBottom, dropShadowFilterTop]}">
						<assets:HeadBar left="0" />
						<s:Label id="indexLabel" width="50" left="27" top="17" textAlign="center" fontSize="48" fontWeight="bold" />
						<s:Label id="moduleLabel" top="17" left="107" fontSize="12" />
						<s:Label id="captionLabel" top="30" left="107" fontSize="15" fontWeight="bold" />
						<tlfcomponents:AudioPlayer id="audioPlayer" right="10" top="8" visible="{data.attribute('audioHref').length() > 0}" includeInLayout="{data.attribute('audioHref').length() > 0}" styleName="examPracticeAudioPlayer" src="{outerDocument.hostComponent.href.createRelativeHref(null, data.@audioHref).url}" controls="compact" />
					</s:Group>
				</s:DataRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>

	<components:PageNumberDisplay id="pageNumberDisplay" horizontalCenter="0" bottom="{hostComponent.courseClass != 'listening' ? 57 : 22}" dataProvider="{list.dataProvider}" excludeFrom="speaking" />

	<!--s:SWFLoader visible="{list.dataProvider.length == 0}" source="{hostComponent.assetFolder}testpractice_empty.png" width="386" top="90" horizontalCenter="0" /-->
	<!--Writing timer-->
	<timer:TimerComponent id="readingTimer" left="1" right="1" height="50" timerWidth="310" timerHeight="26" bottom="0" timerTotalTime="{String(list.dataProvider.getItemAt(pageNumberDisplay.selectedIndex).attribute('totalTime')).split(',')}"
						  isTimeFixed="true" isNoPause="true" textSize="16" timeTextColor="#333333" trackColor="#D8D8D8"
						  progressLeftColor="#009DC3" progressMidColor="#009DC3" progressRightColor="#009DC3"
						  buttonColor="0x009DC3" buttonDownOverColor="0x00495A" copyProvider="{hostComponent.copyProvider}"
						  includeIn="reading"/>

	<timer:TimerComponent id="writingTimer" left="1" right="1" height="50" timerWidth="310" timerHeight="26" bottom="0" timerTotalTime="{String(list.dataProvider.getItemAt(pageNumberDisplay.selectedIndex).attribute('totalTime')).split(',')}"
						  isTimeFixed="true" isNoPause="true" textSize="16" timeTextColor="#333333" trackColor="#D8D8D8"
						  progressLeftColor="#7DAB36" progressMidColor="#7DAB36" progressRightColor="#7DAB36"
						  buttonColor="0x7DAB36" buttonDownOverColor="0x354a17" copyProvider="{hostComponent.copyProvider}"
						  includeIn="writing"/>

	<!-- These buttons are only enabled (by CSS) in the web version -->
	<s:Button id="leftArrowButton" click="scrollBy(-1)" visible="{getStyle('showArrows')}" left="12" top="190"  mouseEnabled="true" buttonMode="true" enabled="false" excludeFrom="speaking" />
	<s:Button id="rightArrowButton" click="scrollBy(1)" visible="{getStyle('showArrows')}" right="12" top="193" mouseEnabled="true" buttonMode="true" excludeFrom="speaking" />

	<s:Label id="examZoneLabel" fontSize="18" fontWeight="bold" left="20" top="12" excludeFrom="speaking" />
	<s:Label id="examZoneInstructionLabel" visible="{list.dataProvider.length > 0}" text="{hostComponent.examZoneInstructionText}" left="20" top="35" right="25" excludeFrom="speaking" />

	<speakingtest:SpeakingTestView id="speakingTestView" href="{hostComponent.href}" testXMLListCollection="{hostComponent.speakingTestXMLListCollection}" isExitSpeaking="{hostComponent.courseClass != 'speaking'}" top="0" bottom="0" right="0" left="0" visible="{currentState == 'speaking'}" />
</s:Skin>