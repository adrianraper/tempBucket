<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:controls="com.clarityenglish.controls.*"
		xmlns:zone="skins.ieltsair.assets.zone.*"
		xmlns:tlfcomponents="com.clarityenglish.textLayout.components.*"
		xmlns:components="com.clarityenglish.components.*"
		creationComplete="onCreationComplete(event)"
		removedFromStage="onRemoveFromStage(event)">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.ielts.view.zone.ExamPracticeZoneSectionView")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.events.FlexEvent;
			
			private var changeWatcher:ChangeWatcher;
			
			protected function onCreationComplete(event:FlexEvent):void {
				changeWatcher = BindingUtils.bindSetter(onScroll, list.scroller.viewport, "horizontalScrollPosition");
				
				// for direct start, scroll to the specified exercise
				if (list.scroller.horizontalScrollBar)
					list.scroller.horizontalScrollBar.value += (list.scroller.viewport.width * (hostComponent.pageToScroll - 1));
			}
			
			protected function onScroll(x:* = null):void {
				if (list.scroller.horizontalScrollBar)
					pageNumberDisplay.selectedIndex = Math.floor(list.scroller.horizontalScrollBar.value / list.scroller.viewport.width);
			}
			
			protected function scrollBy(pages:int):void {
				list.scroller.horizontalScrollBar.value += (list.scroller.viewport.width * pages);
			}
			
			protected function onRemoveFromStage(event:Event):void {
				if (changeWatcher) changeWatcher.unwatch();
				changeWatcher = null;
			}
		]]>
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="disabled" />
		<s:State name="normal" />
		
		<s:State name="reading" />
		<s:State name="writing" />
		<s:State name="listening" />
		<s:State name="speaking" />
	</s:states>
	
	<s:Label id="examZoneLabel" fontSize="18" fontWeight="bold" left="20" top="12" />
	<s:Label id="examZoneInstructionLabel" visible="{list.dataProvider.length > 0 }" left="20" top="35" right="25"/>
	<s:Label id="examZoneNoTestLabel" visible="{list.dataProvider.length == 0}" left="20" top="35" right="25" />
	
	<s:List id="list"
			width="386"
			top="80"
			bottom="0"
			horizontalCenter="0"
			contentBackgroundColor="#FFFFFF"
			verticalScrollPolicy="off"
			pageScrollingEnabled="true"
			scrollSnappingMode="leadingEdge"
			borderVisible="false">
		<s:layout>
			<s:HorizontalLayout gap="0" useVirtualLayout="true" />
		</s:layout>
		<s:itemRenderer>
			<fx:Component>
				<s:DataRenderer width="386" addedToStage="onAddedToStage(event)" removedFromStage="onRemovedFromStage(event)">
					<fx:Script>
						<![CDATA[
							import com.clarityenglish.bento.BentoApplication;
							import com.clarityenglish.bento.events.ExerciseEvent;
							import com.clarityenglish.common.model.interfaces.CopyProvider;
							import com.clarityenglish.ielts.IELTSApplication;
							import com.clarityenglish.ielts.view.zone.ZoneView;
							
							import flash.utils.setTimeout;
							
							import mx.binding.utils.ChangeWatcher;
							import mx.collections.ListCollectionView;
							
							import spark.components.List;
							
							private var changeWatcher:ChangeWatcher;
							
							protected function onAddedToStage(event:Event):void {
								//var zoneView:ZoneView = outerDocument.parentDocument["hostComponent"];
								//changeWatcher = ChangeWatcher.watch(zoneView, "courseClass", onCourseClassChanged, false, true);
							}
							
							protected function onRemovedFromStage(event:Event):void {
								if (changeWatcher) changeWatcher.unwatch();
								changeWatcher = null;
							}
							
							private function onCourseClassChanged(e:Event):void {
								callLater(invalidateDisplayList);
							}
							
							public function getSequenceNumber(data:Object):Number {
								return (owner as List).dataProvider.getItemIndex(data) + 1;
							}
							
							override public function set data(value:Object):void {
								super.data = value;
								
								if (data) {
									var idx:int = ((owner as List).dataProvider as ListCollectionView).getItemIndex(data);
									var courseClass:String = outerDocument.hostComponent.courseClass;
									practiceTestButton.setStyle('chromeColor', getStyle(courseClass + 'Color'));
									answerKeyButton.setStyle('chromeColor', getStyle(courseClass + 'Color'));
									// gh#51
									//swfLoader.source = "/skins/ielts/assets/zone/testpractice_" + courseClass + (idx + 1) + ".png";
									swfLoader.source = outerDocument.hostComponent.assetFolder + "testpractice_" + courseClass + (idx + 1) + ".png";
									
									// GH #49
									practiceTestButton.enabled = answerKeyButton.enabled = audioPlayer.enabled = !(data.hasOwnProperty("@enabledFlag") && (Number(data.@enabledFlag.toString()) & 8));
									
									//gh #184
									if (practiceTestButton.enabled) {
										practiceLabel.text = data.@caption;
										practiceTestGroup.toolTip = null;
										answerKeyGroup.toolTip = null;
									} else {
										practiceLabel.text = outerDocument.hostComponent.getCopyProvider().getCopyForId("notAvailblePracticeTest");
										// gh#759
										practiceTestGroup.toolTip = getToolTip(outerDocument.hostComponent.productVersion, getSequenceNumber(data));
										answerKeyGroup.toolTip = getToolTip(outerDocument.hostComponent.productVersion, getSequenceNumber(data));
									}
								}
							}
							
							// gh#759
							protected function getToolTip(productVersion:String, sequenceNumber:Number = 0):String {
								switch (productVersion) {
									case IELTSApplication.FULL_VERSION:
										return outerDocument.hostComponent.getCopyProvider().getCopyForId("notCurAvailable");
										break;
									case IELTSApplication.LAST_MINUTE:
										return outerDocument.hostComponent.getCopyProvider().getCopyForId("onlyAvailableFV");
										break;
									case IELTSApplication.TEST_DRIVE:
										if (sequenceNumber == 3) {
											return outerDocument.hostComponent.getCopyProvider().getCopyForId("onlyAvailableFVWebsite");
										}
										return outerDocument.hostComponent.getCopyProvider().getCopyForId("onlyAvailableLM");
										break;
									case BentoApplication.DEMO:
										return outerDocument.hostComponent.getCopyProvider().getCopyForId("notAvailbleDemo");
										break;
									default:
										return outerDocument.hostComponent.getCopyProvider().getCopyForId("notAvailble");
								}
							}
							
							private function onButtonClick(node:XML, attribute:String = "href"):void {
								dispatchEvent(new ExerciseEvent(ExerciseEvent.EXERCISE_SELECTED, node.@[attribute], node, attribute));
							}
						]]>
					</fx:Script>
					<s:SWFLoader id="swfLoader" />
					<s:Label id="practiceLabel" top="268" horizontalCenter="0" fontSize="16" />
					
					<s:HGroup top="295" gap="10" horizontalCenter="0">
						<tlfcomponents:AudioPlayer id="audioPlayer" visible="{data.hasOwnProperty('@audioHref')}" includeInLayout="{data.hasOwnProperty('@audioHref')}" styleName="examPracticeAudioPlayer" src="{outerDocument.hostComponent.href.createRelativeHref(null, data.@audioHref).url}" controls="compact" />
						<!--gh#759 using group to show tooltip when button is disabled-->
						<s:Group id="practiceTestGroup">
							<s:Button id="practiceTestButton" width="141" height="40" color="#FFFFFF" icon="@Embed(source='/skins/ielts/assets/assets.swf', symbol='SearchIcon')" label="{data.@caption}" click="onButtonClick(data as XML)" />
						</s:Group>
						<s:Group id="answerKeyGroup">
							<s:Button id="answerKeyButton" label="{data.@answerCaption}" width="141" height="40" color="#FFFFFF" chromeColor="#000000" click="onButtonClick(data as XML, 'answerHref')" />
						</s:Group>				
					</s:HGroup>
				</s:DataRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
	
	<components:PageNumberDisplay id="pageNumberDisplay" horizontalCenter="0" bottom="12" dataProvider="{list.dataProvider}" />
	
	<s:SWFLoader visible="{list.dataProvider.length == 0}" source="{hostComponent.assetFolder}testpractice_empty.png" width="386" top="90" horizontalCenter="0" />
	
	<!-- These buttons are only enabled (by CSS) in the web version -->
	<s:SWFLoader click="scrollBy(-1)" visible="{getStyle('showArrows')}" source="@Embed(source='/skins/ielts/assets/assets.swf', symbol='ExamPracticeArrow')" left="22" top="233" scaleX="-1" mouseEnabled="true" buttonMode="true" />
	<s:SWFLoader click="scrollBy(1)" visible="{getStyle('showArrows')}" source="@Embed(source='/skins/ielts/assets/assets.swf', symbol='ExamPracticeArrow')" right="22" top="233" mouseEnabled="true" buttonMode="true" />
	
</s:Skin>