<?xml version="1.0"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:timer="com.clarityenglish.bento.view.timer.*"
        xmlns:components="com.clarityenglish.components.*"
        xmlns:recorder="com.clarityenglish.bento.view.recorder.*"
        xmlns:assets="skins.ielts.assets.zone.*"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        creationComplete="onCreationComplete(event)">

    <fx:Metadata>
        [HostComponent("com.clarityenglish.ielts.view.zone.speakingtest.SpeakingTestView")]
    </fx:Metadata>

    <fx:Script>
        <![CDATA[
        import com.clarityenglish.textLayout.components.AudioPlayer;

        import mx.binding.utils.BindingUtils;
        import mx.binding.utils.ChangeWatcher;
        import mx.events.FlexEvent;

        private var changeWatcher:ChangeWatcher;

        protected function onCreationComplete(event:FlexEvent):void {
            changeWatcher = BindingUtils.bindSetter(onScroll, list.scroller.viewport, "horizontalScrollPosition");

            playAudio(list.dataProvider.getItemAt(0) as XML);
        }

        protected function onScroll(x:* = null):void {
            if (list.scroller.horizontalScrollBar) {
                pageNumberDisplay.selectedIndex = Math.floor(list.scroller.horizontalScrollBar.value / list.scroller.viewport.width);
                hostComponent.selectedPageNumber = pageNumberDisplay.selectedIndex;

                playAudio(list.dataProvider.getItemAt(hostComponent.selectedPageNumber) as XML);
            }
        }

        protected function playAudio(node:XML):void {
            var audioPlayer:AudioPlayer = new AudioPlayer();
            audioPlayer.src = hostComponent.href.createRelativeHref(null, node.@audioHref).url;
            audioPlayer.autoplay = audioPlayer.playComponentEnable = true;
            stage.addChild(audioPlayer);
        }

        protected function scrollBy(pages:int):void {
            AudioPlayer.stopAllAudio();
            list.scroller.horizontalScrollBar.value += (list.scroller.viewport.width * pages);
        }

        protected function onRemoveFromStage(event:Event):void {
            if (changeWatcher) changeWatcher.unwatch();
            changeWatcher = null;
        }

        ]]>
    </fx:Script>

    <!-- states -->
    <s:states>
        <s:State name="disabled" />
        <s:State name="normal" />
        
        <s:State name="normalState" />
        <s:State name="testState" />
    </s:states>

    <s:Group top="0" bottom="0" left="0" right="0">
        <s:List id="list" width="514" top="0" bottom="0" horizontalCenter="0" contentBackgroundColor="#FFFFFF" verticalScrollPolicy="off" pageScrollingEnabled="true" scrollSnappingMode="leadingEdge" borderVisible="false" dataProvider="{hostComponent.testXMLListCollection}">
            <s:layout>
                <s:HorizontalLayout gap="0" useVirtualLayout="true" />
            </s:layout>
            <s:itemRenderer>
                <fx:Component>
                    <s:DataRenderer width="514" height="100%" removedFromStage="onRemovedFromStage(event)">
                        <fx:Declarations>
                            <s:Parallel id="flipFont" effectEnd="onFlipFontEnd(event)">
                                <s:Rotate3D id="rotate1"
                                            target="{fontSwfLoader}"
                                            angleYFrom="0" angleYTo="180" applyLocalProjection="false"
                                            autoCenterTransform="true" autoCenterProjection="true"/>
                                <s:Rotate3D id="rotate2"
                                            target="{backSwfLoader}"
                                            angleYFrom="180" angleYTo="360" applyLocalProjection="false"
                                            autoCenterTransform="true" autoCenterProjection="true"/>
                                <s:Animate target="{fontSwfLoader}">
                                    <s:SimpleMotionPath property="depth" valueFrom="1" valueTo="0"/>
                                </s:Animate>
                                <s:Animate target="{backSwfLoader}">
                                    <s:SimpleMotionPath property="depth" valueFrom="0" valueTo="1"/>
                                </s:Animate>
                            </s:Parallel>
                            <s:Parallel id="flipBack" effectStart="onFlipBackStart(event)">
                                <s:Rotate3D target="{backSwfLoader}"
                                            angleYFrom="360" angleYTo="180" applyLocalProjection="false"
                                            autoCenterTransform="true" autoCenterProjection="true"/>
                                <s:Rotate3D target="{fontSwfLoader}"
                                            angleYFrom="180" angleYTo="0" applyLocalProjection="false"
                                            autoCenterTransform="true" autoCenterProjection="true"/>
                                <s:Animate target="{backSwfLoader}">
                                    <s:SimpleMotionPath property="depth" valueFrom="1" valueTo="0"/>
                                </s:Animate>
                                <s:Animate target="{fontSwfLoader}">
                                    <s:SimpleMotionPath property="depth" valueFrom="0" valueTo="1"/>
                                </s:Animate>
                            </s:Parallel>
                        </fx:Declarations>
                        <fx:Script>
                            <![CDATA[
                            import com.clarityenglish.textLayout.components.AudioPlayer;

                            import mx.binding.utils.ChangeWatcher;
                            import mx.collections.ListCollectionView;

                            import spark.components.List;

                            private var changeWatcher:ChangeWatcher;

                            protected function onRemovedFromStage(event:Event):void {
                                if (changeWatcher) changeWatcher.unwatch();
                                changeWatcher = null;
                            }

                            override public function set data(value:Object):void {
                                super.data = value;

                                if (data) {
                                    var idx:int = ((owner as List).dataProvider as ListCollectionView).getItemIndex(data);
                                    fontSwfLoader.source = outerDocument.hostComponent.assetFolder + "testpractice_speakingfont" + (idx + 1) + ".png";
                                    backSwfLoader.source = outerDocument.hostComponent.assetFolder + "testpractice_speakingback" + (idx + 1) + ".png";
                                }
                            }

                            protected function onStartButtonClick(event:Event):void {
                                AudioPlayer.stopAllAudio();
                                flipFont.play();
                                dispatchEvent(new Event("startButtonClickEvent", true));
                                speakingStartButton.visible = false;
                            }

                            protected function onFlipFontEnd(event:Event):void {
                                speakingBackButton.visible = true;
                            }

                            protected function onBackButtonClick(event:Event):void {
                                flipBack.play();
                                dispatchEvent(new Event("backButtonClickEvent", true));
                                speakingStartButton.visible = true;
                                speakingBackButton.visible = false;
                            }

                            protected function onFlipBackStart(event:Event):void {
                                speakingBackButton.visible = false;
                            }
                            ]]>
                        </fx:Script>

                        <s:Button id="speakingStartButton" bottom="55" width="446" height="53" horizontalCenter="0" label="{outerDocument.hostComponent.getCopyProvider().getCopyForId('speakingStartButton')}" color="#333333" click="onStartButtonClick(event)"
                                  useHandCursor="true" buttonMode="true"  />
                        <s:Button id="speakingBackButton"  top="2" left="37" label="Back" visible="false" click="{onBackButtonClick(event)}" useHandCursor="true" buttonMode="true" />

                        <s:SWFLoader id="backSwfLoader" top="17" scaleX="0.5" scaleY="0.5" horizontalCenter="0"/>
                        <s:SWFLoader id="fontSwfLoader" top="17" scaleX="0.5" scaleY="0.5" horizontalCenter="0"/>
                    </s:DataRenderer>
                </fx:Component>
            </s:itemRenderer>
        </s:List>

        <s:Group id="actionGroup" width="446" height="40" horizontalCenter="0" bottom="68" includeIn="testState">
            <s:Group id="planningGroup" width="100%" height="100%" horizontalCenter="0" verticalCenter="0">
                <s:Rect width="100%" height="100%" radiusX="4" radiusY="4">
                    <s:fill>
                        <s:SolidColor color="#A93087" />
                    </s:fill>
                </s:Rect>
                <s:Label id="planningLabel" horizontalCenter="0" verticalCenter="0" color="#FFFFFF" text="Please prepare your answer in 1 mins." />
            </s:Group>
            <s:Group id="recorderGroup" width="100%" height="100%" verticalCenter="0">
                <recorder:RecorderView id="recorderView" left="0" right="0" top="0" bottom="0" />
            </s:Group>
        </s:Group>

        <s:Group top="0" bottom="0" left="1" right="1" excludeFrom="normalState">
            <s:Group id="timerGroup" width="100%" bottom="0">
                <timer:TimerComponent id="timer" bottom="0" timerTotalTime="{String(hostComponent.testXML.attribute('totalTime')).split(',')}"
                                      timerSectionLabels="{String(hostComponent.testXML.attribute('timerSectionLabels')).split(',')}"
                                      audios="{String(hostComponent.testXML.attribute('audios')).split(',')}"
                                      copyProvider="{hostComponent.getCopyProvider()}" contentPath="{hostComponent.href.rootPath}" textSize="17"
                                      trackColor="#D8D8D8" trackHighLightColor="#A8A8A8" progressLeftColor="#A93087" progressMidColor="#A93087" progressRightColor="#A93087"
                                      timerWidth="400" timerHeight="25" width="100%" height="60"
                                      isTimeFixed="true"
                                      isTimerAutoControl="true" />
            </s:Group>
        </s:Group>

        <components:PageNumberDisplay id="pageNumberDisplay" horizontalCenter="0" bottom="20" dataProvider="{list.dataProvider}" includeIn="normalState" />
        <assets:speakingarrow id="leftArrow" click="scrollBy(-1)" visible="true" left="12" top="160" rotation="180" scaleX="0.7" scaleY="0.7" mouseEnabled="true" buttonMode="true" includeIn="normalState" />
        <assets:speakingarrow id="rightArrow" click="scrollBy(1)" visible="true" right="12" top="163" scaleX="0.7" scaleY="0.7" mouseEnabled="true" buttonMode="true" includeIn="normalState" />
    </s:Group>
</s:Skin>
