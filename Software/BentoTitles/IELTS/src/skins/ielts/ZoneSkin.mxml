<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		xmlns:ui="com.clarityenglish.ielts.view.zone.ui.*"
		xmlns:tink="ws.tink.spark.containers.*"
		xmlns:flashcomponents="*"
		minWidth="540"
		maxHeight="500"
		xmlns:components="com.clarityenglish.textLayout.components.*"
		creationComplete="creationComplete(event)"
		>
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.ielts.view.zone.ZoneView")]
	</fx:Metadata>
	<fx:Declarations>
		<s:Sine id="sineEasing" easeInFraction="0.3"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import caurina.transitions.Tweener;
			
			import com.clarityenglish.ielts.view.zone.ExerciseEvent;
			
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			
			protected function creationComplete(event:FlexEvent):void {
				questionZoneVideoPlayer.x = 500;
				questionZoneVideoPlayer.alpha = 0;
				questionZoneVideoPlayer.visible = false;
			}
			
			protected function onUnitClick(event:MouseEvent):void {
				if (unitList.selectedItem)
					hostComponent.exerciseSelectorPoppedOut = true;
			}
			
			protected function onAccordianChange(event:IndexChangeEvent):void {
				hostComponent.exerciseSelectorPoppedOut = false;
			}
			
			protected function onPopoutExerciseSelected(event:ExerciseEvent):void {
				hostComponent.exerciseSelectorPoppedOut = false;
			}
			
			protected function onAdviceZoneVideoSelect(event:IndexChangeEvent):void {
				// Too much happening here, shift to the view/mediator
				hostComponent.adviceZoneVideoSelected(adviceZoneVideoList.selectedItem.@href);
			}
			
			protected function showEBook():void {
				Tweener.removeTweens(questionZoneVideoPlayer);
				Tweener.removeTweens(questionZoneEBookGraphic);
				
				Tweener.addTween(questionZoneVideoPlayer, { x: 500, _autoAlpha: 0, time: 1.2 });
				Tweener.addTween(questionZoneEBookGraphic, { x: 0, _autoAlpha: 1, time: 1.2 });
			}
			
			protected function showVideo():void {
				Tweener.removeTweens(questionZoneVideoPlayer);
				Tweener.removeTweens(questionZoneEBookGraphic);
				
				//Tweener.addTween(questionZoneVideoPlayer, { x: 0, _autoAlpha: 1, time: 1.2 });
				//Tweener.addTween(questionZoneEBookGraphic, { x: -500, _autoAlpha: 0, time: 1.2 });
				
				Tweener.addTween(questionZoneVideoPlayer, { x: 0, _autoAlpha: 1, time: 1.2, transition:"easeOutSine" });
				Tweener.addTween(questionZoneEBookGraphic, { x: -500, _autoAlpha: 0, time: 1.2, transition:"easeOutSine" });
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="reading_normal" stateGroups="normalStates,readingStates" />
		<s:State name="writing_normal" stateGroups="normalStates,writingStates" />
		<s:State name="listening_normal" stateGroups="normalStates,listeningStates" />
		<s:State name="speaking_normal" stateGroups="normalStates,speakingStates" />
		
		<s:State name="reading_popped" stateGroups="popoutStates,readingStates" />
		<s:State name="writing_popped" stateGroups="popoutStates,writingStates" />
		<s:State name="listening_popped" stateGroups="popoutStates,listeningStates" />
		<s:State name="speaking_popped" stateGroups="popoutStates,speakingStates" />
	</s:states>
	
	<s:transitions>
		<s:Transition fromState="*" toState="*" interruptionBehavior="stop" autoReverse="true" >
			<s:Move target="{popoutExerciseSelector}" />
		</s:Transition>
	</s:transitions>
	
	<s:Group width="100%" height="100%" top="0">
	<!-- The left hand side -->
		<s:Group width="40%" rollOver="hostComponent.exerciseSelectorPoppedOut = false" top="90" left="0" >
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>

			<!-- this is for the rotating course selector -->
			<flashcomponents:CourseSelectorWidget id="courseSelectorWidget" />
		</s:Group>
		
		
		<!-- The popout exercise selector -->
		<ui:PopoutExerciseSelector id="popoutExerciseSelector" href="{hostComponent.href}" courseClass="{hostComponent.courseClass}" width="45%" x.normalStates="{width / 2}" x.popoutStates="0" top="90" height="360" exerciseSelected="onPopoutExerciseSelected(event)"  />
		
		<!-- The right hand side -->
		<s:BorderContainer right="0" width="55%" height="80%" backgroundColor="#F2F2F2" cornerRadius="12" top="0" bottom="40" minWidth="540" minHeight="570">
			<s:layout>
				<s:VerticalLayout paddingLeft="20" paddingRight="20" paddingTop="13" paddingBottom="6" />
			</s:layout>
			
			<s:borderStroke>
				<s:SolidColorStroke color="#E4E4E4" weight="1" />
			</s:borderStroke>
			
			<s:HGroup width="100%">
				<s:SWFLoader id="courseIcon" width="25" height="25"
							 source.readingStates="@Embed(source='skins/ielts/assets/assets.swf', symbol='ReadingIcon')"
							 source.writingStates="@Embed(source='skins/ielts/assets/assets.swf', symbol='WritingIcon')"
							 source.listeningStates="@Embed(source='skins/ielts/assets/assets.swf', symbol='ListeningIcon')"
							 source.speakingStates="@Embed(source='skins/ielts/assets/assets.swf', symbol='SpeakingIcon')">
					<s:filters>
						<s:GlowFilter strength="3" blurX="0" blurY="0" color="#AAAAAA" alpha="0.8" />
					</s:filters>
				</s:SWFLoader>
				
				<s:RichText id="courseTitleLabel" fontSize="18"  paddingTop="6" paddingBottom="0"/>
			</s:HGroup>
			
			
			<!-- The accordian -->
			<tink:Accordion id="accordian" width="100%" height="100%" creationPolicy="all" borderVisible="false" contentBackgroundAlpha="0" easer="{sineEasing}" duration="500" change="onAccordianChange(event)">
				
				<!-- Question zone -->
				<s:NavigatorContent id="questionZoneNavigatorContent" label="Starting out" width="100%">
					<s:Label text="First click to read the eBook or to download the PDF version. Then click to watch a video setting out the key facts in this section of the IELTS test." width="95%" lineHeight="18" />

					<s:VGroup horizontalAlign="center" horizontalCenter="0" paddingTop="50" width="100%">

						<s:Group width="100%" height="100%">
							<s:SWFLoader id="questionZoneEBookGraphic" width="100%" height="100%"
										 source.readingStates="@Embed(source='skins/ielts/assets/questionzone_reading.png')" 
										 source.writingStates="@Embed(source='skins/ielts/assets/questionzone_writing.png')"
										 source.listeningStates="@Embed(source='skins/ielts/assets/questionzone_listening.png')"
										 source.speakingStates="@Embed(source='skins/ielts/assets/questionzone_speaking.png')" />
							<s:VideoPlayer id="questionZoneVideoPlayer" autoDisplayFirstFrame="true" width="411" height="231" autoPlay="true" scaleMode="letterbox" top="10" horizontalCenter="0" />
						</s:Group>
							
						<s:HGroup horizontalCenter="0"  paddingTop="20" >
							<s:Button id="questionZoneViewButton" label="Read eBook" fontSize="12.6" width="160" height="30" left="70" click="showEBook()" />							  
							<s:Button id="questionZoneDownloadButton" label="Download eBook" fontSize="12.6" width="160" height="30" click="showEBook()"  />
							<s:Button id="questionZoneVideoButton" label="Watch video" fontSize="12.6" width="160" height="30" click="showVideo()" />
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent>
				
				<!-- Advice zone -->
				<s:NavigatorContent id="adviceZoneNavigatorContent" label="Advice and tutorials" >
					<s:VGroup left="0" right="0" top="2" bottom="30" horizontalAlign="left" >
						<s:Label text="Click on a thumbnail to play the video."  visible="{hostComponent.courseClass=='writing' || hostComponent.courseClass=='speaking'}" includeInLayout="{hostComponent.courseClass=='writing' || hostComponent.courseClass=='speaking'}" width="95%" lineHeight="18" />
						<s:Label text="Click on the thumbnail to play the video."  visible="{hostComponent.courseClass=='listening' || hostComponent.courseClass=='reading'}" includeInLayout="{hostComponent.courseClass=='listening' || hostComponent.courseClass=='reading'}" width="95%" lineHeight="18" />
						<s:VideoPlayer id="adviceZoneVideoPlayer" autoDisplayFirstFrame="true" width="411" height="231" autoPlay="true" scaleMode="letterbox" visible="{adviceZoneVideoList.selectedItem != null}" includeInLayout="{adviceZoneVideoList.selectedItem != null}" top="10" />

						<s:Image source="@Embed(source='skins/ielts/assets/reading_advicezone_video.png')" visible="{hostComponent.courseClass == 'reading' &amp;&amp; adviceZoneVideoList.selectedItem == null}" includeInLayout="{hostComponent.courseClass == 'reading' &amp;&amp; adviceZoneVideoList.selectedItem == null}" />
						<s:Image source="@Embed(source='skins/ielts/assets/speaking_advicezone_video.png')" visible="{hostComponent.courseClass == 'speaking' &amp;&amp; adviceZoneVideoList.selectedItem == null}" includeInLayout="{hostComponent.courseClass == 'speaking' &amp;&amp; adviceZoneVideoList.selectedItem == null}" />
						<s:Image source="@Embed(source='skins/ielts/assets/listening_advicezone_video.png')" visible="{hostComponent.courseClass == 'listening' &amp;&amp; adviceZoneVideoList.selectedItem == null}" includeInLayout="{hostComponent.courseClass == 'listening' &amp;&amp; adviceZoneVideoList.selectedItem == null}" />
						<s:Image source="@Embed(source='skins/ielts/assets/writing_advicezone_video.png')" visible="{hostComponent.courseClass == 'writing' &amp;&amp; adviceZoneVideoList.selectedItem == null}" includeInLayout="{hostComponent.courseClass == 'writing' &amp;&amp; adviceZoneVideoList.selectedItem == null}" />
				
						<s:List id="adviceZoneVideoList" width="460" horizontalScrollPolicy="off" 
								borderVisible="false" change="onAdviceZoneVideoSelect(event)" >
							<s:layout>
								<s:TileLayout requestedColumnCount="2" requestedRowCount="3" orientation="columns" columnWidth="230" verticalGap="10" horizontalGap="5" />
							</s:layout>
							
							<s:itemRenderer>
								<fx:Component>
									<s:ItemRenderer>
										<fx:Script>
											<![CDATA[
												override public function set data(value:Object):void {
													super.data = value;
													
													image.source = outerDocument.hostComponent.href.createRelativeHref(null, data.@thumbnail).url;
													imageBorder.visible = this.selected;
													videoLabel.text = data.@caption;
													
													// #213
													enabled = !(data.hasOwnProperty("@enabled") && data.@enabled.toString() == "false")
														
													// #234
													if (!enabled)
														// Add a mouseover to the item saying that it is only in the Full Version
														// Ah, but Spark doesn't do this for disabled components
														this.toolTip = "This item is only in the full version. See My Profile page.";
												}
											]]>
										</fx:Script>
										<s:Rect id="imageBorder" width="75" height="35" top="-2" left="-2">
											<s:fill>
												<s:SolidColor color="#000000" />
											</s:fill>
										</s:Rect>
										<s:HGroup top="0" left="0" height="38" >
											<s:Image id="image" width="68" />
											<s:Label id="videoLabel" width="150" paddingTop="7" fontWeight="bold"/>
										</s:HGroup>
									</s:ItemRenderer>
								</fx:Component>
							</s:itemRenderer>
						</s:List>
						<s:VGroup width="100%" paddingLeft="25" paddingRight="10" paddingTop="25" paddingBottom="10">
							<s:Label id="unitCaption" fontSize="14" fontWeight="bold"  />
							<s:RichText id="unitDescription" width="80%" fontSize="12.6" />
						</s:VGroup>
					</s:VGroup>
				</s:NavigatorContent>
	
				<!-- Practice zone -->
				<s:NavigatorContent id="practiceZoneNavigatorContent" label="Practice zone" width="100%">
					<s:VGroup left="0" right="0" top="2" bottom="0" gap="10">
						<s:Label text="Choose a set below and start your IELTS language practice." width="95%" lineHeight="18" />
						<s:SWFLoader width="473" height="113"
									 source="@Embed(source='skins/ielts/assets/practicezone_image.png')" />
						<!-- The unit list -->
						<s:Group left="0" right="0" top="5" bottom="5">
							<s:List id="unitList" top="0" bottom="0" borderVisible="false" fontSize="12.6"  click="onUnitClick(event)">
								<s:layout>
									<s:TileLayout requestedColumnCount="4" requestedRowCount="6" orientation="columns" columnWidth="120" verticalGap="8" />
								</s:layout>
								
								<!-- Custom item renderer to render the label -->
								<s:itemRenderer>
									<fx:Component>
										<s:ItemRenderer>
											<fx:Script>
												<![CDATA[
													
													[Bindable]
													[Embed(source="skins/ielts/assets/uniticon.png")]
													public var unitIcon:Class;

													public override function set data(value:Object):void {
														super.data = value;
														captionLabel.text = data.@caption;
													}
												]]>
											</fx:Script>
											<s:HGroup width="100%" verticalAlign="middle" paddingLeft="5" paddingTop="5" paddingBottom="5">
												<s:Image id="captionIcon" source="{unitIcon}" />
												<s:Label id="captionLabel" fontSize="12.6" paddingTop="3" />
											</s:HGroup>
										</s:ItemRenderer>
									</fx:Component>
								</s:itemRenderer>
								
							</s:List>
						</s:Group>
					</s:VGroup>
				</s:NavigatorContent>
				
				<!-- Exam practice -->
				<s:NavigatorContent id="examPracticeNavigatorContent" label="Test practice" width="100%" >
					<s:layout>
						<s:VerticalLayout paddingTop="2"/>
					</s:layout>

					<s:Label text="Download complete test papers. Click the audio button to start the mock listening test. As in the test, you cannot pause the audio once you have started." includeInLayout="{hostComponent.courseClass=='listening'}" visible="{hostComponent.courseClass=='listening'}" width="95%" lineHeight="18" />
					<s:Label text="There is no downloadable test practice materials in this section. Watch the tutorial videos in the Advice and tutorials section to see what happens in the speaking test interview." includeInLayout="{hostComponent.courseClass=='speaking'}" visible="{hostComponent.courseClass=='speaking'}" width="95%" lineHeight="18" />
					<s:Label text="Download complete test papers with answers." includeInLayout="{hostComponent.courseClass=='writing' || hostComponent.courseClass=='reading'}" visible="{hostComponent.courseClass=='writing' || hostComponent.courseClass=='reading'}" width="95%" lineHeight="18" />
					<s:VGroup paddingTop="10" horizontalAlign="center" horizontalCenter="0" width="100%" >
						<s:SWFLoader source.readingStates="@Embed(source='skins/ielts/assets/testpractice_reading.png')"
									 source.writingStates="@Embed(source='skins/ielts/assets/testpractice_writing.png')"
									 source.speakingStates="@Embed(source='skins/ielts/assets/testpractice_speaking.png')"
									 source.listeningStates="@Embed(source='skins/ielts/assets/testpractice_listening.png')" />
						
					<s:DataGroup id="examPracticeDataGroup" width="100%" >
						<s:layout>
							<s:HorizontalLayout paddingLeft="0" paddingTop="10" gap="0" horizontalAlign="center" />
						</s:layout>
						<s:itemRenderer >
							<fx:Component>
								<s:DataRenderer>
									<fx:Script>
										<![CDATA[
											import com.clarityenglish.ielts.view.zone.ExerciseEvent;
											
											public override function set data(value:Object):void {
												super.data = value;
												
												if (data) {
													examPracticeViewButton.label = data.@caption;
													
													// #213
													enabled = !(data.hasOwnProperty("@enabled") && data.@enabled.toString() == "false")
												}
											}
											
											protected function onViewButtonClick(event:MouseEvent):void {
												dispatchEvent(new ExerciseEvent(ExerciseEvent.EXERCISE_SELECTED, data.@href));
											}
									
										]]>
									</fx:Script>
									<s:layout>
										<s:HorizontalLayout/>
									</s:layout>
									
									<s:Button id="examPracticeViewButton" click="onViewButtonClick(event)" width="132" height="30" textAlignLast="left" fontSize="12.6" />
									
									<!--<ui:DifficultyRenderer id="difficultyRenderer" data="{data}" courseClass="{outerDocument.hostComponent.courseClass}" />-->
									
									<!-- #144 -->
									<s:Group height="33">
										<s:HGroup paddingLeft="0" paddingTop="3" verticalAlign="middle" visible="{data.hasOwnProperty('@audioHref')}">
											<components:AudioPlayer id="examPracticeAudioPlayer" src="{outerDocument.hostComponent.href.createRelativeHref(null, data.@audioHref).url}" controls="compact" />
											<s:Label text="{data.@audioCaption}" fontSize="12.6" paddingTop="2" />
										</s:HGroup>
									</s:Group>
								</s:DataRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:DataGroup>
						
						<s:DataGroup id="examPracticeAnswerDataGroup" width="100%" >
							<s:layout>
								<s:HorizontalLayout paddingLeft="0" gap="0" horizontalAlign="center" />
							</s:layout>
							<s:itemRenderer >
								<fx:Component>
									<s:DataRenderer>
										<fx:Script>
											<![CDATA[
												import com.clarityenglish.ielts.view.zone.ExerciseEvent;
												
												public override function set data(value:Object):void {
													super.data = value;
													
													if (data) {
														examPracticeAnswerButton.label = data.@caption;
														
														// #213
														enabled = !(data.hasOwnProperty("@enabled") && data.@enabled.toString() == "false")
													}
												}
			
												
												protected function onViewButtonClick(event:MouseEvent):void {
													dispatchEvent(new ExerciseEvent(ExerciseEvent.EXERCISE_SELECTED, data.@href));
												}
												
											]]>
										</fx:Script>
										<s:layout>
											<s:HorizontalLayout />
										</s:layout>
										
										<s:Button id="examPracticeAnswerButton" click="onViewButtonClick(event)" width="132" height="30" textAlignLast="left" fontSize="12.6" />
										<s:Group height="33">
											<s:HGroup paddingLeft="0" paddingTop="3" verticalAlign="middle" visible="{data.hasOwnProperty('@audioHref')}">
												<components:AudioPlayer id="examPracticeAudioPlayer" src="{outerDocument.hostComponent.href.createRelativeHref(null, data.@audioHref).url}" controls="compact" />
												<s:Label text="{data.@audioCaption}" fontSize="12.6" paddingTop="2" />
											</s:HGroup>
										</s:Group>
									</s:DataRenderer>
								</fx:Component>
							</s:itemRenderer>
						</s:DataGroup>
					</s:VGroup>
				</s:NavigatorContent>
								
			</tink:Accordion>
		</s:BorderContainer>
	</s:Group>
	
</s:Skin>