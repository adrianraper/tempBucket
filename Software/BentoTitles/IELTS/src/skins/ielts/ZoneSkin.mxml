<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		xmlns:ui="com.clarityenglish.ielts.view.zone.ui.*"
		xmlns:tink="ws.tink.spark.containers.*"
		xmlns:flashcomponents="*"
		minWidth="540" minHeight="520" 
		>
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.ielts.view.zone.ZoneView")]
	</fx:Metadata>
	<fx:Declarations>
		<s:Sine id="sineEasing" easeInFraction="0.3"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.clarityenglish.ielts.view.zone.ExerciseEvent;
			
			import org.osmf.net.DynamicStreamingItem;
			import org.osmf.net.DynamicStreamingResource;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			
			protected function onUnitItemRollOver(event:ListEvent):void {
				unitCaption.text = event.item.@caption;
				unitDescription.text = event.item.@description;
			}
			
			protected function onUnitClick(event:MouseEvent):void {
				if (unitList.selectedItem)
					hostComponent.exerciseSelectorPoppedOut = true;
			}
			
			protected function onAccordianChange(event:IndexChangeEvent):void {
				hostComponent.exerciseSelectorPoppedOut = false;
			}
			
			protected function onPopoutExerciseSelected(event:ExerciseEvent):void {
				hostComponent.exerciseSelectorPoppedOut = false;
			}
			
			protected function onAdviceZoneVideoSelect(event:IndexChangeEvent):void {
				
				// #81 If the href is not a simple video file, it might be a dynamic streaming list
				var videoSource:String = hostComponent.href.createRelativeHref(null, adviceZoneVideoList.selectedItem.@href).url;
				
				if (videoSource.indexOf("rss")>0 || videoSource.indexOf("xml")>0) {
					
					hostComponent.onAdviceZoneVideoRSSSelect(videoSource);

				} else {
					adviceZoneVideoPlayer.source = videoSource;
					// #63
					callLater(function():void {
						adviceZoneVideoPlayer.play();
					});
				}
				
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="reading_normal" stateGroups="normalStates,readingStates" />
		<s:State name="writing_normal" stateGroups="normalStates,writingStates" />
		<s:State name="listening_normal" stateGroups="normalStates,listeningStates" />
		<s:State name="speaking_normal" stateGroups="normalStates,speakingStates" />
		
		<s:State name="reading_popped" stateGroups="popoutStates,readingStates" />
		<s:State name="writing_popped" stateGroups="popoutStates,writingStates" />
		<s:State name="listening_popped" stateGroups="popoutStates,listeningStates" />
		<s:State name="speaking_popped" stateGroups="popoutStates,speakingStates" />
	</s:states>
	
	<s:transitions>
		<s:Transition fromState="*" toState="*" interruptionBehavior="stop" autoReverse="true">
			<s:Move target="{popoutExerciseSelector}" />
		</s:Transition>
	</s:transitions>
	
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:BasicLayout />
		</s:layout>
		
		<!-- The left hand side -->
		<s:Group width="50%" rollOver="hostComponent.exerciseSelectorPoppedOut = false" top="35">
			<s:layout>
				<s:VerticalLayout paddingLeft="30" paddingRight="20" paddingTop="10" paddingBottom="10" />
			</s:layout>
			
			<!-- this is for the rotating course selector -->
			<flashcomponents:CourseSelectorWidget id="courseSelectorWidget" />
		</s:Group>
		
		<!-- The popout exercise selector -->
		<ui:PopoutExerciseSelector id="popoutExerciseSelector" href="{hostComponent.href}" courseClass="{hostComponent.courseClass}" width="50%" x.normalStates="{width / 2}" x.popoutStates="0" top="90" height="320" exerciseSelected="onPopoutExerciseSelected(event)" />
		
		<!-- The right hand side -->
		<s:BorderContainer right="0" width="50%" height="100%" backgroundColor="#F2F2F2" cornerRadius="12" top="5" bottom="40" minWidth="510" minHeight="520">
			<s:layout>
				<s:VerticalLayout paddingLeft="20" paddingRight="20" paddingTop="10" paddingBottom="20" />
			</s:layout>
			
			<s:borderStroke>
				<s:SolidColorStroke color="#E4E4E4" weight="1" />
			</s:borderStroke>
			
			<s:HGroup width="100%">
				<s:SWFLoader id="courseIcon" width="30" height="30"
							 source.readingStates="@Embed(source='skins/ielts/assets/assets.swf', symbol='ReadingIcon')"
							 source.writingStates="@Embed(source='skins/ielts/assets/assets.swf', symbol='WritingIcon')"
							 source.listeningStates="@Embed(source='skins/ielts/assets/assets.swf', symbol='ListeningIcon')"
							 source.speakingStates="@Embed(source='skins/ielts/assets/assets.swf', symbol='SpeakingIcon')">
					<s:filters>
						<s:GlowFilter strength="3" blurX="0" blurY="0" color="#AAAAAA" alpha="0.8" />
					</s:filters>
				</s:SWFLoader>
				
				<s:RichText id="courseTitleLabel" fontSize="20"  paddingTop="7" paddingBottom="10"/>
			</s:HGroup>
			
			<s:RichText id="courseDescriptionLabel" width="100%"/>
			
			<!-- The accordian -->
			<tink:Accordion id="accordian" width="100%" height="100%" creationPolicy="all" borderVisible="false" contentBackgroundAlpha="0" easer="{sineEasing}" duration="500" change="onAccordianChange(event)">
				
				<!-- Question zone -->
				<s:NavigatorContent id="questionZoneNavigatorContent" label="Question zone" width="100%">
					<s:VGroup horizontalAlign="center" horizontalCenter="0" paddingTop="15">
						<s:SWFLoader width="450" height="210"
									 source.readingStates="@Embed(source='skins/ielts/assets/questionzone_reading.png')"
									 source.writingStates="@Embed(source='skins/ielts/assets/questionzone_writing.png')"
									 source.listeningStates="@Embed(source='skins/ielts/assets/questionzone_listening.png')"
									 source.speakingStates="@Embed(source='skins/ielts/assets/questionzone_speaking.png')" />
						<s:HGroup horizontalCenter="0" verticalAlign="middle" paddingTop="10" paddingBottom="10" >
							<s:Button id="questionZoneViewButton" label="View" fontSize="12" width="90" height="30" />							  
							<s:Label text="or" />
							<s:Button id="questionZoneDownloadButton" label="Download PDF" fontSize="12" width="150" height="30" left="50" />
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent>
				
				<!-- Advice zone -->
				<s:NavigatorContent id="adviceZoneNavigatorContent" label="Advice zone">
					<s:VGroup left="0" right="0" top="10" bottom="10" horizontalAlign="left" verticalAlign="middle">
						<s:VideoPlayer id="adviceZoneVideoPlayer" autoDisplayFirstFrame="true" width="411" height="231" autoPlay="true" scaleMode="letterbox" />

						<s:List id="adviceZoneVideoList" width="460" horizontalScrollPolicy="off" 
								borderVisible="false" change="onAdviceZoneVideoSelect(event)" >
							<s:layout>
								<s:HorizontalLayout />
							</s:layout>
							
							<s:itemRenderer>
								<fx:Component>
									<s:ItemRenderer>
										<fx:Script>
											<![CDATA[
												override public function set data(value:Object):void {
													super.data = value;
													
													image.source = outerDocument.hostComponent.href.createRelativeHref(null, data.@thumbnail).url;
													
													if (this.selected) {
														imageBorder.visible = true;
													} else {
														imageBorder.visible = false;
													}
												}
											]]>
										</fx:Script>
										<s:Rect id="imageBorder" width="72" height="42" top="-2" left="-2" >
											<s:fill>
												<s:SolidColor color="0xFF0000" />
											</s:fill>
										</s:Rect>
										<s:Image id="image" width="68" height="38" top="0" left="0"/>
									</s:ItemRenderer>
								</fx:Component>
							</s:itemRenderer>
						</s:List>
					</s:VGroup>
				</s:NavigatorContent>
	
				<!-- Practice zone -->
				<s:NavigatorContent id="practiceZoneNavigatorContent" label="Practice zone" width="100%">
					<s:VGroup left="0" right="20" top="0" bottom="0" gap="10">
						<!-- The unit title and description box -->
						<s:Group width="99%">
							<s:Rect width="100%" height="100%">
								<s:fill>
									<s:SolidColor color="#E1E1E1" />
								</s:fill>
							</s:Rect>
							
							<s:VGroup width="100%" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
								<s:Label id="unitCaption" fontSize="14" fontWeight="bold"  />
								<s:RichText id="unitDescription" width="100%" />
							</s:VGroup>
						</s:Group>
						
						<!-- The unit list -->
						<s:Group left="0" right="0" top="5" bottom="5">
							<s:List id="unitList" top="0" bottom="0" borderVisible="false" fontSize="12" itemRollOver="onUnitItemRollOver(event)" click="onUnitClick(event)">
								<s:layout>
									<s:TileLayout requestedColumnCount="2" requestedRowCount="6" orientation="columns" columnWidth="250" verticalGap="15" />
								</s:layout>
								
								<!-- Custom item renderer to render the label (probably not really necessary since its just text...) -->
								<s:itemRenderer>
									<fx:Component>
										<s:ItemRenderer>
											<fx:Script>
												<![CDATA[
													public override function set data(value:Object):void {
														super.data = value;
														captionLabel.text = data.@caption;
													}
												]]>
											</fx:Script>
											<s:Label id="captionLabel" fontSize="12" />
										</s:ItemRenderer>
									</fx:Component>
								</s:itemRenderer>
								
							</s:List>
						</s:Group>
					</s:VGroup>
				</s:NavigatorContent>
				
				<!-- Exam practice -->
				<s:NavigatorContent id="examPracticeNavigatorContent" label="Exam practice" width="100%" >
					<s:layout>
						<s:HorizontalLayout paddingTop="10"/>
					</s:layout>
					<s:SWFLoader source.readingStates="@Embed(source='skins/ielts/assets/assets.swf', symbol='ExamPracticeReading')"
								 source.writingStates="@Embed(source='skins/ielts/assets/assets.swf', symbol='ExamPracticeWriting')"
								 source.speakingStates="@Embed(source='skins/ielts/assets/assets.swf', symbol='ExamPracticeListening')"
								 source.listeningStates="@Embed(source='skins/ielts/assets/assets.swf', symbol='ExamPracticeListening')" />
					
					<s:DataGroup id="examPracticeDataGroup" width="300" >
						<s:layout>
							<s:VerticalLayout paddingLeft="14" gap="0" />
						</s:layout>
						<s:itemRenderer >
							<fx:Component>
								<s:DataRenderer>
									<fx:Script>
										<![CDATA[
											import com.clarityenglish.ielts.view.zone.ExerciseEvent;
											
											public override function set data(value:Object):void {
												super.data = value;
												
												if (data) {
													examPracticeViewButton.label = data.@caption;
												}
											}
											
											protected function onViewButtonClick(event:MouseEvent):void {
												dispatchEvent(new ExerciseEvent(ExerciseEvent.EXERCISE_SELECTED, data.@href));
											}
											
										]]>
									</fx:Script>
									<s:layout>
										<s:VerticalLayout />
									</s:layout>
									
									<s:Button id="examPracticeViewButton" click="onViewButtonClick(event)" width="230" height="30" textAlignLast="left" />
									<ui:DifficultyRenderer id="difficultyRenderer" data="{data}" courseClass="{outerDocument.hostComponent.courseClass}" />
								</s:DataRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:DataGroup>
				</s:NavigatorContent>
								
			</tink:Accordion>
		</s:BorderContainer>
	</s:Group>
	
</s:Skin>