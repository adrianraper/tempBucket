<?xml version="1.0" encoding="utf-8"?>

<!--

	ADOBE SYSTEMS INCORPORATED
	Copyright 2008 Adobe Systems Incorporated
	All Rights Reserved.

	NOTICE: Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark VideoPlayer component.

	 @see spark.components.VideoPlayer

	  @langversion 3.0
	  @playerversion Flash 10
	  @playerversion AIR 1.5
	  @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 alpha.disabledStates="0.5"
			 chromeColor.fullScreenStates="0xCCCCCC"
			 rollOver="onRollOver(event)"
			 rollOut="onRollOut(event)">
	
	<!-- A chrome color of 0xCCCCCC in the fullScreenStates means we ignore the chromeColor property
		 all together as 0xCCCCCC is essentially just a no-op color transform -->

	<!-- host component -->
	<fx:Metadata>
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.VideoPlayer")]
    </fx:Metadata>

	<fx:Script fb:purpose="styling">
		<![CDATA[
			import caurina.transitions.Tweener;
			
			/* Define the skin elements that should not be colorized. */
			//static private const exclusions:Array = ["videoDisplay", "playPauseButton", "scrubBar", "currentTimeDisplay", "timeDivider", "durationDisplay", "volumeBar", "fullScreenButton"];
			static private const exclusions:Array = ["videoDisplay", "playPauseButton", "scrubBar", "volumeBar", "fullScreenButton"];
			
			private var hideControlsTimer:Timer;
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void {
				useChromeColor = true;
				hideControlsTimer = new Timer(1500, 1);
				hideControlsTimer.addEventListener(TimerEvent.TIMER, onTimer, false, 0, true);
				
				super.initializationComplete();
			}
			
			/**
			 * @private
			 */
			override public function get colorizeExclusions():Array {
				return exclusions;
			}
			
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				if (dropShadow)
					dropShadow.visible = getStyle("dropShadowVisible");
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			protected function onRollOver(event:MouseEvent):void {
				hideControlsTimer.stop();
				
				Tweener.removeTweens(controls);
				Tweener.addTween(controls, { alpha: 1, time: 0.3 } );
			}
			
			protected function onRollOut(event:MouseEvent):void {
				hideControlsTimer.reset();
				hideControlsTimer.start();
			}
			
			protected function onTimer(event:TimerEvent):void {
				Tweener.removeTweens(controls);
				Tweener.addTween(controls, { alpha: 0, time: 0.6 } );
			}
			
		]]>

	</fx:Script>

	<!-- states -->
	<s:states>
		<s:State name="uninitialized" stateGroups="bufferingStates, normalStates" />
		<s:State name="loading" stateGroups="bufferingStates, normalStates" />
		<s:State name="ready" stateGroups="readyStates, normalStates" />
		<s:State name="playing" stateGroups="playingStates, normalStates" />
		<s:State name="paused" stateGroups="pausedStates, normalStates" />
		<s:State name="buffering" stateGroups="bufferingStates, normalStates" />
		<s:State name="playbackError" stateGroups="playbackErrorStates, normalStates" />
		<s:State name="disabled" stateGroups="disabledStates, normalStates" />
		<s:State name="uninitializedAndFullScreen" stateGroups="bufferingStates, fullScreenStates" />
		<s:State name="loadingAndFullScreen" stateGroups="bufferingStates, fullScreenStates" />
		<s:State name="readyAndFullScreen" stateGroups="readyStates, fullScreenStates" />
		<s:State name="playingAndFullScreen" stateGroups="playingStates, fullScreenStates" />
		<s:State name="pausedAndFullScreen" stateGroups="pausedStates, fullScreenStates" />
		<s:State name="bufferingAndFullScreen" stateGroups="bufferingStates, fullScreenStates" />
		<s:State name="playbackErrorAndFullScreen" stateGroups="playbackErrorStates, fullScreenStates" />
		<s:State name="disabledAndFullScreen" stateGroups="disabledStates, fullScreenStates" />
	</s:states>

	<!-- drop shadow -->
	<!--- @private -->
	<s:RectangularDropShadow id="dropShadow"
							 blurX="0"
							 blurY="0"
							 alpha="0.32"
							 distance="0"
							 angle="90"
							 color="#131313"
							 left="0"
							 top="0"
							 right="0"
							 bottom="0"
							 excludeFrom="fullScreenStates" />

	<!--- Video and player controls are clipped if they exceed the size of the
		  component, but the drop shadow above is not clipped and sizes to the component.
		  We also set verticalScrollPosition so that when we do clip, rather than clipping
		  off the bottom first, we clip off the top fist.  This is so the player controls
		  are still visible when we start clipping. -->
	<s:Group id="clippedGroup" clipAndEnableScrolling="true" width="320" height="240" verticalScrollPosition="{Math.max(0, 184-clippedGroup.height)}">

		<!-- There's a minimum size for the video and controls.  If we go below that
			 we are clipped. -->
		<s:Group minWidth="263" minHeight="184" left="0" right="0" top="0" bottom="0">

			<!-- background when the videoDisplay doesn't fill its whole spot -->
			<s:Rect bottom="1"
					left="1"
					right="1"
					top="1"
					bottom.fullScreenStates="0"
					left.fullScreenStates="0"
					right.fullScreenStates="0"
					top.fullScreenStates="0">
				<s:fill>
					<s:SolidColor color="0x000000" />
				</s:fill>
			</s:Rect>

			<!--- @copy spark.components.VideoPlayer#videoDisplay -->
			<s:VideoDisplay id="videoDisplay"
							bottom="1"
							left="1"
							right="1"
							top="1"
							bottom.fullScreenStates="0"
							left.fullScreenStates="0"
							right.fullScreenStates="0"
							top.fullScreenStates="0" />

			<!-- video player controls -->
			<s:Group id="controls" left="0" right="0" height="25" bottom="0" bottom.fullScreenStates="150">
				
				<!-- background for scrubbar + the currentTime/duration -->
				<s:Rect radiusX="2" radiusY="2" left.normalStates="0" right.normalStates="0" top.normalStates="0" bottom.normalStates="0" x.fullScreenStates="{playerControls.x}" y.fullScreenStates="{playerControls.y}" width.fullScreenStates="{playerControls.width}" height.fullScreenStates="{playerControls.height}">
					<s:stroke>
						<s:SolidColorStroke color="0x777777" color.fullScreenStates="0x222222" alpha.fullScreenStates="0.66" />
					</s:stroke>
					<s:fill>
						<s:SolidColor color="#000000" alpha="0.3" />
					</s:fill>
				</s:Rect>
				
				<!-- actual controls with a maxWidth in non-fullScreen mode -->
				<!--- @copy spark.components.VideoPlayer#playerControls -->
				<s:Group bottom="0" horizontalCenter="0" left="0" right="0" maxWidth.fullScreenStates="755" id="playerControls">

					<!--- @copy spark.components.VideoPlayer#playPauseButton -->
					<s:ToggleButton id="playPauseButton"
									left="0"
									top="20"
									skinClass="skins.ielts.videoplayer.PlayPauseButtonSkin"
									skinClass.fullScreenStates="spark.skins.spark.mediaClasses.fullScreen.PlayPauseButtonSkin"
									layoutDirection="ltr"
									focusIn="event.target.depth=1"
									focusOut="event.target.depth=0" />

					<!-- scrubbar + the currentTime/duration labels -->
					<s:Group left.normalStates="40" left.fullScreenStates="39" right.normalStates="80" right.fullScreenStates="80" top="0" bottom.normalStates="0" bottom.fullScreenStates="0">

						<!-- scrub bar + currentTime/duration in a HorizontalLayout -->
						<s:Group left="0" right="0" height="23" bottom="0">
							<s:layout>
								<s:HorizontalLayout verticalAlign="middle" gap="1" />
							</s:layout>

							<!-- spacer -->
							<s:Rect width="7" height="1" />

							<!--- @copy spark.components.VideoPlayer#scrubBar -->
							<s:ScrubBar id="scrubBar" width="100%" liveDragging="true" skinClass="skins.ielts.videoplayer.ScrubBarSkin" skinClass.fullScreenStates="spark.skins.spark.mediaClasses.fullScreen.ScrubBarSkin" />

							<!-- spacer -->
							<!--<s:Rect width="8" height="1" />-->

							<!--- @copy spark.components.VideoPlayer#currentTimeDisplay -->
							<!--<s:Label id="currentTimeDisplay" color.fullScreenStates="0xFFFFFF" />-->

							<!--- @private -->
							<!--<s:Label id="timeDivider" text="/" color.fullScreenStates="0xFFFFFF" />-->

							<!--- @copy spark.components.VideoPlayer#durationDisplay -->
							<!--<s:Label id="durationDisplay" color.fullScreenStates="0xFFFFFF" />-->

							<!-- spacer -->
							<!--<s:Rect width="8" height="1" />-->
						</s:Group>

					</s:Group>
					
					<!--- @copy spark.components.VideoPlayer#fullScreenButton -->
					<s:Button id="fullScreenButton"
							  right.normalStates="37"
							  right.fullScreenStates="37"
							  bottom.normalStates="0" bottom.fullScreenStates="0"
							  label="Fullscreen"
							  skinClass="skins.ielts.videoplayer.FullScreenButtonSkin"
							  skinClass.fullScreenStates="spark.skins.spark.mediaClasses.fullScreen.FullScreenButtonSkin"
							  focusIn="event.target.depth=1"
							  focusOut="event.target.depth=0" />
					
					<!--- @copy spark.components.VideoPlayer#volumeBar -->
					<s:VolumeBar id="volumeBar"
								 snapInterval=".01"
								 stepSize=".01"
								 liveDragging="true"
								 right.fullScreenStates="0"
								 bottom.fullScreenStates="0"
								 right.normalStates="0"
								 bottom.normalStates="0"
								 layoutDirection="ltr"
								 skinClass="skins.ielts.videoplayer.VolumeBarSkin"
								 skinClass.fullScreenStates="spark.skins.spark.mediaClasses.fullScreen.VolumeBarSkin"
								 focusIn="event.target.depth=1"
								 focusOut="event.target.depth=0" />
					
				</s:Group>

			</s:Group>
			
			<!-- border -->
			<s:Rect left="0" right="0" top="0" bottom="0" excludeFrom="fullScreenStates">
				<s:stroke>
					<s:SolidColorStroke color="0x131313" />
				</s:stroke>
			</s:Rect>
			
			<!-- buffering -->
			<s:Group left="0" right="0" top="0" bottom="0" includeIn="bufferingStates,ready">
				<s:Rect left="0" right="0" top="0" bottom="0">
					<s:fill>
						<s:SolidColor color="0x000000" alpha="0.75" />
					</s:fill>
				</s:Rect>
				
				<!-- Alfred can replace this with something pretty -->
				<s:Label id="loadingLabel" text="loading..." color="0xFFFFFF" fontSize="12.6" verticalCenter="30" horizontalCenter="4" alpha="0.7" includeIn="ready" />
				<s:Label text="buffering..." color="0xFFFFFF" fontSize="12.6" verticalCenter="30" horizontalCenter="4" alpha="0.7" includeIn="bufferingStates" />
				<s:SWFLoader source="@Embed(source='/skins/ielts/assets/buffering.swf')" verticalCenter="0" horizontalCenter="0"  />
			</s:Group>
			
			<!-- error -->
			<s:Group left="0" right="0" top="0" bottom="0" includeIn="playbackErrorStates">
				<s:Rect left="0" right="0" top="0" bottom="0">
					<s:fill>
						<s:SolidColor color="0x000000" alpha="0.75" />
					</s:fill>
				</s:Rect>
				
				<s:Label text="loading error..." color="0xFFFFFF" fontSize="12.6" verticalCenter="30" horizontalCenter="4" alpha="0.7"  />
			</s:Group>

		</s:Group>
	</s:Group>
</s:SparkSkin>
