<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the middle buttons in a Spark ButtonBar component.  

       @see spark.components.ButtonBar
       @see spark.components.ButtonBarButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="21" minHeight="21" 
                   alpha.disabled="0.5">

    <!-- host component -->
    <fx:Metadata>
        <![CDATA[ 
            /** 
             * @copy spark.skins.spark.ApplicationSkin#hostComponent
             */
            [HostComponent("spark.components.ButtonBarButton")]
        ]]>
    </fx:Metadata>
    
    <fx:Script>
		import spark.components.ButtonBar;
		import mx.events.FlexEvent;
		import spark.components.ButtonBarButton;
		
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */
        override protected function initializationComplete():void {
            useChromeColor = true;
            super.initializationComplete();
        }
		
		/**
		 * Simply defining an icon attribute in the data provider object will display it.
		 * But if I want to manipulate it, I need to do something like this.
		 * Problem is that it thinks hostComponent doesn't have data object.
		 * Works in the sample I used though...
		 */	
		/*
		protected function gr_creationComplete(evt:FlexEvent):void {
			var dataObj:Object = hostComponent.data;
			img.source = dataObj.icon;
			img.width = 25;
		}
        */
       /** 
        * @private
        */     
        override public function get colorizeExclusions():Array {return exclusions;}
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
    
	<s:Group left="0" right="0" top="0" bottom="0">
		<!-- layer 2: fill -->
		<!--- @private -->
		<s:Rect id="fill" left="2" right="1" top="2" bottom="2" topLeftRadiusX="12">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="0xFFFFFF" 
									 alpha="1" />
					<s:GradientEntry color="0xFFFFFF" 
									 alpha="1" />
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
	</s:Group>
	
    <!-- layer 8: icon and text -->
    <!---  @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Label id="labelDisplay"
             textAlign="center"
             verticalAlign="middle"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1"
             left="10" right="10" top="2" bottom="2"
			 color="0x303030"
			 color.selectedUpStates="0x303030"
			 color.over="0x808080"
			 color.up="0xCCCCCC"
			 fontSize="12">
    </s:Label>
	
</s:SparkButtonSkin>
