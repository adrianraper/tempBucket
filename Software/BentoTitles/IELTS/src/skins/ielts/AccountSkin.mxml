<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:local="*">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.ielts.view.account.AccountView")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.clarityenglish.common.vo.content.Title;
			import com.clarityenglish.common.vo.manageable.User;
			
			import org.davekeen.util.DateUtil;
			
			private function formatExamDetails(user:User, type:String):String {
				// If examDate is not set, then default to expiryDate - 1 week
				if (user.examDate) {
					var myDate:Date = user.examDate;
				} else if (user.expiryDate) {
					myDate = DateUtil.dateAdd(DateUtil.ansiStringToDate(user.expiryDate), "d", -7);
				} else {
					myDate = new Date();
				}
				switch (type) {
					case 'date':
						return DateUtil.formatDate(myDate, 'yyyy-MM-dd');
						break;
					case 'hours':
						return DateUtil.formatDate(myDate, 'HH');
						break;
					case 'mins':
						return DateUtil.formatDate(myDate, 'mm');
						break;
				}
				return null;
			}
			
			private function dateChooserInit(user:User):void {
				examDateField.selectedDate = user.examDate;
				// Registration might be a long time ago - not much point being able to select anything in the past
				var selectStartDate:Date = new Date();
				var selectEndDate:Date = DateUtil.dateAdd(selectStartDate, "y", 1);
				examDateField.selectableRange = {rangeStart: selectStartDate, rangeEnd: selectEndDate};
			}
			
			private function formatScreenDate(date:Date):String {
				return DateUtil.formatDate(date, 'd MMMM yyyy');
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="disabled" />
		<s:State name="normal" />

		<s:State name="demo" stateGroups="anonymousStates" />
		<s:State name="fullVersion_anonymous" stateGroups="anonymousStates,fullVersionStates"/>
		<s:State name="fullVersion" stateGroups="fullVersionStates"/>
		<s:State name="lastMinute" />
		<s:State name="homeUser" />
		<s:State name="testDrive" stateGroups="anonymousStates" />
	</s:states>
	
	<s:layout>
		<s:VerticalLayout paddingTop="60" />
	</s:layout>
	<s:HGroup width="100%">
	<s:VGroup width="50%" paddingTop="20" >
		
		<s:Label text="My Profile" fontSize="20" width="100%" />
		<s:Rect left="100" right="0" top="100" bottom="0" width="100%" height="1" >
			<s:fill>
				<s:SolidColor color="0x999999" />
			</s:fill>
		</s:Rect>
		
		<s:Spacer height="5" />
		
		<s:VGroup width="120" height="100%" >	
			<s:Label id="countdownHeading" text="How long until my test?" />
			<local:CountdownDisplay id="countdownDisplay" targetDate="{hostComponent.user.examDate}" />
			
			<s:Spacer height="3" />
			
			<s:HGroup width="100%" height="100%" top="96" >
				<s:VGroup paddingTop="3">

					<s:Label id="countdownLabel" fontWeight="bold"  />
					
					<s:HGroup paddingTop="5">
						<s:VGroup width="100%" height="100%" top="150"  >
							<s:Label text="Date:" verticalAlign="bottom"  />
							<mx:DateField id="examDateField" creationComplete="dateChooserInit(hostComponent.user);" 
										  labelFunction="formatScreenDate" />
						</s:VGroup>
						
						<s:VGroup>
							<s:Label text="Hour:" verticalAlign="bottom"  />
							<s:NumericStepper id="examHours" minimum="0" maximum="23" stepSize="1" 
											  value="{Number(formatExamDetails(hostComponent.user, 'hours'))}" textAlign="center"/>
						</s:VGroup>
						
						<s:VGroup>
							<s:Label text="Minute:" verticalAlign="bottom"  />
							<s:NumericStepper id="examMinutes" minimum="0" maximum="45" stepSize="15" 
											  value="{Number(formatExamDetails(hostComponent.user, 'mins'))}" textAlign="center"/>
						</s:VGroup>
					</s:HGroup>
					
					<s:SWFLoader width="100%" height="100%" 
								 source="{hostComponent.assetFolder}profile_demo.png" 
								 includeIn="demo" />
					
					<s:VGroup paddingTop="13" excludeFrom="anonymousStates" >	
						<s:HGroup>
							<s:Label text="Registered name:" />
							<s:Spacer width="30"/>
							<s:Label text="{hostComponent.user.fullName}" fontWeight="bold" />
						</s:HGroup>
						<s:Spacer height="3" />
						<s:HGroup>
							<s:Label text="Email:"/>
							<s:Spacer width="94"/>
							<s:Label text="{hostComponent.user.email}" fontWeight="bold" />
						</s:HGroup>
						<s:Spacer height="3" />
						<s:HGroup>
							<s:Label text="Account start date:"/>
							<s:Spacer width="22"/>
							<s:Label text="{DateUtil.formatDate(DateUtil.ansiStringToDate(hostComponent.startDate),'d MMMM yyyy')}" fontWeight="bold"/>		
						</s:HGroup>
						<s:Spacer height="3" />
						<s:HGroup>
							<s:Label text="Account expiry date:"/>		
							<s:Spacer width="13"/>
							<s:Label text="{DateUtil.formatDate(DateUtil.ansiStringToDate(hostComponent.expiryDate),'d MMMM yyyy')}" fontWeight="bold"/>
						</s:HGroup>
						<s:Spacer height="3" />
						<s:VGroup includeIn="homeUser" >
							<s:HGroup>
								<s:Label text="Current password:" />
								<s:Spacer width="24"/>
								<s:TextInput id="currentPassword" width="180" />
							</s:HGroup>
							<s:Spacer height="3" />
							<s:HGroup>
								<s:Label text="New password:"  />
								<s:Spacer width="40"/>
								<s:TextInput id="newPassword" width="180"  />
							</s:HGroup>
							<s:Spacer height="3" />
							<s:HGroup>
								<s:Label text="Confirm password:"  />
								<s:Spacer width="22"/>
								<s:TextInput id="confirmPassword" width="180" />
							</s:HGroup>
						</s:VGroup>

					</s:VGroup>
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
		
		<s:Spacer height="3" />
		
		<s:Button id="saveChangesButton" label="Save changes" 
				  excludeFrom="anonymousStates"
				  includeInLayout="{hostComponent.isDirty}"
				  visible="{hostComponent.isDirty}"/>
		
	</s:VGroup>
	
	<s:VGroup width="50%" paddingTop="20" >
		<s:Label text="IELTS Apps" fontSize="20" width="50%" />
		
		<s:Rect left="100" right="0" top="180" bottom="0" width="100%" height="1" >
			<s:fill>
				<s:SolidColor color="0x999999" />
			</s:fill>
		</s:Rect>
		<s:HGroup>
			<s:Group width="202" height="301">
				<s:SWFLoader id="IELTSApp1" width="100%" top="8" />
			</s:Group>
			<s:SWFLoader width="100%" height="100%" source="{hostComponent.assetFolder}widget_demo.png" 
						 includeIn="demo" />
		</s:HGroup>
	
	</s:VGroup>
	</s:HGroup>
	<s:VGroup width="100%" includeIn="testDrive" paddingTop="20">
		<s:Button id="registerInfoButton" width="100%" useHandCursor="true" />
	</s:VGroup>

</s:Skin>