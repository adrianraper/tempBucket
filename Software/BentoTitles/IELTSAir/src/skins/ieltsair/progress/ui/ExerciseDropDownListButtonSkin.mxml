<?xml version="1.0" encoding="utf-8"?>

<!--

	ADOBE SYSTEMS INCORPORATED
	Copyright 2010 Adobe Systems Incorporated
	All Rights Reserved.

	NOTICE: Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the anchor button on a Spark DropDownList component.

 @see spark.components.DropDownList
 @see spark.skins.spark.DropDownListSkin

 @langversion 3.0
 @playerversion Flash 10
 @playerversion AIR 1.5
 @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:fb="http://ns.adobe.com/flashbuilder/2009">

    <fx:Metadata>
		<![CDATA[
        /**
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
	</fx:Metadata>

    <fx:Script fb:purpose="styling">
		<![CDATA[
        import mx.utils.ObjectUtil;
        /* Define the skin elements that should not be colorized.
         For dropDownList buttons, the graphics are colorized but the arrow is not. */
        static private const exclusions:Array = ["arrow"];

        private var cornerRadius:Number = 2;

        /**
         * @private
         */
        override public function get colorizeExclusions():Array {
            return exclusions;
        }

        /* Define the symbol fill items that should be colored by the "symbolColor" style. */
        static private const symbols:Array = [];

        /**
         * @private
         */
        override public function get symbolItems():Array {
            return symbols
        };

        /**
         * @private
         */
        override protected function initializationComplete():void {
            useChromeColor = true;
            super.initializationComplete();

            hostComponent.addEventListener("contentChange", onContentChange, false, 0, true);
        }

        /**
         *  @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            var cr:Number = getStyle("cornerRadius");

            if (cornerRadius != cr) {
                cornerRadius = cr;
                fill.radiusX = cornerRadius;
                border.radiusX = cornerRadius;
            }

            arrowGroup.left = hostComponent.content ? 10 : (unscaledWidth - 11) / 2;

            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }

        protected function onContentChange(event:Event):void {
            //arrowGroup.horizontalCenter = hostComponent.content ? null : 0;
            invalidateDisplayList();
        }
        ]]>
	</fx:Script>

    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
    <!-- layer 2: fill -->
    <!--- @private -->
    <s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="4">
        <s:fill>
           <s:SolidColor color="#FFFFFF" />
        </s:fill>
    </s:Rect>

    <!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <!--- @private -->
    <s:Rect id="border" left="0" right="0" top="0" bottom="0" radiusX="4">
        <s:stroke>
            <s:LinearGradientStroke rotation="90" weight="1">
                <s:GradientEntry color="0x999999" alpha.down="0.6375" />
                <s:GradientEntry color="0x999999" alpha.down="0.85" />
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>

    <!-- layer 8: arrow -->
    <!--- The arrow graphic displayed in the anchor button. -->
    <s:Group id="arrowGroup" verticalCenter="0">
        <s:Ellipse y="-0.000976563" width="11" height="11" top="5" bottom="5">
            <s:fill>
                <s:SolidColor color="#333333" />
            </s:fill>
        </s:Ellipse>

        <s:Path id="arrow" top="8" left="2.7" data="M5.16602 3.2793L8.00781 3.2793 6.58691 5.73828 5.16504 8.19922 3.74707 5.73828 2.32813 3.2793 5.16602 3.2793Z">
            <s:fill>
                <s:SolidColor color="#FFFFFF" />
            </s:fill>
        </s:Path>
    </s:Group>
</s:SparkSkin>
