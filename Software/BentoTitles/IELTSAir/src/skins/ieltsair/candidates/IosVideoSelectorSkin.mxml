<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:candidates="skins.ielts.assets.candidates.*" 
		xmlns:players="com.clarityenglish.controls.video.players.*" 
		xmlns:candidates1="skins.ieltsair.assets.candidates.*"
		creationComplete="onCreationComplete(event)" width="100%" height="100%" xmlns:candidates2="com.clarityenglish.ieltsair.view.candidates.*">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.controls.video.VideoSelector")]
	</fx:Metadata>
	
	<fx:Declarations>
		<s:Animate id="openingScreenLeftSlide" duration="700" target="{openingScreenGroup}" effectStart="onSlideStart(event)" effectEnd="onSlideEnd(event)" >
			<s:SimpleMotionPath property="left" valueBy="{-320-width/2}"/>
		</s:Animate>
		
		<s:Animate id="openingScreenRightSlide" duration="700" target="{openingScreenGroup}" effectStart="onSlideStart(event)" effectEnd="onSlideEnd(event)" >
			<s:SimpleMotionPath property="left" valueBy="{320+width/2}"/>
		</s:Animate>
		
		<s:Animate id="openingScreenFadeIn" duration="700">
			<s:SimpleMotionPath property="alpha" valueFrom="0" valueTo="1" />
		</s:Animate>
		
		<s:Animate id="openingScreenFadeOut" duration="700">
			<s:SimpleMotionPath property="alpha" valueFrom="1" valueTo="0" />
		</s:Animate>
		
		<s:Animate id="videoListGroupExpand" duration="600" target="{videoListGroup}">
			<s:SimpleMotionPath property="right" valueTo="0" />
		</s:Animate>
		
		<s:Animate id="videoListGroupCollapse" duration="600" target="{videoListGroup}">
			<s:SimpleMotionPath property="right" valueTo="-218" />
		</s:Animate>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.clarityenglish.ielts.view.candidates.ui.CandidatesChannelListRenderer;
			import com.clarityenglish.ieltsair.view.candidates.VideoListItemRenderer;
			import com.googlecode.bindagetools.Bind;
			
			import mx.effects.Tween;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.BusyIndicator;
			import spark.components.VideoPlayer;
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var videoListIndex:Number = 0;
			
			private var isExpandListOpen:Boolean;
			
			protected function onCreationComplete(event:FlexEvent):void {
				stage.addEventListener(MouseEvent.CLICK, onStageClick);
				videoList.addEventListener(IndexChangeEvent.CHANGE, onVideoListIndexChange);
				var videoListItemRenderer:ClassFactory = new ClassFactory(VideoListItemRenderer);
				videoListItemRenderer.properties = {copyProvider: hostComponent.copyProvider};
				videoList.itemRenderer = videoListItemRenderer;
				addEventListener(Event.RESIZE, onResize);
				
				number1Red.visible = true;
				openingScreenGroup.left = width/2 - 320;
				openingScreenGroup.visible = false;
				
				candidatesVideoDescriptionLabel.text = hostComponent.copyProvider.getCopyForId("candidatesVideoDescription0");
				videoListCaptionLabel.text = hostComponent.copyProvider.getCopyForId("videoListCaptionLabel");
				
				Bind.fromProperty(videoList, "dataProvider").toFunction(function():void {
					callLater(
						function():void {
							if (hostComponent.videoCollection) {
								videoList.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE));
								videoPlayer.placeholderSource = hostComponent.href.rootPath + "/" + hostComponent.videoCollection.getItemAt(0).attribute("poster");
							}
						}
					);		
				});

				// For notifying R2I candidate video visible after sliding
				Bind.fromProperty(videoPlayer, "isLocationChanged").toFunction(function(isLocationChanged:Boolean):void {
					if (isLocationChanged && videoList.dataProvider) {
						videoPlayer.visible = true;
						busyIndicator.visible = false;
					}
				});
			}
			
			protected function previousVideoButtonClick(event:MouseEvent):void
			{
				videoListIndex = videoListIndex - 1;
				openingScreenRightSlide.play();
				openingScreenFadeIn.target = getopeningScreenSWFLoader(videoListIndex);
				openingScreenFadeIn.play();
				openingScreenFadeOut.target = getopeningScreenSWFLoader(videoListIndex + 1);
				openingScreenFadeOut.play();
			}
			
			protected function nextVideoButtonClick(event:MouseEvent):void
			{	
				videoListIndex = videoListIndex + 1;
				openingScreenLeftSlide.play();
				openingScreenFadeIn.target = getopeningScreenSWFLoader(videoListIndex);
				openingScreenFadeIn.play();
				openingScreenFadeOut.target = getopeningScreenSWFLoader(videoListIndex - 1);
				openingScreenFadeOut.play();

			}
			
			protected function onVideoListIndexChange(event:Event):void {
				videoListIndex = videoList.selectedIndex;
				candidatesVideoTitleLabel.text = hostComponent.copyProvider.getCopyForId("candidatesVideoTitle" + videoListIndex);
				candidatesVideoDescriptionLabel.text = hostComponent.copyProvider.getCopyForId("candidatesVideoDescription" + videoListIndex);
				
				if (videoList.selectedIndex == -1 || videoList.selectedIndex == 0) {
					previousVideoButton.enabled = false;
				} else {
					previousVideoButton.enabled = true;
				}
				
				if (videoList.selectedIndex ==  hostComponent.videoCollection.length - 1) {
					nextVideoButton.enabled = false;
				} else {
					nextVideoButton.enabled = true;
				}

				videoPlayer.placeholderSource = hostComponent.href.rootPath + "/" + hostComponent.videoCollection.getItemAt(videoListIndex).attribute("poster");
			}
			
			protected function onSlideEnd(event:EffectEvent):void
			{
				openingScreenGroup.visible = false;
				busyIndicator.visible = true;
			}
			
			protected function onSlideStart(event:EffectEvent):void
			{
				openingScreenGroup.visible = true;
				videoPlayer.visible = false;
				previousVideoButton.enabled = false;				
				nextVideoButton.enabled = false;
				videoPlayer.isLocationChanged = false;
				busyIndicator.visible = false;

				videoList.selectedIndex = videoListIndex;
				videoList.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE));
			}
			
			protected function onPlayButtonClick(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				videoList.selectedIndex = videoListIndex;
				videoList.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE, true));
			}
			
			protected function onResize(event:Event):void {
				if (videoListIndex == 0) {
					openingScreenGroup.left = width/2 - 320;
				} else {
					openingScreenGroup.left = -(640 * videoListIndex + (width/2 - 320) * (videoListIndex - 1));
				}			
			}
			
			protected function getopeningScreenSWFLoader(index:Number):SWFLoader {
				switch (index) {
					case 0:
						return openingScreen1;
					case 1:
						return openingScreen2;
					case 2:
						return openingScreen3;
					case 3:
						return openingScreen4;
					case 4:
						return openingScreen5;
					case 5:
						return openingScreen6;
					case 6:
						return openingScreen7;
					default:
						return null;
				}
			}
			
			protected function onExpandButtonClick(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				videoListGroupExpand.play();

				openingScreenGroup.visible = true;
				//videoPlayButton.visible = true;
				videoPlayer.visible = false;
				videoListExpandButton.visible = false;
				previousVideoButton.visible = false;
				nextVideoButton.visible = false;
				isExpandListOpen = true;
			}
			
			protected function onStageClick(event:MouseEvent):void {
				if (event.target != videoListExpandButton) {
					if (isExpandListOpen) {
						videoListGroupCollapse.play();
						videoPlayer.visible = true;
						videoListExpandButton.visible = true;
						previousVideoButton.visible = true;
						nextVideoButton.visible = true;
						isExpandListOpen = false;
					}		
				}
			}
		]]>
	</fx:Script>

	<s:Group verticalCenter="-236" horizontalCenter="-310">
		<candidates:number1red id="number1Red" visible="{videoListIndex == 0}" />
		<candidates:number2red visible="{videoListIndex == 1}"/>
		<candidates:number3red visible="{videoListIndex == 2}"/>
		<candidates:number4red visible="{videoListIndex == 3}"/>
		<candidates:number5red visible="{videoListIndex == 4}"/>
		<candidates:number6red visible="{videoListIndex == 5}"/>
		<candidates:number7red visible="{videoListIndex == 6}"/>
	</s:Group>
	
	<!--video title-->
	<s:HGroup horizontalCenter="-165" verticalCenter="-232" width="250" gap="0">
		<s:Label id="candidatesVideoTitleFixedLabel" fontSize="16" text="{hostComponent.copyProvider.getCopyForId('candidatesVideoTitleFixedLabel')}" />
		<s:Label id="candidatesVideoTitleLabel" fontSize="18" fontWeight="bold" text="{hostComponent.copyProvider.getCopyForId('candidatesVideoTitle' + videoListIndex)}" left="0" />
	</s:HGroup>
	
	<s:Group verticalCenter="-80" horizontalCenter="390">
		<!-- Channel list -->
		<s:List id="channelList" height="160" width="100" horizontalScrollPolicy="off" itemRenderer="com.clarityenglish.ielts.view.candidates.ui.CandidatesChannelListRenderer" buttonMode="true" useHandCursor="true">
			<s:layout>
				<s:TileLayout columnWidth="50" rowHeight="35" verticalGap="8" />
			</s:layout>
		</s:List>
		<s:Button id="scriptButton" top="172" width="50" height="45" />
	</s:Group>
	
	<s:HGroup verticalCenter="-30" horizontalCenter="0" gap="40">
		<s:VGroup paddingTop="130">
			<s:Button id="previousVideoButton" verticalCenter="0" click="previousVideoButtonClick(event)" enabled="false" buttonMode="true" useHandCursor="true" />
		</s:VGroup>		
		
		<s:Group>
			<!-- The video players -->
			<!-- Cannot bind visible with video list selection for the player will keep flashing on screen-->
			<players:WebViewVideoPlayer id="videoPlayer" width="640" height="360" visible="false" />
			<!--players:OSMFVideoPlayer id="videoPlayer" width="640" height="360" /-->
			
			<!-- Placeholder image -->
			<!--s:Image id="placeholderImage" source="{hostComponent.placeholderSource}" visible="{videoList.selectedItem == null}" /-->
		</s:Group>
		
		<s:VGroup paddingTop="130">
			
			<s:Button id="nextVideoButton" click="nextVideoButtonClick(event)" buttonMode="true" useHandCursor="true" />
		</s:VGroup>	
	</s:HGroup>
	
	<s:HGroup id="openingScreenGroup" height="360" verticalCenter="-30" gap="{width/2-320}">
		<s:SWFLoader id="openingScreen1" width="640" height="360" source="@Embed(source='skins/ielts/assets/candidates/openingScreen1.jpg')" />
		<s:SWFLoader id="openingScreen2" width="640" height="360" source="@Embed(source='skins/ielts/assets/candidates/openingScreen2.jpg')" />
		<s:SWFLoader id="openingScreen3" width="640" height="360" source="@Embed(source='skins/ielts/assets/candidates/openingScreen3.jpg')" />
		<s:SWFLoader id="openingScreen4" width="640" height="360" source="@Embed(source='skins/ielts/assets/candidates/openingScreen4.jpg')" />
		<s:SWFLoader id="openingScreen5" width="640" height="360" source="@Embed(source='skins/ielts/assets/candidates/openingScreen5.jpg')" />
		<s:SWFLoader id="openingScreen6" width="640" height="360" source="@Embed(source='skins/ielts/assets/candidates/openingScreen6.jpg')" />
		<s:SWFLoader id="openingScreen7" width="640" height="360" source="@Embed(source='skins/ielts/assets/candidates/openingScreen7.jpg')" />
	</s:HGroup>
	
	<candidates:videoframe verticalCenter="-30" horizontalCenter="0" />
	
	<!--video description-->
	<s:HGroup verticalCenter="190" horizontalCenter="0" width="630" height="50">
		<s:Label id="candidatesVideoDescriptionLabel" width="100%"/>
	</s:HGroup>
	
	<!--video list-->
	<s:Button id="videoListExpandButton" click="onExpandButtonClick(event)" top="50" right="-10" label="{hostComponent.copyProvider.getCopyForId('videoListExpandButton')}" fontWeight="bold" />
	<s:Group id="videoListGroup" right="-218" width="218" height="100%">
		<!--video list bar-->
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="#404041" alpha="0.9" />
			</s:fill>
		</s:Rect>
		
		<s:Label id="videoListCaptionLabel" top="50" horizontalCenter="0" color="#FFFFFF" fontSize="13" />
		<!-- Video list -->
		<s:List id="videoList" left="0" top="70" bottom="100" minHeight="0" minWidth="0" requireSelection="true" selectedIndex="0">
			<s:layout>
				<s:VerticalLayout gap="5" />
			</s:layout>
		</s:List>
	</s:Group>

	<!--s:Button id="videoPlayButton" click="onPlayButtonClick(event)" horizontalCenter="0" verticalCenter="-35" label="Click here to watch the {hostComponent.copyProvider.getCopyForId('candidatesVideoTitle' + videoListIndex)} video." buttonMode="true" useHandCursor="true" /-->

	<s:Rect width="100%" height="100%" visible="{videoList.dataProvider == null}">
		<s:fill>
			<s:SolidColor color="0x000000" alpha="0.5"/>
		</s:fill>
	</s:Rect>
	<s:BusyIndicator id="busyIndicator" verticalCenter="-30" horizontalCenter="0" symbolColor="0x333333" visible="true" />

</s:Skin>
