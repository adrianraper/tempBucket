<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:local="*"
		xmlns:account="skins.ieltsair.account.*"
		xmlns:components="com.clarityenglish.components.*" xmlns:ui="com.clarityenglish.ielts.view.account.ui.*">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.ielts.view.account.AccountView")]
	</fx:Metadata>

	<fx:Style>
		.dfStyle
		{
			skin: ClassReference("skins.ieltsair.account.DateFieldSkin");
			upSkin: ClassReference(null);
			overSkin: ClassReference(null);
			downSkin: ClassReference(null);
			disabledSkin: ClassReference(null);
			contentBackgroundColor: #FFFFFF;
			paddingLeft: 5;
			paddingRight: 5;
			paddingTop: 5;
			paddingBottom: 5;
		}

		.myDateChooserStyles {
			/* Previous Month */
			prevMonthSkin: ClassReference("skins.ieltsair.account.PrevMonthSkin");

			/* Next Month */
			nextMonthSkin: ClassReference("skins.ieltsair.account.NextMonthSkin");
		}
	</fx:Style>

	<fx:Script>
		<![CDATA[
			import com.clarityenglish.common.model.CopyProxy;
			import com.clarityenglish.common.vo.manageable.User;
			
			import org.davekeen.util.DateUtil;
			
			private function formatExamDetails(user:User, type:String):String {
				// If examDate is not set, then default to expiryDate - 1 week
				if (user.examDate) {
					var myDate:Date = user.examDate;
				} else if (user.expiryDate) {
					myDate = DateUtil.dateAdd(DateUtil.ansiStringToDate(user.expiryDate), "d", -7);
				} else {
					myDate = new Date();
				}
				switch (type) {
					case 'date':
						return DateUtil.formatDate(myDate, 'yyyy-MM-dd');
						break;
					case 'hours':
						return DateUtil.formatDate(myDate, 'HH');
						break;
					case 'mins':
						return DateUtil.formatDate(myDate, 'mm');
						break;
				}
				return null;
			}
			
			private function dateChooserInit(user:User):void {
				examDateField.selectedDate = user.examDate < new Date() ? null : user.examDate;
				// Registration might be a long time ago - not much point being able to select anything in the past
				var selectStartDate:Date = new Date();
				var selectEndDate:Date = DateUtil.dateAdd(selectStartDate, "y", 1);
				examDateField.selectableRange = {rangeStart: selectStartDate, rangeEnd: selectEndDate};
			}
			
			private function formatScreenDate(date:Date):String {
				if (date) {
					var objReplace:Object = new Object();
					//trace("date's day is "+date.date);
					//trace("date's month is "+date.month);
					objReplace.day = date.date;
					if (hostComponent.copyProvider.getLanguageCode() != "ZH") {
						objReplace.month = DateUtil.formatDate(date, 'MMMM');
					} else {
						objReplace.month = DateUtil.formatDate(date, 'MM');
					}
					objReplace.year = date.fullYear;
					return hostComponent.hostCopyProvider.getCopyForId("dateFormatLabel", objReplace);
				}
				
				return '';
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="disabled" />
		<s:State name="normal" />

		<s:State name="demo" stateGroups="anonymousStates" />
		<s:State name="fullVersion_anonymous" stateGroups="anonymousStates,fullVersionStates" />
		<s:State name="fullVersion" stateGroups="fullVersionStates" />
		<s:State name="lastMinute" />
		<s:State name="homeUser" stateGroups="fullVersionStates" />
		<s:State name="testDrive" stateGroups="anonymousStates" />
	</s:states>

	<fx:Declarations>
		<s:DropShadowFilter id="dropShadowFilter" color="#CCCCCC" blurX="5" blurY="5" alpha="0.75" distance="1" angle="180" knockout="false"/>
	</fx:Declarations>

	<s:HGroup width="100%" height="100%" gap="10">
		<s:VGroup paddingTop="130" paddingLeft="25" filters="{dropShadowFilter}">
			<s:Group width="328" height="490">
				<s:Rect left="0" right="0" top="0" bottom="0" radiusX="6" radiusY="6">
					<s:fill>
						<s:SolidColor color="#F1F1F3"/>
					</s:fill>
					<s:stroke>
						<s:LinearGradientStroke rotation="90" weight="3">
							<s:GradientEntry color="#FFFFFF" ratio="0.3"/>
							<s:GradientEntry color="#E0E0E0" ratio="1"/>
						</s:LinearGradientStroke>
					</s:stroke>
				</s:Rect>

				<s:VGroup top="20" width="300" height="100%" horizontalCenter="0" gap="17">
					<s:VGroup gap="10">
						<s:Label id="countdownHeadingLabel" fontWeight="bold" fontSize="12" />
						<s:HGroup>
							<s:VGroup width="100%" height="100%" top="150">
								<s:Label id="dateLabel" verticalAlign="bottom" fontSize="12" />
								<s:Group>
									<s:Rect width="150" height="22">
										<s:fill>
											<s:SolidColor color="#FFFFFF" />
										</s:fill>
										<s:stroke>
											<mx:SolidColorStroke color="#333333" />
										</s:stroke>
									</s:Rect>
									<mx:DateField id="examDateField" width="180" creationComplete="dateChooserInit(hostComponent.user);" formatString="DD MMMM YYYY" fontFamily="Verdana" interactionMode="touch" styleName="dfStyle" dateChooserStyleName="myDateChooserStyles" todayColor="#FFFFFF" />
								</s:Group>
							</s:VGroup>
							<s:VGroup>
								<s:Label id="hourLabel" verticalAlign="bottom" fontSize="12" />
								<s:NumericStepper id="examHours" minimum="0" maximum="23" stepSize="1"
												  value="{Number(formatExamDetails(hostComponent.user, 'hours'))}"
												  textAlign="center" />
							</s:VGroup>

							<s:VGroup>
								<s:Label id="minuteLabel" verticalAlign="bottom" fontSize="12" />
								<s:NumericStepper id="examMinutes" minimum="0" maximum="45" stepSize="15"
												  value="{Number(formatExamDetails(hostComponent.user, 'mins'))}"
												  textAlign="center" />
							</s:VGroup>
						</s:HGroup>
					</s:VGroup>
					<s:Label id="countdownLabel" paddingTop="3" fontWeight="bold" fontSize="12" />
					<local:CountdownDisplay id="countdownDisplay" targetDate="{hostComponent.user.examDate}"/>

					<s:SWFLoader width="100%" height="100%"
								 source="{hostComponent.assetFolder}profile_demo.png"
								 includeIn="demo"/>
					<s:VGroup width="100%" horizontalCenter="0" paddingTop="3" excludeFrom="anonymousStates">
						<s:Rect width="108%" height="1">
							<s:fill>
								<s:SolidColor color="0x999999"/>
							</s:fill>
						</s:Rect>
					</s:VGroup>
					<!-- This is the user's details section -->
					<s:VGroup width="100%" horizontalCenter="0" excludeFrom="anonymousStates" paddingTop="3" gap="13">
						<s:HGroup width="100%">
							<s:Label id="registeredNameLabel" fontSize="12"/>
							<s:Spacer width="100%"/>
							<s:Label text="{hostComponent.user.fullName}" fontWeight="bold" fontSize="12"
									 textAlign="right"/>
						</s:HGroup>
						<s:HGroup width="100%">
							<s:Label id="emailLabel" fontSize="12"/>
							<s:Spacer width="100%"/>
							<s:Label text="{hostComponent.user.email}" fontWeight="bold" fontSize="12"
									 textAlign="right"/>
						</s:HGroup>
						<!-- gh#38 -->
						<s:HGroup width="100%" visible="{hostComponent.startDate != null}"
								  includeInLayout="{hostComponent.startDate != null}">
							<s:Label id="accountStartDateLabel" fontSize="11"/>
							<s:Spacer width="100%"/>
							<s:Label id="startDateLabel" fontWeight="bold" fontSize="12" textAlign="right"/>
						</s:HGroup>
						<s:HGroup width="100%" visible="{hostComponent.expiryDate != null}"
								  includeInLayout="{hostComponent.expiryDate != null}">
							<s:Label id="accountExpiryDateLabel" fontSize="12"/>
							<s:Spacer width="100%"/>
							<s:Label id="endDateLabel" fontWeight="bold" fontSize="12" textAlign="right"/>
						</s:HGroup>
					</s:VGroup>

					<s:VGroup width="100%" horizontalAlign="center" paddingTop="4" gap="13" includeIn="fullVersionStates, lastMinute">
						<s:VGroup paddingTop="3" width="100%" height="10">
							<s:Rect width="100%" height="1">
								<s:fill>
									<s:SolidColor color="0x999999"/>
								</s:fill>
							</s:Rect>
						</s:VGroup>
						<s:Group width="100%" height="115" filters="{dropShadowFilter}">
							<s:Rect width="100%" top="0" bottom="0" radiusX="6" radiusY="6">
								<s:fill>
									<s:SolidColor color="#F1F1F3"/>
								</s:fill>
								<s:stroke>
									<s:LinearGradientStroke rotation="90" weight="3">
										<s:GradientEntry color="#FFFFFF" ratio="0.3"/>
										<s:GradientEntry color="#E0E0E0" ratio="1"/>
									</s:LinearGradientStroke>
								</s:stroke>
							</s:Rect>
							<s:Image source="@Embed(source='skins/ielts/assets/studyplannerBackground.png')" left="3"
									 right="4" top="3" bottom="3" fillMode="clip"/>
							<s:HGroup width="100%" height="100%" paddingLeft="10" paddingRight="10" verticalAlign="middle">
								<s:VGroup width="60%" height="100%" verticalAlign="middle" gap="8">
									<s:VGroup width="100%" gap="6">
										<s:Label id="studyPlannerCaptionLabel" fontSize="14" fontWeight="bold"
												 color="#08446B"/>
										<s:Label id="studyPalnnerDescriptionLabel" width="100%" fontSize="10" color="#08446B"/>
									</s:VGroup>
									<s:Rect height="1" width="160">
										<s:fill>
											<s:SolidColor color="#A3A3A2"/>
										</s:fill>
									</s:Rect>
									<s:Button id="studyPlannerDownloadButton" width="160" height="30" fontSize="11"
											  useHandCursor="true" buttonMode="true"/>
								</s:VGroup>
								<s:VGroup width="35%" height="100%" verticalAlign="middle" horizontalAlign="center">
									<s:SWFLoader source="@Embed(source='skins/ielts/assets/studyPlanner.png')"
												 scaleX="0.3" scaleY="0.3" />
								</s:VGroup>
							</s:HGroup>
						</s:Group>
					</s:VGroup>
					<!--<s:Button id="saveChangesButton" width="135" height="30"-->
							  <!--excludeFrom="anonymousStates"-->
							  <!--includeInLayout="{hostComponent.isDirty}"-->
							  <!--visible="{hostComponent.isDirty}" useHandCursor="true" buttonMode="true" />-->
				</s:VGroup>
			</s:Group>
		</s:VGroup>

		<!--gh#11 Language Code-->
		<!--ui:GradeWidget right="72" top="168" /-->

		<s:VGroup paddingTop="130" filters="{dropShadowFilter}">
			<s:Group width="636" height="490">
				<s:Rect left="0" right="0" top="0" bottom="0" radiusX="6" radiusY="6">
					<s:fill>
						<s:SolidColor color="#F1F1F3"/>
					</s:fill>
					<s:stroke>
						<s:LinearGradientStroke rotation="90" weight="3">
							<s:GradientEntry color="#FFFFFF" ratio="0.3" />
							<s:GradientEntry color="#E0E0E0" ratio="1" />
						</s:LinearGradientStroke>
					</s:stroke>
				</s:Rect>

				<s:VGroup width="100%" top="15" gap="10">
					<s:Label id="calculatorLabel" paddingLeft="20" fontWeight="bold"/>
					<s:HGroup id="calCulatorGroup" paddingLeft="15" paddingTop="-3" gap="10">
						<ui:OverallScoreCalculator width="300" height="300" copyProvider="{hostComponent.copyProvider}" isPlatformTablet="true" />
						<ui:ListeningReadingScoreCalculator width="300" height="300" copyProvider="{hostComponent.copyProvider}" />
					</s:HGroup>
					<s:Label id="studyGuideLabel" paddingLeft="20" fontWeight="bold"/>
					<s:VGroup width="100%" paddingLeft="-3" paddingTop="-18">
						<s:List id="studyGuideList" width="100%" height="147" borderVisible="false" contentBackgroundAlpha="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">
							<s:layout>
								<s:HorizontalLayout gap="0"/>
							</s:layout>
							<s:itemRenderer>
								<fx:Component>
									<s:ItemRenderer autoDrawBackground="false">
										<fx:Script>
											<![CDATA[
												import com.clarityenglish.bento.BentoApplication;
												import com.clarityenglish.ielts.IELTSApplication;

												override public function set data(value:Object):void {
													super.data = value;

													switch (outerDocument.hostComponent.productVersion) {
														case IELTSApplication.LAST_MINUTE:
															if (itemIndex > 0 && itemIndex < 5) {
																studyGuideButton.enabled = true;
															} else {
																studyGuideButton.enabled = false;
															}
															break;
														case IELTSApplication.TEST_DRIVE:
														case BentoApplication.DEMO:
															if (itemIndex == 1) {
																studyGuideButton.enabled = true;
															} else {
																studyGuideButton.enabled = false;
															}
															break;
														default:
															studyGuideButton.enabled = true;
													}
												}
											]]>
										</fx:Script>
										<ui:StudyGuideButton id="studyGuideButton" itemIndex="{itemIndex}"
															 linkSource="{outerDocument.hostComponent.copyProvider.getCopyForId('studyGuideButtonLink' + outerDocument.hostComponent.productVersion + (itemIndex + 1))}" buttonMode="true" useHandCursor="true"/>
									</s:ItemRenderer>
								</fx:Component>
							</s:itemRenderer>
						</s:List>
					</s:VGroup>
				</s:VGroup>
				<!--s:SWFLoader width="100%" height="100%" source="{hostComponent.assetFolder}widget_demo.png"
                             includeIn="demo" /-->
			</s:Group>
		</s:VGroup>
	</s:HGroup>

</s:Skin>
