<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:local="*"
		xmlns:account="skins.ieltsair.account.*"
		xmlns:components="com.clarityenglish.components.*" xmlns:ui="com.clarityenglish.ielts.view.account.ui.*">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.ielts.view.account.AccountView")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import com.clarityenglish.common.model.CopyProxy;
			import com.clarityenglish.common.vo.manageable.User;
			
			import org.davekeen.util.DateUtil;
			
			private function formatExamDetails(user:User, type:String):String {
				// If examDate is not set, then default to expiryDate - 1 week
				if (user.examDate) {
					var myDate:Date = user.examDate;
				} else if (user.expiryDate) {
					myDate = DateUtil.dateAdd(DateUtil.ansiStringToDate(user.expiryDate), "d", -7);
				} else {
					myDate = new Date();
				}
				switch (type) {
					case 'date':
						return DateUtil.formatDate(myDate, 'yyyy-MM-dd');
						break;
					case 'hours':
						return DateUtil.formatDate(myDate, 'HH');
						break;
					case 'mins':
						return DateUtil.formatDate(myDate, 'mm');
						break;
				}
				return null;
			}
			
			private function dateChooserInit(user:User):void {
				examDateField.selectedDate = user.examDate;
				// Registration might be a long time ago - not much point being able to select anything in the past
				var selectStartDate:Date = new Date();
				var selectEndDate:Date = DateUtil.dateAdd(selectStartDate, "y", 1);
				examDateField.selectableRange = {rangeStart: selectStartDate, rangeEnd: selectEndDate};
			}
			
			private function formatScreenDate(date:Date):String {
				if (date && CopyProxy.languageCode == "ZH") {
					var objReplace:Object = new Object();
					//trace("date's day is "+date.date);
					//trace("date's month is "+date.month);
					objReplace.day = date.date;
					objReplace.month = date.month + 1;
					objReplace.year = date.fullYear;
					return hostComponent.hostCopyProvider.getCopyForId("dateFormatLabel", objReplace);
				} else {
					return DateUtil.formatDate(date, 'd MMMM yyyy');
				}
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="disabled" />
		<s:State name="normal" />

		<s:State name="demo" stateGroups="anonymousStates" />
		<s:State name="fullVersion_anonymous" stateGroups="anonymousStates,fullVersionStates" />
		<s:State name="fullVersion" stateGroups="fullVersionStates" />
		<s:State name="lastMinute" />
		<s:State name="homeUser" />
		<s:State name="testDrive" stateGroups="anonymousStates" />
	</s:states>

	<fx:Declarations>
		<s:DropShadowFilter id="dropShadowFilter" color="#CCCCCC" blurX="5" blurY="5" alpha="0.75" distance="1" angle="180" knockout="false"/>
	</fx:Declarations>

	<s:HGroup width="100%" height="100%" gap="20">
		<s:Group width="40%" height="100%">
			<!--gh#11 Language Code?-->
			<account:HowLongGraphic left="30" top="150"/>
			<local:CountdownDisplay id="countdownDisplay" targetDate="{hostComponent.user.examDate}" left="164" top="165" />

			<!--gh#11 Language Code-->
			<s:Label id="setTestDateLabel" fontSize="17" color="#082F67" left="20" top="285" />

			<s:HGroup left="20" top="315">
				<s:Label id="testDateLabel" verticalAlign="bottom" fontSize="15" paddingTop="5" paddingRight="4" />
				<mx:DateField id="examDateField" width="150" creationComplete="dateChooserInit(hostComponent.user)" labelFunction="formatScreenDate" />
				<s:NumericStepper id="examHours" minimum="0" maximum="23" stepSize="1" value="{Number(formatExamDetails(hostComponent.user, 'hours'))}" textAlign="center" />
				<s:NumericStepper id="examMinutes" minimum="0" maximum="45" stepSize="15" value="{Number(formatExamDetails(hostComponent.user, 'mins'))}" textAlign="center" />
			</s:HGroup>

			<s:Label id="registeredNameLabel" excludeFrom="anonymousStates" fontSize="15" fontWeight="bold" left="20" top="350" />
			<s:Label text="{hostComponent.user.name}" excludeFrom="anonymousStates" fontSize="15" left="180" top="350" />

			<s:Label id="emailLabel" fontSize="15" excludeFrom="anonymousStates" fontWeight="bold" left="20" top="380" />
			<s:Label text="{hostComponent.user.email}" excludeFrom="anonymousStates" fontSize="15" left="180" top="380" />

			<s:Label id="accountStartDateLabel" excludeFrom="anonymousStates" fontSize="15" fontWeight="bold" left="20" top="410" />
			<s:Label id="startDateLabel" excludeFrom="anonymousStates" fontSize="15" left="180" top="410" />

			<s:Label id="accountExpiryDateLabel" excludeFrom="anonymousStates" fontSize="15" fontWeight="bold" left="20" top="440" />
			<s:Label id="endDateLabel" excludeFrom="anonymousStates" fontSize="15" left="180" top="440" />

			<s:Label id="languageLabel" fontSize="15" fontWeight="bold" left="20" top="470" />
			<components:SpinnerDropDownList id="languageDropDownList" fontSize="15" left="180" top="470" width="150" />

			<!-- gh#166 Don't need for anonymous -->
			<s:Button id="saveChangesButton" excludeFrom="anonymousStates" visible="{hostComponent.isDirty}"
					  includeInLayout="{hostComponent.isDirty}" left="20" top="500" />
		</s:Group>

		<!--gh#11 Language Code-->
		<!--ui:GradeWidget right="72" top="168" /-->

		<s:VGroup paddingTop="70" filters="{dropShadowFilter}">
			<s:Label id="myToolsLabel" fontSize="20" fontWeight="bold" width="50%" paddingLeft="5"/>

			<s:Group width="565" height="505">
				<s:Rect left="0" right="0" top="0" bottom="0" radiusX="6" radiusY="6">
					<s:fill>
						<s:SolidColor color="#F1F1F3"/>
					</s:fill>
					<s:stroke>
						<s:LinearGradientStroke rotation="90" weight="3">
							<s:GradientEntry color="#FFFFFF" ratio="0.3" />
							<s:GradientEntry color="#E0E0E0" ratio="1" />
						</s:LinearGradientStroke>
					</s:stroke>
				</s:Rect>

				<s:VGroup width="100%" top="20" gap="7">
					<s:Label id="calculatorLabel" paddingLeft="20" fontWeight="bold"/>
					<s:HGroup id="calCulatorGroup" height="300" paddingLeft="35" gap="14">
						<s:Group>
							<s:Rect width="240" height="300">
								<s:fill>
									<s:SolidColor color="#FFFFFF"/>
								</s:fill>
							</s:Rect>
							<s:SWFLoader source="@Embed(source='skins/ielts/assets/PredictYourBandScore.swf')"/>
						</s:Group>
						<s:Group>
							<s:Rect width="240" height="300">
								<s:fill>
									<s:SolidColor color="#FFFFFF"/>
								</s:fill>
							</s:Rect>
							<s:SWFLoader source="@Embed(source='skins/ielts/assets/BandScoreCalculator.swf')"/>
						</s:Group>
					</s:HGroup>
					<s:Spacer height="8"/>
					<s:Label id="studyGuideLabel" paddingLeft="20" paddingBottom="-8" fontWeight="bold"/>
					<s:VGroup width="100%" paddingLeft="8">
						<s:List id="studyGuideList" width="100%" height="195" borderVisible="false" contentBackgroundAlpha="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">
							<s:layout>
								<s:HorizontalLayout gap="0"/>
							</s:layout>
							<s:itemRenderer>
								<fx:Component>
									<s:ItemRenderer autoDrawBackground="false">
										<ui:StudyGuideButton id="studyGuideButton" itemIndex="{itemIndex}"
															 linkSource="{outerDocument.hostComponent.copyProvider.getCopyForId('studyGuideButtonLink' + (itemIndex + 1))}" buttonMode="true" useHandCursor="true"/>
									</s:ItemRenderer>
								</fx:Component>
							</s:itemRenderer>
						</s:List>
					</s:VGroup>
				</s:VGroup>
				<!--s:SWFLoader width="100%" height="100%" source="{hostComponent.assetFolder}widget_demo.png"
                             includeIn="demo" /-->
			</s:Group>
		</s:VGroup>
	</s:HGroup>

</s:Skin>
