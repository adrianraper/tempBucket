<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:slt="com.flexiblexperiments.*"
		 xmlns:controls="org.davekeen.controls.*"
		 xmlns:content="com.clarityenglish.resultsmanager.view.management.components.*"
		 creationComplete="creationComplete()"
		 implements="com.clarityenglish.common.view.interfaces.CopyReceiver">
	<mx:Script>
		<![CDATA[
		import com.clarityenglish.common.model.interfaces.CopyProvider;
		import com.clarityenglish.common.vo.content.Content;
		import com.clarityenglish.common.vo.content.Course;
		import com.clarityenglish.common.vo.content.Exercise;
		import com.clarityenglish.common.vo.content.Title;
		import com.clarityenglish.common.vo.content.Unit;
		import com.clarityenglish.resultsmanager.vo.manageable.Group;
		import com.clarityenglish.resultsmanager.vo.manageable.Manageable;
		import com.clarityenglish.resultsmanager.vo.manageable.User;
		import com.clarityenglish.resultsmanager.Constants;
		import com.clarityenglish.resultsmanager.view.management.events.ContentEvent;
		import com.clarityenglish.resultsmanager.view.management.events.ReportEvent;
		import com.clarityenglish.resultsmanager.view.management.ui.ContentCMManager;
		import com.clarityenglish.resultsmanager.view.shared.interfaces.ICheckBoxRendererProvider;
		import com.clarityenglish.resultsmanager.view.shared.ui.ReportableTreeItemRenderer;
		import com.clarityenglish.utils.TraceUtils;

		import flash.events.ContextMenuEvent;
		import flash.events.Event;

		import mx.controls.Alert;
		import mx.controls.Tree;
		import mx.controls.listClasses.IListItemRenderer;
		import mx.core.ClassFactory;
		import mx.core.DragSource;
		import mx.events.DragEvent;
		import mx.events.ListEvent;

		import nl.demonsters.debugger.MonsterDebugger;

		import org.davekeen.utils.ClassUtils;

		private var lastTreeItemEvent:ListEvent;

		private var contentCMManager:ContentCMManager;
		private var copyProvider:CopyProvider;

		// The last items to have been dragged
		private var dragTreeItems:Array;

		// To stop anyone other than an author from dragging content
		[Bindable]
		public var userType:int;

		/**
		 * Set any copy in this component and call setCopyProvider on any child components
		 *
		 * @param    copyProvider An object implementing CopyProvider
		 */
		public function setCopyProvider(copyProvider:CopyProvider):void {
			//TraceUtils.myTrace("setCopyProvider");
			this.copyProvider = copyProvider;
			contentLabel.text = copyProvider.getCopyForId("content");
			detailedContentLabel.text = copyProvider.getCopyForId("detailedContent");
			refreshButton.label = copyProvider.getCopyForId("refreshButton");

			//dkTreeControlBar.setCopyProvider(copyProvider);
			contentCMManager.setCopyProvider(copyProvider);
		}

		/**
		 * The checkbox renderer provider for this tree is actually in the mediator for content, so it needs to be set within this view
		 */
		public function set checkBoxRendererProvider(checkBoxRendererProvider:ICheckBoxRendererProvider):void {
			// Create a ReportableTreeItemRenderer (this does both content and manageables tree) and configure it to use checkboxes
			var checkBoxToolTips:Object = new Object();
			checkBoxToolTips.editedExerciseToolTip = copyProvider.getCopyForId("editedExerciseToolTip");
			checkBoxToolTips.protectedExerciseToolTip = copyProvider.getCopyForId("protectedExerciseToolTip");
			checkBoxToolTips.movedExerciseToolTip = copyProvider.getCopyForId("movedExerciseToolTip");
			checkBoxToolTips.addedExerciseToolTip = copyProvider.getCopyForId("addedExerciseToolTip");
			if (Constants.userType == User.USER_TYPE_REPORTER) {
				//tree.itemRenderer = ReportableTreeItemRenderer.getRendererFactory(true, checkBoxRendererProvider, true, 
				//			//enabledToolTip, disabledToolTip);
				//			checkBoxToolTips);
			} else {
				checkBoxToolTips.disabledCheckBoxToolTip = copyProvider.getCopyForId("disabledHiddenContent");
				checkBoxToolTips.offCheckBoxToolTip = copyProvider.getCopyForId("allHiddenContent");
				checkBoxToolTips.triCheckBoxToolTip = copyProvider.getCopyForId("someHiddenContent");
				checkBoxToolTips.onCheckBoxToolTip = copyProvider.getCopyForId("noHiddenContent");
				//gh:29
				checkBoxToolTips.enableEditContent = copyProvider.getCopyForId("enableEditContent");
			}
			tree.itemRenderer = ReportableTreeItemRenderer.getRendererFactory(true, checkBoxRendererProvider, true,
					//enabledToolTip, disabledToolTip);
					checkBoxToolTips);
		}

		/**
		 * When the component has been created create the context menu and add listeners
		 */
		private function creationComplete():void {
			contentCMManager = new ContentCMManager(tree);
			contentCMManager.addEventListener(ContextMenuEvent.MENU_SELECT, onMenuSelect);
			contentCMManager.addEventListener(ReportEvent.SHOW_REPORT_WINDOW, onGenerateReportSelect);
			// v3.4 Editing Clarity Content
			contentCMManager.addEventListener(ContentEvent.EDIT_EXERCISE, onEditExerciseSelect);
			//contentCMManager.addEventListener(ContentEvent.DELETE_EXERCISE, onDeleteExerciseSelect);
			contentCMManager.addEventListener(ContentEvent.INSERT_CONTENT_BEFORE, onInsertExerciseSelect);
			contentCMManager.addEventListener(ContentEvent.INSERT_CONTENT_AFTER, onInsertExerciseSelect);
			contentCMManager.addEventListener(ContentEvent.RESET_CONTENT, onResetContent);
			// Just for information
			contentCMManager.addEventListener(ContentEvent.DIRECT_START_LINK, onShowDirectLinkSelect);
			contentCMManager.addEventListener(ContentEvent.PREVIEW, onPreviewSelect);
		}

		/**
		 * If the user selects a different item in the tree pass the array of selected items to the context menu manager so that the
		 * correct menu items can be enabled/disabled based on the current selection.
		 */
		private function onChange():void {
			contentCMManager.enableBySelectedContent(tree.selectedItems);
		}

		/*
		 * When a right click is detected select the item the mouse is currently over in the tree.  This value is maintained by
		 * onItemRollOver.  If this does actually result in a change to the tree selection then fire an onChange event.
		 */
		private function onMenuSelect(e:ContextMenuEvent):void {
			//MonsterDebugger.trace(this, e);
			if (lastTreeItemEvent && tree.selectedItems.indexOf(lastTreeItemEvent.itemRenderer.data) == -1) {
				tree.selectedItem = lastTreeItemEvent.itemRenderer.data;
				onChange();
			}
			//MonsterDebugger.trace(this, tree.selectedIndex);
		}

		/**
		 * When rolling over a row in the tree set lastRolledOverIdx to the index of that row so we can select it when right clicking.
		 *
		 * @param    e
		 */
		private function onItemRollOver(e:ListEvent):void {
			lastTreeItemEvent = e.clone() as ListEvent;
			//TraceUtils.myTrace("rollover " + copyProvider.getCopyForId("content"));
		}

		/**
		 * Workaround for bug http://bugs.adobe.com/jira/browse/SDK-17190
		 *
		 * @param    e
		 */
		private function onDragEnter(e:DragEvent):void {
			if (e.dragSource.hasFormat("treeItems") && (e.dragSource.dataForFormat("treeItems") as Array).length > 0)
				dragTreeItems = e.dragSource.dataForFormat("treeItems") as Array;
		}

		/*
		 * Now that we are allowing editing of content, dragging units or exercises will be allowed.
		 * There are some rules:
		 *   You can't drag between products (unless it is going from Author Plus to another)
		 *   So therefore you can't drag a course.
		 */
		private function onDragOver(e:DragEvent):void {
			// The drawback to using target is that this just tells you which item is after the place you are dropping.
			// But you can drop at different hierarchical levels before the same item (dropping as a unit or as an exercise).
			// dropData will accurately tell you the item you are dragging into.
			//var targetIndex:uint = tree.calculateDropIndex(e);
			//var target:Content = tree.indexToItemRenderer(targetIndex).data as Content;
			var dragItem:Content = dragTreeItems[0] as Content;
			var dropItem:Content = tree.dropData.parent as Content;
			//MonsterDebugger.trace(this, "moving " + dragItem.name + ":" + ClassUtils.getClassAsString(dragItem) + " over " + target.name + ":" + ClassUtils.getClassAsString(target));
			//if (dropItem is Title) {
			//MonsterDebugger.trace(this, dragItem);
			//}
			// Don't allow dragging anything to the top level
			if (dropItem == null) {
				blockDragging(e);

				// Note that if the tree has already set the reject cursor, just accept it.
				// This should only be draggingOverSelf at present.
			} else if (tree.rejectDropCursor) {
				blockDragging(e);

				// Don't allow dragging outside the current product
				// unless the current product is Author Plus
				//} else if ((dropItem.uid.split(".")[1] != dragItem.uid.split(".")[1]) ||
			} else if ((dropItem.uid.split(".")[0] != dragItem.uid.split(".")[0]) &&
					dragItem.uid.split(".")[0] != '1') {
				blockDragging(e);

				// don't allow dragging of courses or titles
			} else if (dragItem is Title || dragItem is Course) {
				blockDragging(e);

				// Don't allow dropping of an exercise outside a unit
			} else if (dragItem is Exercise && (dropItem is Course || dropItem is Title)) {
				//MonsterDebugger.trace(this, "NO, you are trying to drop onto " + target.name + ":" + ClassUtils.getClassAsString(target));
				blockDragging(e);

				// don't allow dropping of a unit unless it is on a course
			} else if (dragItem is Unit && (dropItem is Exercise || dropItem is Unit || dropItem is Title)) {
				blockDragging(e);

			} else {
				tree.showRejectDropCursor(false);

			}
		}

		// To make the above function more readable
		private function blockDragging(e:DragEvent):void {
			tree.showRejectDropCursor(true);
			e.currentTarget.hideDropFeedback(e);
			e.preventDefault();
		}

		private function onDragDrop(e:DragEvent):void {
			// Simply adding this trace causes a many second freeze and it doesn't actually trace.
			//MonsterDebugger.trace(this, e);

			// If you have set the reject cursor, then do nothing
			if (tree.rejectDropCursor) {
				e.preventDefault();
				return;
			}

			// Get the item we are dragging. Can only be one. And the place we are dragging to.
			var dragItem:Content = dragTreeItems[0] as Content;
			//var dropItem:Content = tree.dropData.parent as Content;
			var targetIndex:uint = tree.calculateDropIndex(e);
			var target:Content = tree.indexToItemRenderer(targetIndex).data as Content;
			var dragItemIndex:uint = tree.selectedIndex;

			// If you are dropping onto the item after yourself, then there is nothing to do.
			// This is not good as indexes are too reliant on tree branches being open. Fails for units with open exercises for instance.
			// Still, it is better than nothing. 
			if (targetIndex == dragItemIndex + 1) {
				e.currentTarget.hideDropFeedback(e);
				e.preventDefault();
				return;
			}

			//MonsterDebugger.trace(this, targetIndex);
			//var renderer:IListItemRenderer = tree.indexToItemRenderer(tree.calculateDropIndex(e));
			//var targetEx:Exercise = tree.getChildAt(targetIndex) as Exercise;
			// Usually this will be an exercise (the one after where you drop). 
			// But if you drop as the last exercise in a unit it is a unit, and a course if you drop at the end of the last unit.
			// If you drop as the very last thing in the tree it is null
			//MonsterDebugger.trace(this, "moving " + dragItem.name + ":" + ClassUtils.getClassAsString(dragItem) + " over " + target.name + ":" + ClassUtils.getClassAsString(target));
			//MonsterDebugger.trace(this, tree.dropData);

			// We need to add a T_EditedContent row for this move
			if (!target) {
				//TraceUtils.myTrace("drop to, well, no target");
				// It is very tricky to drag to the end of the tree. And if the last unit is empty things are odd. Still...
				target = tree.indexToItemRenderer(targetIndex - 1).data as Content;
				var eventType:String = ContentEvent.MOVE_CONTENT_AFTER;
				// If the unit is empty, then even if we are correctly trying to drop an exercise into it, we end up putting it in the previous unit at the end
				// because of this condition.
			} else if (target is Unit && target.children.length == 0) {
				//TraceUtils.myTrace("drop to an empty unit");
				// keep this target then
				//MonsterDebugger.trace(this, "this is dragging to an empty unit");
				eventType = ContentEvent.MOVE_CONTENT_BEFORE;
			} else if (target is Unit || target is Course) {
				// So get the exercise that is just before this index
				//TraceUtils.myTrace("drop to unit or course, find the first ex");
				target = tree.indexToItemRenderer(targetIndex - 1).data as Content;
				//TraceUtils.myTrace("target is now " + target.name);
				eventType = ContentEvent.MOVE_CONTENT_AFTER;
			} else {
				//TraceUtils.myTrace("normal drop to " + target.name);
				eventType = ContentEvent.MOVE_CONTENT_BEFORE;
			}
			//MonsterDebugger.trace(this, target);
			// If you are moving an exercise that has already been moved, you need to use its original UID
			if ((dragItem is Exercise) && ((dragItem as Exercise).originalUID)) {
				//MonsterDebugger.trace(this, "moving an already moved ex, so use " + (dragItem as Exercise).originalUID);
				var thisUID:String = (dragItem as Exercise).originalUID;
			} else {
				thisUID = dragItem.uid;
			}
			// 3.4.1 If you are dragging from Author Plus onto other content, then this is not really a move, it is a copy.
			//MonsterDebugger.trace(this, "are you moving or dragging? " + dragItem.uid.split(".")[0]);
			if (dragItem.uid.split(".")[0] == '1') {
				// It is implemented just like an insert, but without needing to open Author Plus
				// So if you drag from AP onto AR, ELE, Finding a home, after Getting Started
				// you should end up with a record like this
				//1.1278409067000.xx.1278476970468,13420,3,33.1213672591135.1.1217289202522
				if (eventType == ContentEvent.MOVE_CONTENT_BEFORE) eventType = ContentEvent.COPY_CONTENT_BEFORE;
				if (eventType == ContentEvent.MOVE_CONTENT_AFTER) eventType = ContentEvent.COPY_CONTENT_AFTER;
			}
			// v3.5 I need to set the enabledFlag to edited for all moved content. Done in the proxy
			//dragItem.enabledFlag |= Exercise.ENABLED_FLAG_MOVED;

			dispatchEvent(new ContentEvent(eventType, thisUID, Constants.groupID, target.uid, null, true));
			// After you have added the row it might make sense to getContent again.
			// It is what we do with manageables after all
		}

		/*
		 private function onItemClick(e:ListEvent):void {
		 // AR I just want to tell what to do if they try to click on a disabled check box
		 var enabledItem:Object = e.itemRenderer.data;
		 //var enabledItem:Boolean = e.itemRenderer.data.isCheckBoxEnabled();
		 TraceUtils.myTrace("onItemClick, item=" + enabledItem.toString());
		 }
		 */
		private function onGenerateReportSelect(e:ReportEvent):void {
			e.onReportables = tree.selectedItems;
			dispatchEvent(e.clone());
		}

		// v3.4 Editing Clarity Content
		private function onEditExerciseSelect(e:ContentEvent):void {
			//MonsterDebugger.trace(this, e);
			//e.contents = tree.selectedItems;
			// Note that if you have moved content before trying to edit it, the UID from the tree will be wrong
			// Mind you, it doesn't actually matter much because the only bit we need is the exerciseID.
			// So, for now just pass the UID as it comes.
			// Not at all. We need the full and correct original UID
			// Ideally I would pass the exercise name as well. 
			// NOTE Why not just pass the whole exercise in the event? Hmm, I can see that might be neater.
			TraceUtils.myTrace("ContentView.onEdit originalUID=" + (tree.selectedItem as Exercise).originalUID + " uid=" + (tree.selectedItem as Content).uid);
			if ((tree.selectedItem is Exercise) && (tree.selectedItem as Exercise).originalUID) {
				//MonsterDebugger.trace(this, "editing an already moved ex, so use " + (tree.selectedItem as Exercise).originalUID);
				e.editedUID = (tree.selectedItem as Exercise).originalUID;
			} else {
				e.editedUID = (tree.selectedItem as Content).uid;
			}
			e.groupID = Constants.groupID;
			e.caption = (tree.selectedItem as Content).name;
			dispatchEvent(e.clone());
			// v3.4 After you have edited an exercise, offer refresh
			refreshButton.visible = true;
		}

		// v3.4 Editing Clarity Content
		private function onInsertExerciseSelect(e:ContentEvent):void {
			//MonsterDebugger.trace(this, e);
			//e.contents = tree.selectedItems;
			// The editedUID for an insert is only used for the exerciseID
			// No, but it will be put together later on for us by PHP (it is the UID from Author Plus)
			e.editedUID = String(new Date().getTime());
			//MonsterDebugger.trace(this, "view made exID=" + e.editedUID);
			e.relatedUID = (tree.selectedItem as Content).uid;
			e.groupID = Constants.groupID;
			dispatchEvent(e.clone());
			// v3.4 After you have edited an exercise, offer refresh
			refreshButton.visible = true;
		}

		// v3.4 Editing Clarity Content
		private function onResetContent(e:ContentEvent):void {
			// v3.5 When you are resetting you need to know the original UID of moved exercises
			e.editedUID = (tree.selectedItem as Content).uid;
			if (tree.selectedItem is Exercise) {
				if ((tree.selectedItem as Exercise).enabledFlag & Exercise.ENABLED_FLAG_MOVED) {
					e.editedUID = (tree.selectedItem as Exercise).originalUID;
				}
			}
			e.groupID = Constants.groupID;
			dispatchEvent(e.clone());
			// If you are resetting a unit, you also need to know the original UID of any exercises that were moved/inserted into that unit.
			// and do separate resets for them
			if (tree.selectedItem is Unit) {
				for each (var exercise:Exercise in (tree.selectedItem as Unit).children) {
					if ((exercise.enabledFlag & Exercise.ENABLED_FLAG_INSERTED) == Exercise.ENABLED_FLAG_INSERTED) {
						// Do the reset for each inserted exercise
						e.editedUID = "1.%.xx." + exercise.uid.split(".")[3];
						dispatchEvent(e.clone());

					} else if ((exercise.enabledFlag & Exercise.ENABLED_FLAG_MOVED) == Exercise.ENABLED_FLAG_MOVED) {
						// Is this from outside this unit?
						// See if the first part of the UID matches
						//TraceUtils.myTrace("check moved ex see if outside=" + exercise.uid + " from " + exercise.originalUID + " rump=" + exercise.uid.split(".").slice(0, 3).join("."));
						if (exercise.uid.split(".").slice(0, 3).join(".") != exercise.originalUID.split(".").slice(0, 3).join(".")) {
							//TraceUtils.myTrace("found moved ex from outside");
							e.editedUID = exercise.originalUID;
							dispatchEvent(e.clone());
						}
					}
				}
			}
		}

		// v3.4 Show the direct link to this item
		private function onShowDirectLinkSelect(e:ContentEvent):void {
			showDirectLinkWindow(tree.selectedItem as Content);
		}

		private function showDirectLinkWindow(item:Content):void {
			// What we really want to display here is the start page with the startingPoint parameters.

			// First we need to find the title for this item as this has the content location path.
			// The content location will either be the specific one for this account title, or the default one for the title
			var thisTitle:Title;
			var thisCourse:Course;
			var thisExercise:Exercise;
			var thisUnit:Unit;
			if (item is Title) {
				//var thisTitle:Title = item as Title;
				//var thisCourse:Course = new Course;
				//var thisExercise:Exercise = new Exercise;
				thisTitle = item as Title;
			} else if (item is Course) {
				thisTitle = item.parent as Title;
				thisCourse = item as Course;
				//thisExercise = new Exercise;
			} else if (item is Unit) {
				thisTitle = item.parent.parent as Title;
				thisCourse = item.parent as Course;
				thisUnit = item as Unit;
				//thisExercise = new Exercise;
			} else {
				thisTitle = item.parent.parent.parent as Title;
				thisCourse = item.parent.parent as Course;
				thisExercise = item as Exercise;
			}

			// Then we need to know the full path
			//var theLink:String = 'content=' + Constants.BASE_FOLDER + thisTitle.contentLocation  + '\n';
			var theLink:String = copyProvider.getCopyForId("directStartInformation") + '\n';
			if (thisCourse)
				theLink += 'course=' + thisCourse.id;
			if (thisUnit)
				theLink += '&startingPoint=id:' + thisUnit.id;
			if (thisExercise)
				theLink += '&startingPoint=ex:' + thisExercise.id;

			// v3.4 We only need to tell them the IDs I think.
			// v3.6 Surely it is better to show the whole URL - I mean, why not?
			Alert.show(theLink, 'Direct start IDs', Alert.OK);
		}

		// v3.5 Preview the content from the menu
		private function onPreviewSelect(e:ContentEvent):void {
			previewWindow(tree.selectedItem as Content);
		}

		private function previewWindow(item:Content):void {
			// What we really want to display here is the start page with the startingPoint parameters.

			// First we need to find the title for this item as this has the content location path.
			// The content location will either be the specific one for this account title, or the default one for the title
			var thisTitle:Title;
			var thisCourse:Course;
			var thisExercise:Exercise;
			var thisUnit:Unit;
			if (item is Title) {
				thisTitle = item as Title;
			} else if (item is Course) {
				thisTitle = item.parent as Title;
				thisCourse = item as Course;
			} else if (item is Unit) {
				thisTitle = item.parent.parent as Title;
				thisCourse = item.parent as Course;
				thisUnit = item as Unit;
			} else {
				thisTitle = item.parent.parent.parent as Title;
				thisCourse = item.parent.parent as Course;
				thisExercise = item as Exercise;
			}

			// Then we need to know the full path. But this is simply not held anywhere.
			var thisStartPage:String = "Start.php";
			switch (thisTitle.name) {
				// Some titles need special case-sensitive changes
				case "English for Hotel Staff":
					thisFolderName = "EnglishForHotelStaff";
					break;
				case "Issues in English 2":
					thisFolderName = "IssuesInEnglish2";
					break;
				// Others are abbreviated
				case "Call Center Communication Skills":
					thisFolderName = "CCCS";
					break;
				case "Customer Service Communication Skills":
					thisFolderName = "CSCS";
					break;
				// Spaces and apostrophes
				case "L'amour des temps":
					thisFolderName = "LamourDesTemps";
					break;
				case "It's Your Job, Practice Centre":
					thisFolderName = "ItsYourJob";
					break;
				// and a special start page
				case "It's Your Job":
					thisFolderName = "../ItsYourJob";
					thisStartPage = "login.php";
					break;
				// Other
				case "Road to IELTS Academic":
					thisFolderName = "RoadToIELTS-Academic";
					break;
				case "Road to IELTS General Training":
					thisFolderName = "RoadToIELTS-General";
					break;
				// But for most titles we simply remove all spaces
				//case "Tense Buster":
				//case "Active Reading":
				default:
					var mySpaces:RegExp = / /g;
					var thisFolderName:String = thisTitle.name.replace(mySpaces, "");
					break;
			}
			var urlRequest:URLRequest = new URLRequest(Constants.HOST + "../../../area1/" + thisFolderName + "/" + thisStartPage);
			urlRequest.method = URLRequestMethod.GET;

			var sentVariables:URLVariables = new URLVariables();
			sentVariables.prefix = Constants.prefix;
			sentVariables.username = Constants.userName;
			// It doesn't work if preset the courseID. I think this is a problem for ECC loading course.xml and menu.xml (WZ says sync issues)
			sentVariables.preview = 'true';
			// I won't send password, you can type this again. In the end I should set up a localConnection query so that Orchid 
			// can ask you to provide name/password and direct start stuff.
			// v3.6 Can we try again?

			if (thisCourse)
				sentVariables.course = thisCourse.id;
			if (thisUnit) {
				sentVariables.startingPoint = 'unit:' + thisUnit.id;
			} else if (thisExercise) {
				sentVariables.startingPoint = 'ex:' + thisExercise.id;
			}

			urlRequest.data = sentVariables;
			navigateToURL(urlRequest, "_blank");
		}

		private function onRefreshButtonClick():void {
			// v3.4 Refresh the content window
			dispatchEvent(new ContentEvent(ContentEvent.GET_CONTENT));
		}

		// Just used to make it quicker for testing - lets just do this for authors for now
		public function openTreeToLastPosition():void {
			if (userType != User.USER_TYPE_AUTHOR)
				return;

			//MonsterDebugger.trace(this, "openTreeToLastPosition");
			//tree.validateNow();
			tree.selectedIndex = 0;
			// If you are happy expaning everything, do this.
			//tree.expandChildrenOf(tree.selectedItem, true);
			// Otherwise painstakingly open each level till you get what you want.
			tree.expandItem(tree.selectedItem, true);
			tree.selectedIndex = 1;
			tree.expandItem(tree.selectedItem, true);
			tree.selectedIndex = 2;
			tree.expandItem(tree.selectedItem, true);
			tree.selectedIndex = 9;
			tree.expandItem(tree.selectedItem, true);
			tree.selectedIndex = -1;
		}

		//gh:#29
		private function onHiddenContentCheckBoxClick():void {
			dispatchEvent(new ContentEvent(ContentEvent.DISABLE_CONTENT_EDIT));
		}
		]]>
	</mx:Script>
	<mx:HBox horizontalGap="1" width="100%">
		<mx:Label id="contentLabel" styleName="subHeadingLabelBlack" paddingTop="0" paddingBottom="0" />
		<mx:Spacer width="100%" />
		<mx:Button id="refreshButton" visible="true" height="18" click="onRefreshButtonClick()" />
	</mx:HBox>
	<mx:HBox>
		<mx:Spacer width="1" />
		<mx:CheckBox id="hiddenContentCheckBox" click="onHiddenContentCheckBoxClick()"/>
		<mx:Label width="100%" id="detailedContentLabel" paddingTop="0" paddingBottom="0" truncateToFit="true"/>
	</mx:HBox>		
	<mx:VBox width="100%" height="100%" verticalGap="1">
		<slt:SpringLoadedTree id="tree"
							openOnClick="false"
							autoCloseOnDrop="false"
							autoOpenTimerMS="400"
							width="100%"
							height="100%"
							variableRowHeight="true"
							allowMultipleSelection="false"
							dragEnabled="false" 
							dropEnabled="{userType == User.USER_TYPE_AUTHOR}" 
							dragMoveEnabled="{userType == User.USER_TYPE_AUTHOR}"
							dragEnter="onDragEnter(event)"
							dragDrop="onDragDrop(event)"
							dragOver="onDragOver(event)"
							labelField="name"
							itemRollOver="onItemRollOver(event)"
							change="onChange()" 
							/>
						<!-- Use these settings if you want to release RM without drragging in ECC -->
						<!-- dragEnabled="false" -->
						<!-- dragEnabled="{userType == User.USER_TYPE_AUTHOR}" -->
						<!-- labelField="caption" -->
		<!-- <controls:DKTreeControlBar id="dkTreeControlBar" width="100%" tree="{tree}" />  -->
	</mx:VBox>
</mx:VBox>