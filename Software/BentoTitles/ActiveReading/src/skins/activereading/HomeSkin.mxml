<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:recorder="com.clarityenglish.bento.view.recorder.*" 
		xmlns:homeui="com.clarityenglish.activereading.view.home.ui.*"
		creationComplete="onCreationComplete(event)" xmlns:home="skins.activereading.assets.home.*" initialize="onInitialize(event)">
	
	<!-- host component -->	
	<fx:Metadata>
		[HostComponent("com.clarityenglish.activereading.view.home.HomeView")]
	</fx:Metadata>
	
	<fx:Declarations>
		<s:DropShadowFilter id="dropShadowFilter" angle="90" distance="1.5" alpha="0.6" blurX="7" blurY="7" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[			
			import mx.collections.XMLListCollection;
			import mx.core.FlexGlobals;
			import mx.effects.Fade;
			import mx.effects.Move;
			import mx.effects.Parallel;
			import mx.effects.Resize;
			import mx.effects.Sequence;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.utils.object_proxy;
			
			import org.puremvc.as3.patterns.facade.Facade;
			
			import spark.components.Button;
			import spark.effects.CrossFade;
			import spark.effects.Scale;
			import spark.events.RendererExistenceEvent;

			public var exListAlphaArray:Array = [];
			private var unitListRendererArray:Array = [];
			
			public function getDemoLabelColor(index:Number):Number {
				var colors:Array = hostComponent.getStyle("unitListButtonLabelColors");
				return colors[index];
			}
			
			public function getOutLineStrockColor(index:Number):Number {
				var colors:Array = hostComponent.getStyle("outlineColors");
				return colors[index]
			}
			
			protected function onCourseSelectorSelect(event:Event):void {
				hostComponent.isCourseSelectorClick = true;
				levelTitleGroup.alpha = 0;
				unitList.visible = false;
				exerciseList.visible = false;
				
				// we need to detect the first click. If it is, the levelTitleGroup won't fade out, because it never fade in before.
				if (hostComponent.isInitialSelect) {
					hostComponent.isInitialSelect = false;
				} else {
					var titleFadeOut:mx.effects.Fade = new Fade();
					titleFadeOut.alphaFrom = 1.0;
					titleFadeOut.alphaTo = 0.0;
					titleFadeOut.duration = 200;
					titleFadeOut.play([levelTitleGroup]);
					
					// if we don't add the following condition, the  will flash when we only switch the unit list
					if (!hostComponent.isFirstClickCurrentUnitList) {
						var exerciseFadeOut:mx.effects.Fade = new mx.effects.Fade();
						exerciseFadeOut.alphaFrom = 1;
						exerciseFadeOut.alphaTo = 0;
						exerciseFadeOut.duration = 100;
						exerciseFadeOut.play([exerciseGroup, triangleGroup]);
					}					
				}				
			}
			
			protected function onAnimationCompleted(event:Event):void {
				if (!hostComponent.isBackToHome) {
					levelTitleGroupLabel.text = hostComponent.course.@caption;
					setTitleBarColor();
					
					var	fadeIn:mx.effects.Fade = new Fade();
					fadeIn.alphaFrom = 0.0;
					fadeIn.alphaTo = 1.0;
					fadeIn.duration = 100;
					fadeIn.play([levelTitleGroup]);
					fadeIn.addEventListener(EffectEvent.EFFECT_END, onUnitTitleBarFadeOutEnd);
				} else {
					hostComponent.isBackToHome = false;
				}	
			}
			
			protected function onUnitTitleBarFadeOutEnd(event:Event):void {
				unitList.visible = true;
				
				var resize:mx.effects.Resize = new Resize();
				resize.heightFrom = 0;
				// calculate the unit list height here, 13 is the sum for padding top and bottom
				resize.heightTo = unitList.dataProvider.length * 39 + 5;
				resize.duration = 300;
				resize.addEventListener(EffectEvent.EFFECT_END, onUnitListResizeEnd);
				resize.play([unitList]);
			}
			
			// back to home
			protected function onUnitListResizeEnd(event:Event):void {
				// quick switch level when exercise list doesn't show up totally will cause the exericse list animation won't execute in the next level
				// So here I reset initial value to the related component. 
				// If we put in onCourseSelectorSelect, isFirstClickCurrentUnitList won't be true for onExerciseListResizeEnd is executed later than onCourseSelectorSelect
				hostComponent.isFirstClickCurrentUnitList = true;
				hostComponent.isAnimationPlayed = false;
				exListAlphaArray = [];
				triangleGroup.alpha = 0;
				exerciseListLabel.alpha = 0;
				triangleReferenceGroup.y = new Number();
			}

			protected function setTitleBarColor():void {
				// We set title bar new gradient here for remaining time for old gradient title bar fading out
				// If we set gradient inside tag, the color will change immediately when the courseIndex change, so we never can see the old gradient fade out
				unitTitleBarStrockColor.color = getOutLineStrockColor(hostComponent.courseIndex);
				exerciseTopBarStrockColor.color = getOutLineStrockColor(hostComponent.courseIndex);
				exerciseBottomBarStrockColor.color = getOutLineStrockColor(hostComponent.courseIndex);
				exerciseBackgroundStrockColor.color = getOutLineStrockColor(hostComponent.courseIndex);
			}
			
			protected function onCreationComplete(event:FlexEvent):void {
				// !courseSelector.level use to judge the initial situation
				if (!courseSelector.level) {
					var downMove:Move = new Move();
					downMove.yFrom = 0;
					downMove.yTo = 150;
					downMove.duration = 300;
					downMove.play([instructionGroup]);
				} else {
					//hostComponent.isBackToHome = true;
					instructionGroup.visible = false;
					hostComponent.isInitialSelect = false;
					
					levelTitleGroupLabel.text = hostComponent.course.@caption;
					levelTitleGroup.alpha = 1;
					setTitleBarColor();
					
					unitList.height = unitList.dataProvider.length * 39 + 5;
					unitList.visible = true;
					unitList.alpha = 1;
					
					if (hostComponent.unit) {
						unitList.selectedIndex = hostComponent.course.unit.(@id == hostComponent.unit.@id).childIndex();
						hostComponent.isFirstClickCurrentUnitList = false;
						
						triangleGroup.alpha = 1;
						triangleReferenceGroup.y = unitList.selectedIndex * 37 + 65;
						
						exerciseGroup.alpha = 1;
						if (unitList.selectedIndex < 7) {
							exerciseGroup.verticalCenter= unitList.selectedIndex * 39 - 100;
						} else {
							exerciseGroup.verticalCenter = 7 * 39 - 100;
						}
						
					}
				}
			}
			
			protected function onInitialize(event:FlexEvent):void {
				courseSelector.addEventListener("courseSelectorClicked", onCourseSelectorSelect, false, 0, true);
				courseSelector.addEventListener("animationCompleted", onAnimationCompleted, false, 0, true);
			}
			
		]]>
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="disabled" />
		<s:State name="normal" />
	</s:states>
	
	<!--Rotation Circle-->
	<home:menucircle left="0" verticalCenter="0" />
	<homeui:ARCourseSelector id="courseSelector" left="-30" verticalCenter="-30" height="450"/>

	<!--Footer-->
	<s:Group width="750" height="30" bottom="50" right="0">
		<s:Rect width="100%" height="100%" radiusX="14" radiusY="14">
			<s:fill>
				<s:LinearGradient>
					<s:GradientEntry color="#D4D4D4" alpha="1"  />
					<s:GradientEntry color="#D4D4D4" alpha="0"  />
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<s:HGroup height="100%" left="10" verticalAlign="middle" gap="5">
			<s:Label id="versionLabel" color="#333333" fontSize="11" />
			<s:Label id="copyrightLabel" color="#333333" fontSize="11" />
			<s:Spacer width="20" />
			<s:SWFLoader source="@Embed(source='/skins/activereading/assets/home/menuClarityenglishLogo.png')" />
		</s:HGroup>
	</s:Group>
	
	<!--Instruction-->
	<s:Group id="instructionGroup" left="450" verticalCenter="0">
		<home:menuArrow verticalCenter="-10"/>
		<home:menuInstruction left="100" />
	</s:Group>	
	
	<!--unit list-->
	<s:Group left="300" verticalCenter="10" height="400" width="267">
		<s:List id="unitList" visible="false" width="260" top="38" horizontalCenter="6" contentBackgroundAlpha="1" borderVisible="true" borderColor="{getOutLineStrockColor(hostComponent.courseIndex)}">
			<s:layout>
				<s:VerticalLayout gap="0" paddingTop="15" paddingLeft="5"/> 
			</s:layout>
			<s:itemRenderer>
				<fx:Component>				
					<s:ItemRenderer top="10" width="100%" height="100%" autoDrawBackground="false" buttonMode="true" useHandCursor="true" enabled="{unitItemGroup.enabled}">
						
						<fx:Metadata>
							[Event( name="selectionEvent", type="flash.events.Event" )]
						</fx:Metadata>
						
						<fx:Script>
							<![CDATA[								
								import mx.events.FlexEvent;
								
								import spark.components.List;
								
								public function getSequenceNumber(data:Object):Number {
									return (owner as List).dataProvider.getItemIndex(data) + 1;
								}
								
								public override function set data(value:Object):void {
									super.data = value;
										
									if (data) {
										overallProgressPath.percentWidth = data.@coverage;
										if (data.@coverage > 0) {
											caption.setStyle("color", getUnitListButtonLabelColor(data));
										} else {
											caption.setStyle("color", 0x333333);
										}
										
										if (data.hasOwnProperty("@enabledFlag") && (data.@enabledFlag.toString() & 8)) {
											unitItemGroup.enabled = false;	
										} else if (data.hasOwnProperty("@enabledFlag") && (data.@enabledFlag.toString() & 4)) {
											demoGroup.visible = true;
										} else {
											demoGroup.visible = false;
											unitItemGroup.enabled = true;
										}
									}
								}
								
								public function getUnitButtonProgressTopColor(data:Object):Number {
									var colors:Array = outerDocument.hostComponent.getStyle("homeButtonTopColors");
									return colors[data.parent().childIndex()];
								}
								
								public function getUnitButtonProgressTopMidColor(data:Object):Number {
									var colors:Array = outerDocument.hostComponent.getStyle("homeButtonTopMidColors");
									return colors[data.parent().childIndex()];
								}
								
								public function getUnitButtonProgressBottomMidColor(data:Object):Number {
									var colors:Array = outerDocument.hostComponent.getStyle("homeButtonBottomMidColors");
									return colors[data.parent().childIndex()];
								}
								
								public function getUnitButtonTopOverColor(data:Object):Number {
									var colors:Array = outerDocument.hostComponent.getStyle("homeButtonTopOverColors");
									return colors[data.parent().childIndex()];
								}
								
								public function getUnitButtonTopMidOverColor(data:Object):Number {
									var colors:Array = outerDocument.hostComponent.getStyle("homeButtonTopMidOverColors");
									return colors[data.parent().childIndex()];
								}
								
								public function getUnitButtonBottomMidOverColor(data:Object):Number {
									var colors:Array = outerDocument.hostComponent.getStyle("homeButtonBottomMidOverColors");
									return colors[data.parent().childIndex()];
								}
								
								public function getUnitListButtonLabelColor(data:Object):Number {
									var colors:Array = outerDocument.hostComponent.getStyle("homeButtonLabelColors");
									return colors[data.parent().childIndex()];
								}
								
								public function getNumberTagTopColor(data:Object):Number {
									var colors:Array = outerDocument.hostComponent.getStyle("homeNumberTagTopColors");
									return colors[data.parent().childIndex()];
								}
								
								public function getNumberTagTopMidColor(data:Object):Number {
									var colors:Array = outerDocument.hostComponent.getStyle("homeNumberTagTopMidColors");
									return colors[data.parent().childIndex()];
								}
								
								public function getNumberTagBottomMidColor(data:Object):Number {
									var colors:Array = outerDocument.hostComponent.getStyle("homeNumberTagBottomMidColors");
									return colors[data.parent().childIndex()];
								}
								
							]]>
						</fx:Script>
						
						<s:states>
							<s:State name="normal" />
							<s:State name="hovered" />
							<s:State name="selected" />    
						</s:states>
						
						<s:Group id="unitItemGroup">
							<s:Rect id="backgroundRect" left="1" width="245" height="36" radiusX="8" radiusY="8">
								<s:fill>
									<s:LinearGradient rotation="270">
										<s:GradientEntry ratio="0" color="#E3E3E3" color.hovered="{getUnitButtonTopOverColor(data)}" color.selected="{getUnitButtonTopOverColor(data)}"/>
										<s:GradientEntry ratio="0.3" color="#FFFFFF" color.hovered="{getUnitButtonTopMidOverColor(data)}" color.selected="{getUnitButtonTopMidOverColor(data)}"/>
										<s:GradientEntry ratio="0.8" color="#DCDCDC" color.hovered="{getUnitButtonBottomMidOverColor(data)}" color.selected="{getUnitButtonBottomMidOverColor(data)}"/>
										<s:GradientEntry ratio="0.9" color="#FFFFFF" color.hovered="{getUnitButtonTopMidOverColor(data)}" color.selected="{getUnitButtonTopMidOverColor(data)}"/>
									</s:LinearGradient>
								</s:fill>
								<s:stroke>
									<s:SolidColorStroke color="{outerDocument.getOutLineStrockColor(data.parent().childIndex())}" weight="1" />
								</s:stroke>
							</s:Rect>
							
							<s:Rect id="overallProgressPath" left="2" right="0" top="1" bottom="1" height="34" maxWidth="244" radiusX="8" radiusY="8">
								<s:fill>
									<s:LinearGradient rotation="270">
										<s:GradientEntry ratio="0" color="{getUnitButtonProgressTopColor(data)}" />
										<s:GradientEntry ratio="0.3" color="{getUnitButtonProgressTopMidColor(data)}" />
										<s:GradientEntry ratio="0.8" color="{getUnitButtonProgressBottomMidColor(data)}" />
										<s:GradientEntry ratio="0.9" color="{getUnitButtonProgressTopMidColor(data)}" />
									</s:LinearGradient>
								</s:fill>
							</s:Rect>
							
							<!--Number tag-->
							<s:Group left="1" top="0" width="23" height="25">
								<s:Path left="1" top="0" data="M19.5684 22.0488 22.6904 12.4512C22.8604 11.9277 22.8604 11.0723 22.6904 10.5488L19.5684 0.951172C19.3975 0.427734 18.8086 0 18.2588 0L8 0C3.59961 0 0 3.59961 0 8L0 23 18.2588 23C18.8086 23 19.3975 22.5723 19.5684 22.0488Z">
									<s:fill>
										<s:LinearGradient>
											<s:GradientEntry ratio="0" color="{getNumberTagTopColor(data)}"/>
											<s:GradientEntry ratio="0.3" color="{getNumberTagTopMidColor(data)}"/>
											<s:GradientEntry ratio="0.8" color="{getNumberTagBottomMidColor(data)}"/>
											<s:GradientEntry ratio="0.9" color="{getNumberTagTopMidColor(data)}"/>
										</s:LinearGradient>
									</s:fill>
								</s:Path>
								<s:Label id="numberLabel" verticalCenter="0" horizontalCenter="0" text="{Number(data.childIndex()) + 1}" color="#FFFFFF" fontSize="14" />
							</s:Group>
							
							<s:Label id="caption" text="{data.@caption}" color="#333333" top="15" left="35" fontSize="14" />
							
							<!--Demo label in unit list-->
							<s:Group id="demoGroup" right="6" top="10" width="45" height="20" visible="false">
								<s:Rect width="100%" height="100%" radiusX="5" radiusY="5">
									<s:fill>
										<s:SolidColor color="{getUnitListButtonLabelColor(data)}" />
									</s:fill>
								</s:Rect>
								<s:Label text="Demo" color="#FFFFFF" horizontalCenter="1" verticalCenter="1" />
							</s:Group>
						</s:Group>
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		
		<!--unit list title bar-->
		<s:Group id="levelTitleGroup" alpha="0" top="0" horizontalCenter="0" visible="{courseSelector.level != null}">
			<s:Path filters="{[dropShadowFilter]}" x="-0.000259399" winding="nonZero" data="M26.4695 44.2207C24.9104 44.2207 22.7058 43.3467 21.5701 42.2793L0.82106 22.7681C-0.314682 21.7002 -0.265854 20.0073 0.929459 19.0068L21.4617 1.81934C22.657 0.818848 24.9104 0 26.4695 0L275.676 0C277.236 0 279.485 0.82373 280.675 1.83105L285.996
					6.33301C287.187 7.34033 288.16 9.43945 288.16 10.9985L288.16 33.2217C288.16 34.7813 287.187 36.8809 285.996 37.8877L280.675 42.3896C279.485 43.3965 277.236 44.2207 275.676 44.2207L26.4695 44.2207Z">
				<s:fill>
					<s:LinearGradient rotation="270">
						<s:GradientEntry ratio="0" color="#E3E3E3"/>
						<s:GradientEntry ratio="0.169041" color="#F8F8F8"/>
						<s:GradientEntry ratio="0.325843" color="#FFFFFF"/>
						<s:GradientEntry ratio="0.797753" color="#DCDCDC"/>
						<s:GradientEntry ratio="0.94382" color="#FFFFFF"/>
					</s:LinearGradient>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke id="unitTitleBarStrockColor" />
				</s:stroke>
			</s:Path>
			<s:Label id="levelTitleGroupLabel" color="{getOutLineStrockColor(hostComponent.courseIndex)}" fontSize="19" left="40" top="15" />
		</s:Group>
	</s:Group>	
	
	<!--exercise list triangle pointer-->
	<s:Group id="triangleGroup" left="600" verticalCenter="0" height="400" alpha="0" visible="{hostComponent.unit != null}">
		<s:Group id="triangleReferenceGroup">
			<s:Path id="trianglePath" x="-0.00012207" y="3.05176e-005" winding="nonZero" data="M16.059 30.267C16.059 31.8266 15.1566 32.1996 14.0541 31.0981L0.827026 17.8695C-0.275513 16.768 -0.275513 14.9638 0.827026 13.8612L14.0541 0.633701C15.1566 -0.468838 16.059 -0.0953026 16.059 1.46378L16.059 30.267Z" filters="{[dropShadowFilter]}">
				<s:fill>
					<s:LinearGradient rotation="270">
						<s:GradientEntry ratio="0" color="#E3E3E3"/>
						<s:GradientEntry ratio="0.169041" color="#F8F8F8"/>
						<s:GradientEntry ratio="0.325843" color="#FFFFFF"/>
						<s:GradientEntry ratio="0.797753" color="#EBEBEB"/>
						<s:GradientEntry ratio="0.94382" color="#FFFFFF"/>
					</s:LinearGradient>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="{getOutLineStrockColor(hostComponent.courseIndex)}" />
				</s:stroke>
			</s:Path>
		</s:Group>	
	</s:Group>

	<!--exercise list-->
	<s:Group id="exerciseGroup" left="611" alpha="0" visible="{hostComponent.unit != null}">
		<s:VGroup verticalCenter="-10" horizontalCenter="0" gap="0" filters="{[dropShadowFilter]}">
			<s:Path visible="{hostComponent.exerciseXMLListCollection.length > 0}" winding="nonZero" filters="{[dropShadowFilter]}" data="M6.03369 14.666C4.47461 14.666 2.47949 14.0566 1.59961 13.3115 0.719727 12.5664 0 10.6816 0 9.12256L0 5.5415C0 3.98242 0.719727 2.09814 1.59961 1.35352 2.47949 0.608887 4.47461 0 6.03369 0L311.915 0C313.475 0 315.47 0.608887 316.35 1.35352 317.229
					2.09814 317.949 3.98242 317.949 5.5415L317.949 9.12256C317.949 10.6816 317.229 12.5664 316.35 13.3115 315.47 14.0566 313.475 14.666 311.915 14.666L6.03369 14.666Z">
				<s:fill>
					<s:LinearGradient rotation="270">
						<s:GradientEntry ratio="0" color="#E3E3E3"/>
						<s:GradientEntry ratio="0.169041" color="#F8F8F8"/>
						<s:GradientEntry ratio="0.325843" color="#FFFFFF"/>
						<s:GradientEntry ratio="0.797753" color="#DCDCDC"/>
						<s:GradientEntry ratio="0.94382" color="#FFFFFF"/>
					</s:LinearGradient>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke id="exerciseTopBarStrockColor" />
				</s:stroke>
			</s:Path>
			
			<s:VGroup paddingLeft="5" visible="{hostComponent.exerciseXMLListCollection.length > 0}">
				<s:Rect id="exerciseRect" width="309">
					<s:fill>
						<s:LinearGradient rotation="270">
							<s:GradientEntry ratio="0" color="#E3E3E3"/>
							<s:GradientEntry ratio="0.169041" color="#F8F8F8"/>
							<s:GradientEntry ratio="0.325843" color="#FFFFFF"/>
							<s:GradientEntry ratio="0.797753" color="#EBEBEB"/>
							<s:GradientEntry ratio="0.94382" color="#FFFFFF"/>
						</s:LinearGradient>
					</s:fill>
					<s:stroke>
						<s:SolidColorStroke id="exerciseBackgroundStrockColor" />
					</s:stroke>
				</s:Rect>
			</s:VGroup>
			
			<s:Path visible="{hostComponent.exerciseXMLListCollection.length > 0}" winding="nonZero" filters="{[dropShadowFilter]}" data="M6.03369 14.666C4.47461 14.666 2.47949 14.0566 1.59961 13.3115 0.719727 12.5664 0 10.6816 0 9.12256L0 5.5415C0 3.98242 0.719727 2.09814 1.59961 1.35352 2.47949 0.608887 4.47461 0 6.03369 0L311.915 0C313.475 0 315.47 0.608887 316.35 1.35352 317.229
					2.09814 317.949 3.98242 317.949 5.5415L317.949 9.12256C317.949 10.6816 317.229 12.5664 316.35 13.3115 315.47 14.0566 313.475 14.666 311.915 14.666L6.03369 14.666Z">
				<s:fill>
					<s:LinearGradient rotation="270">
						<s:GradientEntry ratio="0" color="#E3E3E3"/>
						<s:GradientEntry ratio="0.169041" color="#F8F8F8"/>
						<s:GradientEntry ratio="0.325843" color="#FFFFFF"/>
						<s:GradientEntry ratio="0.797753" color="#DCDCDC"/>
						<s:GradientEntry ratio="0.94382" color="#FFFFFF"/>
					</s:LinearGradient>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke id="exerciseBottomBarStrockColor" />
				</s:stroke>
			</s:Path>				
		</s:VGroup>

		<s:VGroup top="0" width="314" horizontalCenter="0" horizontalAlign="center">
			<s:Label id="exerciseListLabel" width="190" fontSize="17" paddingTop="13" paddingBottom="13" horizontalCenter="0" textAlign="center" color="{getOutLineStrockColor(hostComponent.courseIndex)}" />
			<s:List id="exerciseList" width="314" height="{hostComponent.exerciseXMLListCollection.length * 31}" horizontalCenter="0" verticalCenter="-10" labelField="@caption" contentBackgroundAlpha="0" borderVisible="false">
				<s:layout>
					<s:VerticalLayout gap="1" paddingLeft="18" paddingRight="18" />
				</s:layout>
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer autoDrawBackground="false" buttonMode="true" useHandCursor="true">
							<fx:Script>
							<![CDATA[
								import com.clarityenglish.bento.vo.content.Exercise;
								import com.clarityenglish.common.vo.content.Unit;

								import mx.effects.Fade;
								import mx.effects.Parallel;
								import mx.events.EffectEvent;
								import mx.events.FlexEvent;

								import spark.components.List;
								import spark.effects.CrossFade;

								[Bindable]
								private var courseIndex:Number;

								private var caption:String;
								private var fadeIn:Fade = new Fade();
								private var delay:Number;

								public function getSequenceNumber(data:Object):Number {
									return (owner as List).dataProvider.getItemIndex(data) + 1;
								}

								public override function set data(value:Object):void {
									super.data = value;

									courseIndex = outerDocument.hostComponent.courseIndex;
									this.buttonMode = Exercise.exerciseEnabledInMenu(data as XML);

									// When the dataprovider change, the exButtonGroup's will not reset to 0 and keeps 1. So we need to reset here
									exButtonGroup.alpha = 0;
									if (data && !outerDocument.hostComponent.isBackToHome) {
										// we add one by one fade in for item in exercise list here
										if (outerDocument.hostComponent.isFirstClickCurrentUnitList) {
											var total:Number = outerDocument.hostComponent.exerciseXMLListCollection.length;

											if (getSequenceNumber(data) <= total / 2) {
												delay = 20 * (total / 2 - getSequenceNumber(data)) * (total / 2 - getSequenceNumber(data)) + 42 * (total / 2 - getSequenceNumber(data)) + 100;
											} else {
												delay = 20 * (getSequenceNumber(data) - (total / 2 + 1)) * (getSequenceNumber(data) - (total / 2 + 1)) + 14 * (getSequenceNumber(data) - (total / 2 + 1)) + 100;
											}

											fadeIn.alphaFrom = 0
											fadeIn.alphaTo = 1;
											fadeIn.startDelay = delay;
											fadeIn.duration = 200;
											fadeIn.play([exButtonGroup]);

											outerDocument.exListAlphaArray[getSequenceNumber(data)] = 1;
										} else {
											exButtonGroup.alpha = 1;
										}
									} else if (data && outerDocument.hostComponent.isBackToHome) {
										exButtonGroup.alpha = 1;
									}
								}

								]]>
						</fx:Script>

							<fx:Declarations>
								<s:DropShadowFilter id="dropShadowFilter" angle="100" distance="1" alpha="0.4"/>
							</fx:Declarations>

							<s:states>
								<s:State name="normal" />
								<s:State name="hovered" />
								<s:State name="selected" />
							</s:states>

							<s:Group id="exButtonGroup" alpha="0">
								<homeui:MenuButton id="exerciseUnopenedMenuButton" width="276" height="30" courseIndex="{data.parent().parent().childIndex()}" label="{data.@caption}" visible="{!data.hasOwnProperty('@done')}" enabled="{Exercise.exerciseEnabledInMenu(data as XML)}" />
								<homeui:MenuButton id="exerciseOpenedMenuButton" width="276" height="30" courseIndex="{data.parent().parent().childIndex()}" label="{data.@caption}" visible="{data.hasOwnProperty('@done')}" enabled="{Exercise.exerciseEnabledInMenu(data as XML)}" />
							</s:Group>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
		</s:VGroup>

		<!--Demo Tooltip-->
		<s:Group id="demoTooltipGroup" width="163" height="70" right="-50" top="360" visible="false">
			<s:Rect width="100%" height="100%" radiusX="10" radiusY="10">
				<s:fill>
					<s:SolidColor color="#888A8C"/>
				</s:fill>
			</s:Rect>
			<s:VGroup top="12" bottom="10" left="9" gap="4">
				<s:HGroup>
					<s:Label id="demoTooltipLabel1" width="100%" color="#FFFFFF" fontSize="14" />
					<s:VGroup paddingTop="-5">
						<s:Group width="45" height="20">
							<s:Rect width="100%" height="100%" radiusX="5" radiusY="5">
								<s:fill>
									<s:SolidColor color="{getDemoLabelColor(hostComponent.courseIndex)}" />
								</s:fill>
							</s:Rect>
							<s:Label text="Demo" color="#FFFFFF" horizontalCenter="1" verticalCenter="1" />
						</s:Group>
					</s:VGroup>
				</s:HGroup>			
				<s:Label id="demoTooltipLabel2" width="95%" color="#FFFFFF" fontSize="14" lineHeight="18" />
			</s:VGroup>
		</s:Group>
	</s:Group>

</s:Skin>