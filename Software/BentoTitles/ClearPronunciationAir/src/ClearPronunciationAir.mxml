<?xml version="1.0" encoding="utf-8"?>
<clearpronunciation:ClearPronunciationApplication 
							xmlns:fx="http://ns.adobe.com/mxml/2009" 
							xmlns:s="library://ns.adobe.com/flex/spark"
							xmlns:clearpronunciation="com.clarityenglish.clearpronunciation.*"
							width="100%"
							height="100%"
						    initialize="onInitialize(event)"
							applicationComplete="onApplicationComplete(event)"
							applicationDPI="160"
							runtimeDPIProvider="org.davekeen.core.RetinaRuntimeDPIProvider"
							gestureSwipe="onGestureSwipe(event)">
	<fx:Script>
		<![CDATA[
			import com.clarityenglish.clearpronunciationair.ClearPronunciationAirApplicationFacade;
			import com.clarityenglish.common.CommonNotifications;
			import com.clarityenglish.common.vo.config.BentoError;
			import com.clarityenglish.components.SpinnerDropDownList;
			import com.clarityenglish.textLayout.conversion.XHTMLImporter;
			import com.clarityenglish.textLayout.elements.SelectElement;
			import com.clarityenglish.textLayout.stylesheets.applicators.CSSApplicator;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import org.davekeen.delegates.RemoteDelegate;
			
			import skins.bento.components.SpinnerDropDownListSkin;
			
			import spark.components.DropDownList;
			
			// TODO: This is duplicated in IELTS and Rotterdam!!  Refactor!!
			protected function onInitialize(event:FlexEvent):void {
				// Determine what platform we are running on
				var platform:String = Capabilities.version.split(" ")[0];
				switch (platform) {
					case "IOS":
						// Set the iOS config xml file
						FlexGlobals.topLevelApplication.parameters.configFile = "ios-config.xml";
						XHTMLImporter.media = "ios";
						break;
					case "AND":
						// Set the Android config xml file as well as getting the prefix, product code and font size from the iOS settings
						FlexGlobals.topLevelApplication.parameters.configFile = "android-config.xml";
						XHTMLImporter.media = "android";
						break
					default:
						throw new Error("Unsupported platform - " + Capabilities.version);
				}
				
				// Hardcode the font offset to +4 for tablet gh#55
				CSSApplicator.fontSizeOffset = 4;
				
				// The AIR application uses a custom Spinner instead of the normal dropdown
				SelectElement.elementFactoryFunction = function():DropDownList {
					var dropDownList:DropDownList = new SpinnerDropDownList();
					dropDownList.setStyle("skinClass", SpinnerDropDownListSkin);
					return dropDownList;
				}
				
				// #383 No busy cursor on AIR
				RemoteDelegate.setShowBusyCursor(false);
				
				// #479 For the AIR version we get the version number out of the xml descripter
				var descriptor:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = descriptor.namespace();
				versionNumber = descriptor.ns::versionNumber.toString();
				
				facade = ClearPronunciationAirApplicationFacade.getInstance();
				
				Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;
			}
			
			protected function onApplicationComplete(event:FlexEvent):void {
				FlexGlobals.topLevelApplication.loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onUncaughtError);
			}
			
			protected function onUncaughtError(event:UncaughtErrorEvent):void {
				var bentoError:BentoError = new BentoError();
				
				if (event.error is Error) {
					log.error((event.error as Error).message + " - " + (event.error as Error).getStackTrace());
				} else if (event.error is ErrorEvent) {
					log.error((event.error as ErrorEvent).toString());
				} else {
					log.error("Unknown: " + event.error);
				}
			}
			
			protected function onGestureSwipe(event:TransformGestureEvent):void {
				if (facade)
					facade.sendNotification((event.offsetX < 1 ? CommonNotifications.GESTURE_SWIPE_LEFT : CommonNotifications.GESTURE_SWIPE_RIGHT), event.offsetX);
			}
		]]>
	</fx:Script>
	
	<fx:Style source="clearpronunciation.css" />
	<fx:Style source="clearpronunciationair.css" />
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace clearpronunciation "com.clarityenglish.clearpronunciation.*";
		
		global {
			fontFamily: Verdana;
		}
		
		@font-face {
			src: url("skins/clearpronunciationair/assets/MGBOLD.otf");
			fontFamily: Mgbold;
			fontStyle: normal;
			fontWeight: bold;
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("skins/clearpronunciation/assets/L_10646.TTF");
			fontFamily: Phonetic;
			fontStyle: normal;
			fontWeight: normal;
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("skins/clearpronunciation/assets/MyriadPro-Regular.otf");
			fontFamily: MyriadPro;
			fontStyle: normal;
			fontWeight: normal;
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("skins/clearpronunciation/assets/MyriadPro-Semibold.otf");
			fontFamily: MyriadPro;
			fontStyle: normal;
			fontWeight: bold;
			embedAsCFF: true;
		}
	</fx:Style>
</clearpronunciation:ClearPronunciationApplication>
