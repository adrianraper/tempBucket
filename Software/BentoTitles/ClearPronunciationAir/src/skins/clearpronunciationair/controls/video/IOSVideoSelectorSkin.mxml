<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:players="com.clarityenglish.controls.video.players.*"
		xmlns:assets="skins.clearpronunciation.assets.exercise.*"
		creationComplete="onCreationComplete(event)">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.controls.video.VideoSelector")]
	</fx:Metadata>
	
	<fx:Declarations>
		<s:DropShadowFilter id="dropShadowFilter" angle="260" distance="1.5" alpha="0.5" blurX="8" blurY="5" />
		<s:DropShadowFilter id="dropShadowTopFilter" angle="90" distance="1.5" alpha="0.5" blurX="8" blurY="5" />

		<s:Animate id="scriptRollOut" target="{scriptGroup}">
			<s:SimpleMotionPath property="top" valueFrom="30" valueTo="243" />
		</s:Animate>

		<s:Animate id="scriptRollUp" target="{scriptGroup}">
			<s:SimpleMotionPath property="top" valueFrom="243" valueTo="30" />
		</s:Animate>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
		import com.clarityenglish.bento.view.marking.MarkingView;
		import com.clarityenglish.bento.view.recorder.WaveformView;
		import com.clarityenglish.bento.view.xhtmlexercise.components.XHTMLExerciseView;
		import com.clarityenglish.clearpronunciation.view.exercise.ExerciseView;
		import com.clarityenglish.clearpronunciation.view.exercise.YouWillView;
		import com.clarityenglish.clearpronunciation.view.exercise.ui.WindowShade;
		import com.clarityenglish.textLayout.components.AudioPlayer;
		import com.googlecode.bindagetools.Bind;

		import mx.events.CloseEvent;

		import mx.events.FlexEvent;
		import mx.managers.PopUpManager;

		import skins.clearpronunciation.ExerciseSkin;
		import skins.clearpronunciation.exercise.marking.MarkingSkin;

		import skins.clearpronunciation.exercise.ui.WindowShadeSkin;
		import skins.clearpronunciation.recorder.RecorderTitleWindowSkin;

		import spark.components.Button;

		import spark.components.Image;
		import spark.components.TitleWindow;

		import spark.components.VideoPlayer;
		import spark.events.IndexChangeEvent;
		import spark.utils.TextFlowUtil;

		private var windowShade:WindowShade;
		private var titleWindow:TitleWindow;
		private var exerciseSkin:ExerciseSkin;

		protected function onCreationComplete(event:FlexEvent):void {
			// TODO Auto-generated method stub
			channelList.visible = false;

			stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
			stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);

			videoList.selectedIndex = 0;
			videoList.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE));
			videoList.addEventListener(IndexChangeEvent.CHANGE, onVideoListIndexChange);
			Bind.fromProperty(hostComponent, "isScriptOpen").toFunction(function (isScriptOpen:Boolean):void {
				if (isScriptOpen) {
					scriptRollOut.play();
				} else {
					scriptRollUp.play();
				}
			});

			if (videoList.dataProvider.length > 1) {
				videoListRect.visible = true;
				videoList.visible = true;
			} else {
				videoListRect.visible = false;
				videoList.visible = false;
			}

			videoPlayerBackRect.width = hostComponent.width + 5;
			videoPlayerBackRect.height = hostComponent.height + 5;
			videoPlayer.width = hostComponent.width
			videoPlayer.height = hostComponent.height;
		}

		protected function onMouseDown(event:Event):void {
			var downComponent:Object = event.target;
			if (downComponent is Button) {
				while (downComponent.parent) {
					if (downComponent is WindowShade) {
						windowShade = downComponent as WindowShade;
						videoPlayer.visible = false;
						break;
					} else if (downComponent is ExerciseView) {
						videoPlayer.visible = false;
						break;
					} else if (downComponent is WaveformView) {
						videoPlayer.visible = false;
						break;
					}
					downComponent = downComponent.parent;
				}

				if (!downComponent.parent) {
					videoPlayer.visible = true;
				}
			}
		}

		protected function onMouseUp(event:Event):void {
			if (!(event.target is Button)) {
				if (windowShade) {
					if (windowShade.isWindowShadeOpen) {
						videoPlayer.visible = false;
					} else {
						videoPlayer.visible = true;
						windowShade = null;
					}
				}
			}
		}

		protected function onVideoListIndexChange(event:Event):void {
			videoPlayer.visible = true;
			// Click the video without script after video with script selected.
			if (hostComponent.videoList.selectedItem.script.length() <= 0 && hostComponent.isScriptOpen) {
				hostComponent.isScriptOpen = false;
			}
		}
		]]>
	</fx:Script>

	<!-- Animation text-->
	<s:Group id="scriptGroup" left="0" width="320" filters="{[dropShadowTopFilter]}">
		<s:Group width="322" height="215">
			<s:Rect width="100%" height="100%" bottomRightRadiusX="12" bottomRightRadiusY="12">
				<s:fill>
					<s:SolidColor color="#F2F2F2" />
				</s:fill>
			</s:Rect>
			<s:VGroup width="100%" height="100%" paddingLeft="26" paddingRight="26" paddingTop="16" paddingBottom="0" gap="10">
				<s:VGroup height="135" width="100%" paddingLeft="4" paddingRight="4">
					<s:RichEditableText id="scriptRichEditableText" height="100%" width="100%" verticalAlign="middle" editable="false" selectable="false" fontSize="13" />
				</s:VGroup>
				<s:Rect width="100%" height="1">
					<s:fill>
						<s:SolidColor color="#333333" />
					</s:fill>
				</s:Rect>
				<s:VGroup paddingLeft="4" paddingRight="4" paddingTop="2" gap="8">
					<s:HGroup gap="8">
						<assets:redArrow />
						<s:RichEditableText id="voicedRichEditableText" textFlow="{TextFlowUtil.importFromString(hostComponent.copyProvider.getCopyForId('voicedRichEditableText'))}" fontSize="10" color="#23565A" />
					</s:HGroup>
					<s:HGroup gap="8">
						<assets:yellowArrow />
						<s:RichEditableText id="unvoicedRichEditableText" textFlow="{TextFlowUtil.importFromString(hostComponent.copyProvider.getCopyForId('unvoicedRichEditableText'))}" fontSize="10" color="#23565A" />
					</s:HGroup>
				</s:VGroup>
			</s:VGroup>
		</s:Group>
	</s:Group>

	<!--video player black background-->
	<s:Rect id="videoPlayerBackRect" left="0" top="0" filters="{[dropShadowFilter]}">
		<s:fill>
			<s:SolidColor color="0x273A45" />
		</s:fill>
	</s:Rect>
	
	<!-- The video players -->
	<players:WebViewVideoPlayer id="videoPlayer" left="0"  placeholderSource="{hostComponent.placeholderSource}" />
	<!--players:OSMFVideoPlayer id="videoPlayer" width="411" height="231" /-->

	<!-- Placeholder image -->
	<s:Image id="placeholderImage" left="0" source="{hostComponent.placeholderSource}" visible="{!videoPlayer.visible}" buttonMode="true" useHandCursor="true" />
	
	<!-- Channel list -->
	<s:List id="channelList" top="260" left="30" width="320" horizontalScrollPolicy="off">
		<s:layout>
			<s:TileLayout columnWidth="50" rowHeight="45" verticalGap="12" />
		</s:layout>
	</s:List>
	
	<!-- Video list -->
	<s:Rect id="videoListRect" top="2" right="-70" width="70" height="236" topRightRadiusX="18" topRightRadiusY="18" bottomRightRadiusX="18" bottomRightRadiusY="18">
		<s:fill>
			<s:SolidColor color="0x273A45" />
		</s:fill>
	</s:Rect>
	<s:List id="videoList" top="4" right="-64" width="64" height="100%" horizontalScrollPolicy="off" minHeight="0" minWidth="0" contentBackgroundAlpha="0">
		<s:itemRenderer>
			<fx:Component>
				<s:ItemRenderer autoDrawBackground="false" useHandCursor="true" buttonMode="true"> 
					<fx:Script>
						<![CDATA[
							[Bindable]
							private var iconPath:String;
							
							[Bindable]
							private var selectedIconPath:String;
							
							override public function set data(value:Object):void {
								super.data = value;
								
								if (data) {
									iconPath = outerDocument.hostComponent.href.rootPath + "/media/video/SoundVideoOff" + (itemIndex + 1) + ".png";
									selectedIconPath = outerDocument.hostComponent.href.rootPath + "/media/video/SoundVideoOn" + (itemIndex + 1) + ".png";
								}
								
								// #213
								enabled = !(data.attribute("enabledFlag").length() > 0 && (Number(data.@enabledFlag.toString()) & 8));
							}

							protected function onScriptVideoClick(event:Event):void {
								if (!outerDocument.hostComponent.isScriptOpen) {
									outerDocument.hostComponent.isScriptOpen = true;
								} else {
									outerDocument.hostComponent.isScriptOpen = false;
									outerDocument.hostComponent.videoPlayer.stop();
									outerDocument.hostComponent.videoReplayIndex = itemIndex;
									outerDocument.hostComponent.videoList.selectedItem = 0;
								}
							}
						]]>
					</fx:Script>
					
					<s:states>
						<s:State name="normal" />
						<s:State name="hovered" />
						<s:State name="selected" />
					</s:states>
					
					<s:Group top="3">
						<s:BitmapImage source="{iconPath}" visible="{currentState == 'normal' || currentState == 'hovered'}" />
						<s:BitmapImage source="{selectedIconPath}" visible="{currentState == 'selected'}" />
					</s:Group>

					<s:Group top="3" visible="{data.script.length() > 0}" click="onScriptVideoClick(event)">
						<s:BitmapImage source="{iconPath}" visible="{currentState == 'normal' || currentState == 'hovered'}" />
						<s:BitmapImage source="{selectedIconPath}" visible="{currentState == 'selected'}" />
					</s:Group>
					
				</s:ItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
</s:Skin>
