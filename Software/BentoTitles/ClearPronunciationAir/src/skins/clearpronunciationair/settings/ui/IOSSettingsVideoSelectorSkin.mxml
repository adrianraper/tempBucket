<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" xmlns:players="com.clarityenglish.controls.video.players.*" creationComplete="onCreatComplete(event)">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.controls.video.VideoSelector")]
	</fx:Metadata>
	
	<fx:Declarations>
		<s:DropShadowFilter id="dropShadowFilter" angle="260" distance="1.5" alpha="0.5" blurX="8" blurY="5" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.clarityenglish.controls.video.VideoSelector;
			import com.clarityenglish.rotterdam.view.unit.ui.WidgetList;
			import com.googlecode.bindagetools.Bind;
			
			import mx.binding.utils.BindingUtils;
			import mx.events.FlexEvent;
			
			import spark.components.VideoPlayer;
			import spark.events.IndexChangeEvent;
			
			private var paretnDocumentOnwer:Object;
			
			protected function onCreatComplete(event:FlexEvent):void {
				// TODO Auto-generated method stub
				channelList.visible = false;
				
				videoPlayer.stop();
				videoList.addEventListener(IndexChangeEvent.CHANGE, onVideoListIndexChange);
				videoList.addEventListener(FocusEvent.FOCUS_OUT, onVideoListFocusOut);
				stage.addEventListener(MouseEvent.CLICK, onStageClick);
			}
			
			protected function onStageClick(event:Event):void {
				var component:Object = event.target;
				var isClickVideoSelector:Boolean;
				while (component.parent) {
					if (component is List || component is VideoPlayer|| component is Image) {
						isClickVideoSelector = true;
						break;
					}
					component = component.parent;
				}
				
				if (!isClickVideoSelector) {
					videoList.selectedItem = null;
					videoPlayer.visible = false;
				}
			}
			
			protected function onVideoListIndexChange(event:Event):void {
				videoPlayer.createStageWebView();
				videoPlayer.visible = true;
			}
			
			protected function onVideoListFocusOut(event:FocusEvent):void {
				videoList.selectedItem = null;
				videoPlayer.visible = false;
			}
			
			protected function onPlaceholderClick(event:MouseEvent):void {
				// For now the default index is 0, but latter we will get index from widgetlist which is user prefered.
				videoList.selectedItem = videoList.dataProvider.getItemAt(0);
				videoList.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE));
				// Manually set the focus here, for we manually change the video list index.
				focusManager.setFocus(videoList);
			}
		]]>
	</fx:Script>
	<!--video player black background-->
	<s:Rect left="30" width="324" height="245" filters="{[dropShadowFilter]}">
		<s:fill>
			<s:SolidColor color="0x273A45" />
		</s:fill>
	</s:Rect>
	
	<!-- The video players -->
	<players:WebViewVideoPlayer id="videoPlayer" left="15" width="320" height="240" />
	<!--players:OSMFVideoPlayer id="videoPlayer" width="411" height="231" /-->
	
	<!-- Placeholder image -->
	<s:Image id="placeholderImage" left="30" source="{hostComponent.placeholderSource}" visible="{videoList.selectedItem == null}" buttonMode="true" useHandCursor="true" click="onPlaceholderClick(event)" />
	
	<!-- Channel list -->
	<s:List id="channelList" top="310" left="30" horizontalCenter="0" horizontalScrollPolicy="off" contentBackgroundAlpha="0">
		<s:layout>
			<s:TileLayout columnWidth="176" rowHeight="31" horizontalGap="10"/>
		</s:layout>
		<s:itemRenderer>
			<fx:Component>
				<s:ItemRenderer autoDrawBackground="false">
					<fx:Script>
						<![CDATA[
							override public function set data(value:Object):void {
								super.data = value;
								
								if (data) {
									channelLabel.text = data.caption;
								}
							}
						]]>
					</fx:Script>
					
					<s:states>
						<s:State name="normal" />
						<s:State name="hovered" />
						<s:State name="selected" />
					</s:states>
					<s:Group width="176" height="31" useHandCursor="true" buttonMode="true">
						<s:Rect left="0" width="100%" height="100%" radiusX="5" radiusY="5">
							<s:fill>
								<s:SolidColor color="#FFEFD2" />
							</s:fill>
							<s:stroke>
								<s:SolidColorStroke color="#9E9E9E" weight="1" />
							</s:stroke>
						</s:Rect>
						<s:Ellipse x="18" y="9" width="14" height="14">
							<s:fill>
								<s:SolidColor color="#FFFFFF" />
							</s:fill>
							<s:stroke>
								<s:SolidColorStroke color="#9E9E9E" />
							</s:stroke>
						</s:Ellipse>
						<s:Ellipse x="22" y="13" width="6" height="6" includeIn="hovered, selected">
							<s:fill>
								<s:SolidColor color="#000000" />
							</s:fill>
						</s:Ellipse>
						<s:Label id="channelLabel" left="50" verticalCenter="0" fontSize="16" fontWeight="bold" fontFamily="Mgbold" color="#333333" />
					</s:Group>		
				</s:ItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
	<s:Button id="scriptButton" left="411" top="172" width="50" height="45" />
	
	<!-- Video list -->
	<s:Rect top="2" right="40" width="71" height="236" topRightRadiusX="18" topRightRadiusY="18" bottomRightRadiusX="18" bottomRightRadiusY="18" visible="{hostComponent.videoCollection.length > 1}">
		<s:fill>
			<s:SolidColor color="0x273A45" />
		</s:fill>
	</s:Rect>
	<s:List id="videoList" top="4" right="44" width="64" height="100%" horizontalScrollPolicy="off" minHeight="0" minWidth="0" visible="{hostComponent.videoCollection.length > 1}" contentBackgroundAlpha="0">
		<s:itemRenderer>
			<fx:Component>
				<s:ItemRenderer autoDrawBackground="false" useHandCursor="true" buttonMode="true"> 
					<fx:Script>
						<![CDATA[
							[Bindable]
							private var iconPath:String;
							
							[Bindable]
							private var selectedIconPath:String;
							
							override public function set data(value:Object):void {
								super.data = value;
								
								if (data) {
									iconPath = outerDocument.hostComponent.href.rootPath + "/media/video/SoundVideoOff" + (itemIndex + 1) + ".png";
									selectedIconPath = outerDocument.hostComponent.href.rootPath + "/media/video/SoundVideoOn" + (itemIndex + 1) + ".png";
								}
								
								// #213
								enabled = !(data.attribute("enabledFlag").length() > 0 && (Number(data.@enabledFlag.toString()) & 8));
							}
						]]>
					</fx:Script>
					
					<s:states>
						<s:State name="normal" />
						<s:State name="hovered" />
						<s:State name="selected" />
					</s:states>
					
					<s:Group top="3">
						<s:BitmapImage source="{iconPath}" visible="{currentState == 'normal' || currentState == 'hovered'}" />
						<s:BitmapImage source="{selectedIconPath}" visible="{currentState == 'selected'}" />
					</s:Group>
					
				</s:ItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
</s:Skin>
