<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:uniteditor="com.clarityenglish.rotterdam.builder.view.uniteditor.*"
		xmlns:course="com.clarityenglish.clearpronunciation.view.course.*"
		xmlns:course1="skins.clearpronunciation.assets.course.*"
		xmlns:unit="com.clarityenglish.clearpronunciation.view.unit.*" 
		xmlns:exercise="com.clarityenglish.bento.view.exercise.*" creationComplete="onCreationComplete(event)" xmlns:local="*" xmlns:vo="com.clarityenglish.clearpronunciation.vo.*" >
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.clearpronunciation.view.course.CourseView")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.clarityenglish.bento.view.exercise.ExerciseView;
			import com.clarityenglish.clearpronunciation.view.unit.UnitView;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import spark.transitions.ViewTransitionBase;
			
			private var applicationWidth:Number;
			
			private function unitViewNavigatorShow(viewClass:Class, transition:ViewTransitionBase = null):void {
				// This needs a callLater otherwise the first time we open the editor mouse events are not picked up
				callLater(function():void {
					if (!unitViewNavigator.activeView) {
						unitViewNavigator.pushView(viewClass);
					} else if (!(unitViewNavigator.activeView is viewClass)) {
						unitViewNavigator.activeView.actionBarVisible = false;
						unitViewNavigator.replaceView(viewClass, unitViewNavigator.activeView.data, null, transition);
					}
				});
			}	
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				applicationWidth = FlexGlobals.topLevelApplication.width;
				
				if (unitViewNavigator.actionBar)
					unitViewNavigator.actionBar.visible = false;
				unitViewNavigator.defaultPopTransition = null;
				unitViewNavigator.defaultPushTransition = null;
				unitViewNavigator.addEventListener(FlexEvent.UPDATE_COMPLETE, onUpdate);
				
				unitDropDownVGroup.left = applicationWidth * 0.5 - 300;
				courseButtonHGroup.left = applicationWidth * 0.5 + 80;
				courseButtonHGroup.gap = (applicationWidth * 0.5 - 50 ) * 0.09;
				
				if (hostComponent.unit.hasOwnProperty("@rightIcon")) {
					rightUnitCaptionComponent.visible = true;
				} else {
					rightUnitCaptionComponent.visible = false;
				}
			}
			
			protected function onUpdate(event:Event):void {
				if (unitViewNavigator.activeView) {
					unitViewNavigator.activeView.actionBarVisible = false;
				}
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Animate id="unitListExpandAnimate" target="{unitList}" duration="300">
			<s:SimpleMotionPath property="height" valueFrom="0" valueTo="200" />
		</s:Animate>
		<s:Animate id="unitListCollapseAnimate" target="{unitList}" duration="300">
			<s:SimpleMotionPath property="height" valueFrom="200" valueTo="0" />
		</s:Animate>
	</fx:Declarations>
	
	<!-- states -->
	<s:states>
		<s:State name="disabled" />
		<s:State name="normal" />
		<s:State name="unitWidget" enterState="unitViewNavigatorShow(UnitView)" />
		<s:State name="unitExercise" enterState="unitViewNavigatorShow(ExerciseView)" />
	</s:states>
	
	<!--Background color-->
	<s:Rect width="100%" top="-50" bottom="0">
		<s:fill>
			<s:SolidColor color="#19B5E0" />
		</s:fill>
	</s:Rect>
	
	<s:ViewNavigator id="unitViewNavigator" left="13" right="13" top="20" bottom="10" />
	
	<!--Title bar background-->
	<s:Rect left="13" right="13" height="13" top="7">
		<s:fill>
			<s:SolidColor color="#FBCF57" />
		</s:fill>
	</s:Rect>
	<s:Rect width="100%" top="-70" height="80" bottomRightRadiusX="30" bottomRightRadiusY="30">
		<s:fill>
			<s:SolidColor color="#19B5E0" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="#000000" />
		</s:stroke>
	</s:Rect>
	<s:Rect width="100%" top="-70" height="9">
		<s:fill>
			<s:SolidColor color="#273B46" />
		</s:fill>
	</s:Rect>
	
	<s:HGroup id="courseButtonHGroup" top="-50">
		<s:Button id="backToMenuButton" buttonMode="true" useHandCursor="true" />
		<s:Button id="recorderButton" buttonMode="true" useHandCursor="true" />
		<s:Button id="phonemicChartButton" buttonMode="true" useHandCursor="true" />
		<s:Button id="youWillButton" buttonMode="true" useHandCursor="true" />
	</s:HGroup>
	
	<s:HGroup top="20" left="150">
		<s:Button id="backButton" enabled="false" useHandCursor="true" buttonMode="true" />
		<s:Button id="nextButton" useHandCursor="true" buttonMode="true" />
	</s:HGroup>
	
	<!--CP logo-->
	<course1:courseLogo top="-70" left="0" />
	
	<s:VGroup id="unitDropDownVGroup" top="-65" width="350" gap="0">
		<s:Group>
			<course1:dropDownListBg horizontalCenter="0" />
			<s:HGroup id="swfloaderHGroup" height="40" gap="100" horizontalCenter="0" top="15">
				<course:UnitCaptionComponent id="leftUnitCaptionComponent" source="{hostComponent.unit.@leftIcon}" copyProvider="{hostComponent.getCopyProvider()}" />
				<course:UnitCaptionComponent id="rightUnitCaptionComponent" source="{hostComponent.unit.@rightIcon}" copyProvider="{hostComponent.getCopyProvider()}" />
			</s:HGroup>
		</s:Group>
		
		<s:VGroup width="100%" paddingLeft="25">
			<vo:WindowShade id="windowShade" width="300">
				<s:Rect width="270" height="421" top="0" horizontalCenter="0" bottomLeftRadiusX="10" bottomLeftRadiusY="10" bottomRightRadiusX="10" bottomRightRadiusY="10">
					<s:fill>
						<s:SolidColor color="#497A7A" />
					</s:fill>
				</s:Rect>
				<s:Rect width="255" height="403" top="8" horizontalCenter="0" bottomLeftRadiusX="7" bottomLeftRadiusY="7" bottomRightRadiusX="7" bottomRightRadiusY="7">
					<s:fill>
						<s:SolidColor color="#FFFFFF" />
					</s:fill>
				</s:Rect>
				<s:List id="unitList" width="250" height="387" top="18" horizontalCenter="0" dataProvider="{hostComponent.unitListCollection}" requireSelection="true" borderVisible="false" contentBackgroundColor="#FFFFFF">
					<s:layout>
						<s:VerticalLayout requestedMinRowCount="1" horizontalAlign="justify" gap="10" />
					</s:layout>
				</s:List>
			</vo:WindowShade>	
		</s:VGroup>
	</s:VGroup>
	
</s:Skin>
