<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
    	xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
		alpha.disabled="0.5" xmlns:ui="com.clarityenglish.bento.view.progress.ui.*" 
		xmlns:exerciseNumber="skins.tensebuster.assets.exerciseNumber.*" 
		xmlns:numberIcon="skins.tensebuster.assets.progress.coverage.numberIcon.*">
	
	<fx:Metadata>
		[HostComponent("com.clarityenglish.bento.view.progress.components.ProgressCoverageView")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[			
			import mx.collections.XMLListCollection;
			
			import org.davekeen.util.StringUtils;
			private function getItemRenderer(item:Object):ClassFactory {
				return item.@caption;
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				progressBar.trackColour = getStyle(hostComponent.courseClass.charAt(0) + 'BarColor1');
				progressBar.fillColour = getStyle(hostComponent.courseClass.charAt(0) + 'BarColor2');
				
				completeSolidColor.color = getStyle(StringUtils.capitalize(hostComponent.courseClass.charAt(0)) + 'Color');
			}
		]]>
	</fx:Script>

    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>
	
	<ui:ProgressCourseButtonBar id="progressCourseButtonBar" left="40" height="60">
		<ui:layout>
			<s:ButtonBarHorizontalLayout gap="16" />
		</ui:layout>
	</ui:ProgressCourseButtonBar>
	
	<s:Rect top="60" left="45" right="50" height="1">
		<s:fill>
			<s:SolidColor color="0xEC1C32" />
		</s:fill>
	</s:Rect>
    
	<ui:ProgressBarRenderer id="progressBar" top="80" left="50" right="50" />

	<s:Label id="coverageInstructionLabel" top="130" left="50" fontSize="13" />
	<s:HGroup left="250" top="165">
		<s:Rect width="10" height="10">
			<s:fill>
				<s:SolidColor id="completeSolidColor" />
			</s:fill>
		</s:Rect>
		<s:Label id="completeLabel" fontSize="13"/>
		<s:Spacer width="10"/>
		<s:Rect width="10" height="10">
			<s:fill>
				<s:SolidColor color="#B4B4B5" />
			</s:fill>
		</s:Rect>
		<s:Label id="notCompleteLabel" fontSize="13"/>
	</s:HGroup>
			 
	<s:Scroller left="50" right="0" top="174" bottom="0">
		<s:DataGroup dataProvider="{hostComponent.unitListCollection}"  width="100%" height="100%" minWidth="0" minHeight="0">
			<s:layout>
				<s:VerticalLayout paddingTop="15" gap="16" />
			</s:layout>
			<s:itemRenderer>
				<fx:Component>
					<s:DataRenderer>
						<fx:Script>
							<![CDATA[
								import mx.collections.XMLListCollection;
								
								private var _exerciseLabelVisible:Boolean;
								private var _exerciseLabel:String;
								private var _exerciseLabelIndex:Number;
								 
								public function getIcon(value:Number):Class {
									var course:String = data.parent().@caption;
									var firstLetter:String = course.charAt(0);
									var source:String = firstLetter+"Number"+value;
									return getStyle(source);
								}
								
								override public function set data(value:Object):void {
									super.data = value;
									
									exLabelButton.name = outerDocument.hostComponent.courseClass;							
								}								
								
								public function set exerciseLabelVisible(value:Boolean):void {
									_exerciseLabelVisible = value;
								}
								
								[Bindable]
								public function get exerciseLabelVisible():Boolean {
									return _exerciseLabelVisible;
								}							
								
								public function set exerciseLabel(value:String):void {
									_exerciseLabel = value;
								}
								
								[Bindable]
								public function get exerciseLabel():String {
									return _exerciseLabel;
								}
								
								[Bindable]
								public function set exerciseLabelIndex(value:Number):void {
									if (_exerciseLabelIndex != value) {
										_exerciseLabelIndex = value;
										if (value < 10) {
											exLabelButton.left = 220 + value*29;
										} else {
											exLabelButton.left = 220 + value*30;
										}
										
									}
										
								}
								
								public function get exerciseLabelIndex():Number {
									return _exerciseLabelIndex;
								}
								
							]]>
						</fx:Script>
						<s:Label text="{data.@caption}" fontSize="13" fontWeight="bold" />
						<s:DataGroup left="200" dataProvider="{new XMLListCollection(data.exercise)}">
							<s:layout>
								<s:HorizontalLayout/>
							</s:layout>
							<s:itemRenderer>
								<fx:Component>
									<s:DataRenderer>
										<fx:Script>
											<![CDATA[
												
												import spark.components.DataGroup;
												
												private var lastIndex:Number = new Number();
												private var lastIndex2:Number = new Number();
												
												public function getIndex(data:Object):Number {
													return (owner as DataGroup).dataProvider.getItemIndex(data);
												}
												
												override public function set data(value:Object):void {
													super.data = value;
													
													if (data) {
														if (getIndex(data) < data.parent().@count) {
															var courseClass:String = data.parent().parent().@["class"];
															topGradientColor.color = getStyle(courseClass.charAt(0) + "BarColor1");
															bottomGradientColor.color = getStyle(courseClass.charAt(0)+ "BarColor2");
														} else {
															topGradientColor.color = getStyle("undoneBarColor1");
															bottomGradientColor.color = getStyle("undoneBarColor2");
														}																												
													}
												}
													
													
												// mouse over show the exercise name
												/*protected function onMouseOver(event:MouseEvent):void {	
													outerDocument.exerciseLabelVisible = true;
													outerDocument.exerciseLabel = data.@caption;
													outerDocument.exerciseLabelIndex = getIndex(data);																						
												}
												
												protected function onMouseOut(event:MouseEvent):void {
													outerDocument.exerciseLabelVisible = false;																							
												}*/
												
											]]>
										</fx:Script>
										<s:Group id="greyNumberGroup" width="21.5" top="-1">
											<s:Path id="doneHexagonPath" data="M0 6.16284C0 5.06274 0.779297 3.71265 1.73193 3.16284L6.49561 0.412354C7.44824 -0.137451 9.00684 -0.137451 9.95947 0.412354L14.7231 3.16284C15.6758 3.71265 16.4551 5.06274 16.4551 6.16284L16.4551 11.6628C16.4551 12.7629 15.6758 14.113 14.7231
												  14.6628L9.95947 17.4128C9.00684 17.9626 7.44824 17.9626 6.49561 17.4128L1.73193 14.6628C0.779297 14.113 0 12.7629 0 11.6628L0 6.16284Z">
												<s:fill>
													<s:LinearGradient>
														<s:GradientEntry id="topGradientColor"  />
														<s:GradientEntry id="bottomGradientColor"  />
													</s:LinearGradient>
												</s:fill>
											</s:Path>	
										</s:Group>
									</s:DataRenderer>
								</fx:Component>
							</s:itemRenderer>
						</s:DataGroup>
						<s:Button id="exLabelButton" visible="{exerciseLabelVisible}" label="{exerciseLabel}" mouseEnabled="false" top="-5" />
					</s:DataRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:DataGroup>
	</s:Scroller>

</s:Skin>
