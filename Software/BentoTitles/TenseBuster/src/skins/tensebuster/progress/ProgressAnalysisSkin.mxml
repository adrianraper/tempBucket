<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
    	xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
		alpha.disabled="0.5" 
		xmlns:ui="com.clarityenglish.bento.view.progress.ui.*"
		xmlns:ui1="com.clarityenglish.tensebuster.view.progress.ui.*">
	
	<fx:Metadata>
		[HostComponent("com.clarityenglish.tensebuster.view.progress.ProgressAnalysisView")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			public function get courseColor():Number {
				var courseCaption:String = hostComponent.courseCaption;
				return getStyle(courseCaption.charAt(0) + "Color");
			}
		]]>
	</fx:Script>
	
    <s:states>
        <s:State name="normal" />
		<s:State name="normal7Inches" />
		<s:State name="normal10Inches" />
        <s:State name="disabled" />
    </s:states>
	
	<ui:ProgressCourseButtonBar id="progressCourseButtonBar" left="50" height="60">
		<ui:layout>
			<s:ButtonBarHorizontalLayout gap="35" />
		</ui:layout>
	</ui:ProgressCourseButtonBar>
	
	<s:Rect top="60" left="45" right="50" height="1">
		<s:fill>
			<s:SolidColor color="0xEC1C32" />
		</s:fill>
	</s:Rect>
	
	<s:Label id="analyseInstructionLabel" top="80" left="50" fontSize="13" />

	<ui1:StackedCircleWedgeChart id="stackedChart" top="120" height="35" right="40" right.normal10Inches="140" />
	<s:Path right="100" right.normal10Inches="200" top="120" winding="nonZero" data="M381.42 0 0 0C0 105.326 85.3853 190.71 190.71 190.71 296.037 190.71 381.42 105.326 381.42 0Z">
		<s:fill>
			<s:SolidColor color="#FFFFFF"/>
		</s:fill>
	</s:Path>
	<s:Group right="190" right.normal10Inches="290" top="160" width="200" id="circleWedgeTimeGroup">
		<s:VGroup id="timeWedgeVGroup" horizontalAlign="center" horizontalCenter="0" gap="10">
			<s:Label id="circleWedgeCourseLabel" fontSize="14" />
			<s:HGroup>
				<s:Label id="analysisTimeLabel" fontSize="26" fontWeight="bold" />
				<s:Label id="minLabel" fontSize="14" paddingTop="4" />
			</s:HGroup>			
		</s:VGroup>
		<s:VGroup id="totalTimeWedgeVGroup" horizontalAlign="center" horizontalCenter="0" gap="10">
			<s:Label id="totalTimeLabel" fontSize="14"/>
			<s:HGroup>
				<s:Label id="totalTimeNumberLabel" fontSize="26" fontWeight="bold" />
				<s:Label id="totalTimeMinLabel" fontSize="14" paddingTop="4" />
			</s:HGroup>			
		</s:VGroup>
		<s:Button id="circleWedgeInstructionLabel" top="220" horizontalCenter="0" fontSize="13" fontWeight="normal" />
	</s:Group>	
	
	<s:Scroller left="50" top="110" bottom="60">
		<s:VGroup>
			<s:DataGroup id="durationDataGroup" dataProvider="{hostComponent.unitListCollection}">
				<s:layout>
					<s:VerticalLayout gap="15" horizontalAlign="right" />
				</s:layout>
				<s:itemRenderer>
					<fx:Component>
						<s:DataRenderer>
							<fx:Script>
								<![CDATA[
									import com.clarityenglish.common.model.interfaces.CopyProvider;
									import com.googlecode.bindagetools.util.Util;
									
									import spark.components.DataGroup;
									
									[Bindable]
									public var copyProvider:CopyProvider;
									
									[Embed(source="skins/tensebuster/assets/progress/analyse/EDashline.png")]
									private static var EDashline:Class;
									
									[Embed(source="skins/tensebuster/assets/progress/analyse/ELongDashline.png")]
									private static var ELongDashline:Class;
									
									[Embed(source="skins/tensebuster/assets/progress/analyse/LDashline.png")]
									private static var LDashline:Class;
									
									[Embed(source="skins/tensebuster/assets/progress/analyse/IDashline.png")]
									private static var IDashline:Class;
									
									[Embed(source="skins/tensebuster/assets/progress/analyse/UDashline.png")]
									private static var UDashline:Class;
									
									[Embed(source="skins/tensebuster/assets/progress/analyse/ADashline.png")]
									private static var ADashline:Class;
																
									private function getTimeColour(data:Object):Number {
										if (data) {
											var index:Number = (owner as DataGroup).dataProvider.getItemIndex(data);
											var courseCaption:String = (owner as DataGroup).dataProvider[index].parent().@caption;
											return getStyle(courseCaption.charAt(0) + "Color");
										}
										return 0;
									}
									
									override public function set data(value:Object):void {
										super.data = value;
										
										dashline.source = dashlineSource;
									}

									protected function get dashlineSource():Class {
										if (data) {
											var index:Number = (owner as DataGroup).dataProvider.getItemIndex(data);
											var courseCaption:String = (owner as DataGroup).dataProvider[index].parent().@caption;
											
											if (parentDocument.hostComponent.androidSize == "10Inches") {
												switch (courseCaption.charAt(0)) {
													case "E":
														return EDashline;					
													case "L":
														return LDashline;
													case "I":
														return IDashline;
													case "U":
														return UDashline;
													case "A":
														return ADashline;
													default:
														return null;
												}
											}else {
												switch (courseCaption.charAt(0)) {
													case "E":
														return EDashline;
													case "L":
														return LDashline;
													case "I":
														return IDashline;
													case "U":
														return UDashline;
													case "A":
														return ADashline;
													default:
														return null;
												}							
											}
										}
										return null;
									}
								]]>
							</fx:Script>
								<s:Label text="{data.@caption}" fontSize="13" top="8" fontWeight="bold" />
								<s:HGroup id="durationHGroup" right="0" top="5">
									<s:Label id="durationLable" text="{copyProvider.getCopyForId('courseDurationRenderTime', { time: Math.floor(data.@duration / 60) })}" color="{getTimeColour(data)}"  fontSize="26" fontWeight="bold"  />
									<s:Label id="minLabel" fontSize="14" text="{copyProvider.getCopyForId('minLabel')}" color="{getTimeColour(data)}" paddingTop="6"/>
								</s:HGroup>		
							<s:SWFLoader id="dashline" top="23"/>
						</s:DataRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:DataGroup>
			<s:VGroup left="20" paddingTop="-10" horizontalAlign="right">
				<!--width.normal10Inches="445"-->
				<s:Rect width="305" height="2">
					<s:fill>
						<s:SolidColor id="boundaryLineSolidColor" />
					</s:fill>
				</s:Rect>
				<s:Group width="100%" top="16">
					<s:HGroup left="0" paddingTop="16">
						<s:Label id="totalLabel" fontSize="13" fontWeight="bold"/>
					</s:HGroup>
					<s:HGroup paddingTop="16" horizontalAlign="right" right="3">
						<s:Label id="totalDurationLabel" fontSize="26" fontWeight="bold" paddingTop="-5" />
						<s:Label id="totalMinLabel" fontSize="14" paddingTop="2" />
					</s:HGroup>
				</s:Group>			
			</s:VGroup>		
		</s:VGroup>	
	</s:Scroller>	
</s:Skin>
