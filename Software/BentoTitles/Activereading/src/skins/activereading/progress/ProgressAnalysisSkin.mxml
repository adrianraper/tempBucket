<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
    	xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
		alpha.disabled="0.5" 
		xmlns:ui="com.clarityenglish.bento.view.progress.ui.*"
		xmlns:arui="skins.activereading.progress.ui.*" xmlns:ui1="com.clarityenglish.activereading.view.progress.ui.*">
	
	<fx:Metadata>
		[HostComponent("com.clarityenglish.activereading.view.progress.ProgressAnalysisView")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			public function getColor(index:Number):Number {
				return getStyle("progressAnalysisTextColors")[index];
			}
			
			public function getTextBackgroundColor(index:Number):Number {
				return getStyle("textBackgroundColor")[index];
			}
		]]>
	</fx:Script>
	
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>
	
	<s:VGroup left="45" right="45" top="10" bottom="70" gap="10">
		<ui:ProgressCourseButtonBar id="progressCourseButtonBar" width="100%" height="40" useHandCursor="true" buttonMode="true">
			<ui:layout>
				<s:ButtonBarHorizontalLayout/>
			</ui:layout>
		</ui:ProgressCourseButtonBar>
		
		<s:Rect id="titleLine" height="1" width="100%">
			<s:fill>
				<s:SolidColor color="#000000" />
			</s:fill>
		</s:Rect>	
		
		<s:Label id="analyseInstructionLabel" paddingTop="5" left="0" fontSize="14" />
		
		<s:HGroup width="100%" height="100%" paddingTop="10" gap="100">
			<s:Scroller left="0" width="35%">
				<s:VGroup width="100%" height="100%">
					<s:DataGroup id="durationDataGroup" dataProvider="{hostComponent.unitListCollection}" width="100%" height="100%">
						<s:layout>
							<s:VerticalLayout gap="4"/>
						</s:layout>
						<s:itemRenderer>
							<fx:Component>
								<s:DataRenderer width="100%">
									<fx:Script>
										<![CDATA[
											import com.clarityenglish.common.model.interfaces.CopyProvider;
											import com.googlecode.bindagetools.util.Util;
											
											import spark.components.DataGroup;
											
											[Bindable]
											private var unitDuration:Number;
											
											public function getIndex(data:Object):Number {
												return (owner as DataGroup).dataProvider.getItemIndex(data);
											}
											
											override public function set data(value:Object):void {
												super.data = value;
												
												if (data) {
													durationLabel.setStyle("color", getExerciseListItemColor(data));
													minLabel.setStyle("color", getExerciseListItemColor(data));
													dottedLine.dotColor = getExerciseListItemColor(data);
													
													// gh#1092
													unitDuration = data.@duration;
												}			
											}
											
											public function getExerciseListItemColor(data:Object):Number {
												return getStyle("progressAnalysisTextColors")[data.parent().childIndex()];
											}
										]]>
									</fx:Script>
									<s:VGroup width="100%" height="100%" gap="4">
										<s:Group width="100%" height="100%">
											<s:Label top="10" text="{data.@caption}" fontSize="14" />
											<s:HGroup id="durationHGroup" top="5" right="0" width="100%" horizontalAlign="right">
												<s:Label id="durationLabel" text="{outerDocument.hostComponent.getCopyProvider().getCopyForId('courseDurationRenderTime', { time: Math.floor(unitDuration / 60) })}" fontSize="21" fontWeight="bold" />
												<s:Label id="minLabel" fontSize="10" text="{outerDocument.hostComponent.getCopyProvider().getCopyForId('minLabel')}" color="{getExerciseListItemColor(data)}" paddingTop="8"/>
											</s:HGroup>	
										</s:Group>
										<arui:DottedLine id="dottedLine" width="100%" height="1" dotWidth="5" />		
									</s:VGroup>														
								</s:DataRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:DataGroup>
					<!-- Total time line-->
					<s:VGroup left="20" paddingTop="-8" width="100%" horizontalAlign="right" gap="5">
						<s:Rect width="100%" height="2">
							<s:fill>
								<s:SolidColor id="totalLineColor" color="{getColor(hostComponent.courseIndex)}" />
							</s:fill>
						</s:Rect>
						<s:Group width="100%">
							<s:HGroup left="0" paddingTop="5">
								<s:Label id="totalLabel" fontSize="13" fontWeight="bold" color="{getColor(hostComponent.courseIndex)}" />
							</s:HGroup>
							<s:HGroup horizontalAlign="right" right="0" paddingTop="5 ">
								<s:Label id="totalDurationLabel" paddingTop="-5" fontSize="21" fontWeight="bold" color="{getColor(hostComponent.courseIndex)}" />
								<s:Label id="totalMinLabel" paddingTop="2" fontSize="10" color="{getColor(hostComponent.courseIndex)}" />
							</s:HGroup>
						</s:Group>			
					</s:VGroup>		
				</s:VGroup>	
			</s:Scroller>
			
			<s:Group width="500">
				<ui1:StackedCircleWedgeChart id="stackedChart" horizontalCenter="250" height="35" />
				<s:Path horizontalCenter="0" data="M381.42 0 0 0C0 105.326 85.3853 190.71 190.71 190.71 296.037 190.71 381.42 105.326 381.42 0Z">
					<s:fill>
						<s:SolidColor color="#FFFFFF"/>
					</s:fill>
				</s:Path>
				
				<s:VGroup id="timeWedgeVGroup" horizontalCenter="0" top="70" horizontalAlign="center" gap="10" visible="false">
					<s:Label id="circleWedgeCourseLabel" fontSize="14" color="{getColor(hostComponent.courseIndex)}"/>
					<s:HGroup>
						<s:Label id="analysisTimeLabel" fontSize="28" fontWeight="bold" color="{getColor(hostComponent.courseIndex)}" />
						<s:Label id="minLabel" fontSize="14" paddingTop="9" color="{getColor(hostComponent.courseIndex)}" />
					</s:HGroup>			
				</s:VGroup>
				<s:VGroup id="totalTimeWedgeVGroup" horizontalCenter="0" top="70" horizontalAlign="center" gap="10">
					<s:Label id="totalTimeLabel" fontSize="14" color="{getColor(hostComponent.courseIndex)}" />
					<s:HGroup>
						<s:Label id="totalTimeNumberLabel" fontSize="28" fontWeight="bold" color="{getColor(hostComponent.courseIndex)}" />
						<s:Label id="totalTimeMinLabel" fontSize="14" paddingTop="9" color="{getColor(hostComponent.courseIndex)}" />
					</s:HGroup>			
				</s:VGroup>
				<s:Group width="450" height="25" top="270" horizontalCenter="0">
					<s:Rect width="100%" height="100%" radiusX="10" radiusY="10">
						<s:fill>
							<s:SolidColor id="circleWedgeLabelBackgroundColor" color="{getTextBackgroundColor(hostComponent.courseIndex)}" />
						</s:fill>
					</s:Rect>
					<s:Label id="circleWedgeLabel" verticalCenter="3" horizontalCenter="0" fontSize="13" color="#333333" />
				</s:Group>
			</s:Group>		
		</s:HGroup>	
	</s:VGroup>	
</s:Skin>
