<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
    	xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
		alpha.disabled="0.5" xmlns:ui="com.clarityenglish.bento.view.progress.ui.*">
	
	<fx:Metadata>
		[HostComponent("com.clarityenglish.activereading.view.progress.ProgressCoverageView")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[			
			import com.clarityenglish.activereading.view.event.NodeSelectEvent;
			
			import mx.collections.XMLListCollection;
			import mx.events.FlexEvent;
			
			import org.davekeen.util.StringUtils;
			private function getItemRenderer(item:Object):ClassFactory {
				return item.@caption;
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				progressBar.trackColour =  getStyle("homeNumberTagTopMidColors")[hostComponent.courseIndex];
				progressBar.fillColour =  getStyle("homeNumberTagBottomMidColors")[hostComponent.courseIndex];
				
				circleTopColor.color = getStyle("homeNumberTagTopColors")[hostComponent.courseIndex];
				circleTopMidColor.color = getStyle("homeNumberTagTopMidColors")[hostComponent.courseIndex];
				circleBottomMidColor.color = getStyle("homeNumberTagBottomMidColors")[hostComponent.courseIndex];
				circleBottomColor.color = getStyle("homeNumberTagTopMidColors")[hostComponent.courseIndex];
			}
		]]>
	</fx:Script>

    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>
	
	<!--Gird and book-->
	<s:Group bottom="0" right="10" width="550" height="280">
		<s:SWFLoader source="@Embed(source='/skins/activereading/assets/progress/progressBook.png')" bottom="-10" horizontalCenter="0" />
		<s:SWFLoader source="@Embed(source='/skins/activereading/assets/progress/progressGirl.png')" bottom="0" horizontalCenter="0" />
	</s:Group>
	
	<ui:ProgressCourseButtonBar id="progressCourseButtonBar" left="45" right="45" height="60" buttonMode="true" useHandCursor="true">
		<ui:layout>
			<s:ButtonBarHorizontalLayout />
		</ui:layout>
	</ui:ProgressCourseButtonBar>
	
	<s:Rect top="60" left="45" right="45" height="1">
		<s:fill>
			<s:SolidColor color="0x000000" />
		</s:fill>
	</s:Rect>
    
	<ui:ProgressBarRenderer id="progressBar" top="75" left="45" right="45" />

	<s:Label id="coverageInstructionLabel" top="125" left="45" fontSize="14" />
	<s:HGroup right="45" top="120" height="22" verticalAlign="middle">
		<s:Ellipse x="0" y="0" width="20" height="20">
			<s:fill>
				<s:LinearGradient>
					<s:GradientEntry id="circleTopColor" />
					<s:GradientEntry id="circleTopMidColor" />
					<s:GradientEntry id="circleBottomMidColor" />
					<s:GradientEntry id="circleBottomColor" />
				</s:LinearGradient>
			</s:fill>
		</s:Ellipse>
		<s:Label id="completeLabel" fontSize="13"/>
		<s:Spacer width="14"/>
		<s:Ellipse x="0" y="0" width="20" height="20">
			<s:fill>
				<s:LinearGradient>
					<s:GradientEntry color="#ABABAB" />
					<s:GradientEntry color="#CFCFCF" />
				</s:LinearGradient>
			</s:fill>
		</s:Ellipse>
		<s:Label id="notCompleteLabel" fontSize="13"/>
	</s:HGroup>
			 
	<s:Scroller left="45" right="0" top="150" bottom="70">
		<s:DataGroup id="coverageDataGroup" dataProvider="{hostComponent.unitListCollection}" width="100%" height="100%" minWidth="0" minHeight="0">
			<s:layout>
				<s:VerticalLayout paddingTop="15" gap="16" />
			</s:layout>
			<s:itemRenderer>
				<fx:Component>
					<s:DataRenderer>
						<fx:Script>
							<![CDATA[
								import mx.collections.XMLListCollection;
							]]>
						</fx:Script>
						<s:Label text="{data.@caption}" fontSize="14" />
						<s:DataGroup left="200" dataProvider="{new XMLListCollection(data.exercise)}" buttonMode="true" useHandCursor="true">
							<s:layout>
								<s:HorizontalLayout gap="10"/>
							</s:layout>
							<s:itemRenderer>
								<fx:Component>
									<s:DataRenderer>
										<fx:Script>
											<![CDATA[
												import com.clarityenglish.activereading.view.event.NodeSelectEvent;
												
												import spark.components.DataGroup;
												
												private var lastIndex:Number = new Number();
												private var lastIndex2:Number = new Number();
												
												public function getIndex(data:Object):Number {
													return (owner as DataGroup).dataProvider.getItemIndex(data);
												}
												
												override public function set data(value:Object):void {
													super.data = value;
													
													if (data) {
														if (data.hasOwnProperty("@done") && Number(data.@done) > 0) {
															doneCircle.visible = true;
															undoneCircle.visible = false;
															var courseClass:String = data.parent().parent().@["class"];
															circleTopColor2.color = getStyle("homeNumberTagTopColors")[data.parent().parent().childIndex()];
															circleTopMidColor2.color = getStyle("homeNumberTagTopMidColors")[data.parent().parent().childIndex()];
															circleBottomMidColor2.color = getStyle("homeNumberTagBottomMidColors")[data.parent().parent().childIndex()];
															circleBottomColor2.color = getStyle("homeNumberTagTopMidColors")[data.parent().parent().childIndex()];
														} else {
															doneCircle.visible = false;
															undoneCircle.visible = true;
														}																												
													}
												}
													
													
												// mouse over show the exercise name
												/*protected function onMouseOver(event:MouseEvent):void {	
													exerciseLabel.visible = true;
													exerciseLabel.includeInLayout = true;
												}
												
												protected function onMouseOut(event:MouseEvent):void {
													exerciseLabel.visible = false;
													exerciseLabel.includeInLayout = false;
												}*/
											]]>
										</fx:Script>
										
										<s:states>
											<s:State name="normal" />
											<s:State name="hovered" />
											<s:State name="selected" />    
										</s:states>
										
										<s:HGroup id="greyNumberGroup" top="-1" verticalAlign="middle">
											<s:Group>
												<s:Ellipse id="doneCircle" x="0" y="0" width="20" height="20">
													<s:fill>
														<s:LinearGradient>
															<s:GradientEntry id="circleTopColor2" />
															<s:GradientEntry id="circleTopMidColor2" />
															<s:GradientEntry id="circleBottomMidColor2" />
															<s:GradientEntry id="circleBottomColor2" />
														</s:LinearGradient>
													</s:fill>
												</s:Ellipse>
												
												<s:Ellipse id="undoneCircle" x="0" y="0" width="20" height="20">
													<s:fill>
														<s:LinearGradient>
															<s:GradientEntry color="#ABABAB" />
															<s:GradientEntry color="#CFCFCF" />
														</s:LinearGradient>
													</s:fill>
												</s:Ellipse>
											</s:Group>
											
											<!--s:Label id="exerciseLabel" text="{data.@caption}" fontSize="14" visible="false" includeInLayout="false" /-->
										</s:HGroup>
									</s:DataRenderer>
								</fx:Component>
							</s:itemRenderer>
						</s:DataGroup>
					</s:DataRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:DataGroup>
	</s:Scroller>

</s:Skin>
