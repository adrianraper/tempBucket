<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:uniteditor="com.clarityenglish.rotterdam.builder.view.uniteditor.*"
		xmlns:course="com.clarityenglish.rotterdam.builder.view.course.*"
		xmlns:ui="com.clarityenglish.rotterdam.view.unit.ui.*"
		initialize="onInitialize(event)" xmlns:unit="com.clarityenglish.rotterdam.view.unit.*" >
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.rotterdam.view.course.CourseView")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.clarityenglish.rotterdam.builder.view.uniteditor.UnitEditorView;
			import com.clarityenglish.rotterdam.view.unit.UnitView;
			
			import mx.events.FlexEvent;
			
			import org.davekeen.transitions.PatchedSlideViewTransition;
			
			import spark.transitions.ViewTransitionBase;
			import spark.transitions.ViewTransitionDirection;
			
			protected function onInitialize(event:FlexEvent):void {
				// Use a custom PatchedSlideViewTransition as the stock one has a bug when the tab bar is hidden.
				var pushTransition:PatchedSlideViewTransition = new PatchedSlideViewTransition();
				pushTransition.direction = ViewTransitionDirection.UP;
				unitViewNavigator.defaultPushTransition = pushTransition;
				
				var popTransition:PatchedSlideViewTransition = new PatchedSlideViewTransition();
				popTransition.direction = ViewTransitionDirection.DOWN;
				unitViewNavigator.defaultPopTransition = popTransition;
			}
			
			private function unitViewNavigatorShow(viewClass:Class, transition:ViewTransitionBase = null):void {
				// This needs a callLater otherwise the first time we open the editor mouse events are not picked up
				callLater(function():void {
					if (!unitViewNavigator.activeView) {
						unitViewNavigator.pushView(viewClass);
					} else if (!(unitViewNavigator.activeView is viewClass)) {
						unitViewNavigator.replaceView(viewClass, unitViewNavigator.activeView.data, null, transition);
					}
				});
			}
			
		]]>
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="disabled" />
		<s:State name="normal" />
		<s:State name="uniteditor" enterState="unitViewNavigatorShow(UnitEditorView, unitViewNavigator.defaultPopTransition)" />
		<s:State name="unitplayer" enterState="unitViewNavigatorShow(UnitView, unitViewNavigator.defaultPushTransition)" />
	</s:states>
	
	<s:BorderContainer id="unitContainer" backgroundColor="0xFFFFFF" left="2" width="140" dropShadowVisible="true" height="{unitVGroup.height + 30}">
		<s:layout>
			<s:VerticalLayout paddingTop="10"/>
		</s:layout>
		<s:VGroup id="unitVGroup">
			<s:Label id="courseCaptionLabel" paddingLeft="7" width="150" fontWeight="bold" fontSize="15"/>
			<mx:Spacer height="5" />
			<s:List id="unitList" dataProvider="{hostComponent.unitListCollection}" labelField="@caption" width="140" borderVisible="false" selectionColor="0xC0C0C0">
				<s:layout>
					<s:VerticalLayout requestedMinRowCount="1" horizontalAlign="justify" gap="0"/>
				</s:layout>
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer>
							<s:RichText text="{data.@caption}" textIndent="18" fontSize="14" color="0x000000" height="25" paddingTop="8"/>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
		</s:VGroup>
	</s:BorderContainer>
	
	<s:VGroup top="{unitContainer.height + 10}" left="2">
		<s:Button id="addUnitButton" label="Add a unit" useHandCursor="true" buttonMode="true" />
		<s:Button id="courseSettingsButton" label="Course settings" bottom="100" useHandCursor="true" buttonMode="true" />
		<s:Button id="coursePublishButton" label="Publish course" bottom="70" useHandCursor="true" buttonMode="true" />
	</s:VGroup>
	
	
	<unit:UnitHeaderView id="unitHeader" left="156" right="0" top="0" height="50" />
	<s:ViewNavigator id="unitViewNavigator" left="156" right="0" top="50" bottom="80" />
	
	<course:ToolBarView bottom="0" left="0" right="0" />
	
</s:Skin>
