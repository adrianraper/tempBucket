<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:uniteditor="com.clarityenglish.rotterdam.builder.view.uniteditor.*"
		xmlns:course="com.clarityenglish.rotterdam.builder.view.course.*"
		xmlns:courseui="com.clarityenglish.rotterdam.view.course.ui.*"
		xmlns:ui="com.clarityenglish.rotterdam.view.unit.ui.*"
		xmlns:unit="com.clarityenglish.rotterdam.view.unit.*"
		initialize="onInitialize(event)">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.rotterdam.view.course.CourseView")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.clarityenglish.rotterdam.builder.view.uniteditor.UnitEditorView;
			import com.clarityenglish.rotterdam.view.unit.UnitView;
			import mx.events.FlexEvent;
			
			import org.davekeen.transitions.PatchedSlideViewTransition;
			
			import spark.transitions.ViewTransitionBase;
			import spark.transitions.ViewTransitionDirection;
			
			protected function onInitialize(event:FlexEvent):void {
				// Use a custom PatchedSlideViewTransition as the stock one has a bug when the tab bar is hidden.
				var pushTransition:PatchedSlideViewTransition = new PatchedSlideViewTransition();
				pushTransition.direction = ViewTransitionDirection.UP;
				unitViewNavigator.defaultPushTransition = pushTransition;
				
				var popTransition:PatchedSlideViewTransition = new PatchedSlideViewTransition();
				popTransition.direction = ViewTransitionDirection.DOWN;
				unitViewNavigator.defaultPopTransition = popTransition;
				
				styleManager.getStyleDeclaration("mx.controls.ToolTip").setStyle("backgroundColor","#333333");
				styleManager.getStyleDeclaration("mx.controls.ToolTip").setStyle("fontSize","13");
			}
			
			private function unitViewNavigatorShow(viewClass:Class, transition:ViewTransitionBase = null):void {
				// This needs a callLater otherwise the first time we open the editor mouse events are not picked up
				callLater(function():void {
					if (!unitViewNavigator.activeView) {
						unitViewNavigator.pushView(viewClass);
					} else if (!(unitViewNavigator.activeView is viewClass)) {
						unitViewNavigator.replaceView(viewClass, unitViewNavigator.activeView.data, null, transition);
					}
				});
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:DropShadowFilter id="dropShadowFilter" angle="-90" distance="1" alpha="0.4" />
		
		<s:Animate id="anim" targets="{[publishSelectionGroup]}" duration="300">
			<s:SimpleMotionPath property="height" valueFrom="0" valueTo="200" />
		</s:Animate>
	</fx:Declarations>
	
	<!-- states -->
	<s:states>
		<s:State name="disabled" />
		<s:State name="normal" />
		<s:State name="uniteditor" enterState="unitViewNavigatorShow(UnitEditorView, unitViewNavigator.defaultPopTransition)" />
		<s:State name="unitplayer" enterState="unitViewNavigatorShow(UnitView, unitViewNavigator.defaultPushTransition)" />
	</s:states>
	
	<s:BorderContainer id="unitContainer" backgroundColor="0xFFFFFF" left="2" width="140" dropShadowVisible="true" 
					maxHeight="{hostComponent.height*0.75}" minHeight="90">
		<s:layout>
			<s:VerticalLayout paddingTop="10" paddingBottom="10"/>
		</s:layout>
		<s:VGroup id="unitVGroup" height="100%">
			<s:Label id="courseCaptionLabel" paddingLeft="8" paddingRight="8" width="150" fontWeight="bold" fontSize="15"/>
			<mx:Spacer height="5" />
			<s:List id="unitList" dataProvider="{hostComponent.unitListCollection}" labelField="@caption" width="140" height="100%" borderVisible="false" selectionColor="0xC0C0C0" >
				<s:layout>
					<s:VerticalLayout requestedMinRowCount="1" horizontalAlign="justify" gap="0"/>
				</s:layout>
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer width="100%" mouseOver="deleteCourseButton.visible = true" mouseOut="deleteCourseButton.visible = false" toolTip="{data.@caption}" >
							<fx:Script>
								<![CDATA[
									import com.clarityenglish.rotterdam.view.course.events.UnitDeleteEvent;
								]]>
							</fx:Script>
							
							<s:Label text="{data.@caption}" fontSize="14" color="0x000000" width="100%" maxDisplayedLines="3" paddingLeft="8" paddingRight="8" paddingTop="6"  paddingBottom="4" />
							<s:Group right="2" verticalCenter="0">
								<s:Button id="deleteCourseButton"
										  skinClass="skins.rotterdam.ui.DeleteButtonSkin"
										  visible="false"
										  click="dispatchEvent(new UnitDeleteEvent(UnitDeleteEvent.UNIT_DELETE, data as XML, true))" useHandCursor="true" buttonMode="true" scaleX="0.8" scaleY="0.8"/>
							</s:Group>
							<!-- gh#322 -->
							<s:Line width="90%" horizontalCenter="0" >
								<s:stroke>
									<s:SolidColorStroke color="#FFBF40" weight="1" caps="square"/>
								</s:stroke>
							</s:Line>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
		</s:VGroup>
	</s:BorderContainer>
	
	<s:VGroup top="{unitContainer.height + 10}" left="2" includeIn="uniteditor">
		<s:Button id="addUnitButton" useHandCursor="true" buttonMode="true" />
		
		<!-- temporarily put these buttons here (gh#110) but they will likely move elsewhere later -->
		<!--s:Spacer height="20" /-->
		<!--s:Label text="Unit:" fontWeight="bold" /-->
		<s:HGroup width="100%">
			<s:Button id="unitCopyButton" width="50%" useHandCursor="true" buttonMode="true" enabled="{unitList.selectedItem != null}" />
			<!--s:Button id="unitPasteButton" label="Paste" width="50%" useHandCursor="true" buttonMode="true" /-->
		</s:HGroup>
	</s:VGroup>
	
	<unit:UnitHeaderView id="unitHeader" left="156" right="0" top="0" height="50" />
	<s:ViewNavigator id="unitViewNavigator" left="156" right="0" top="55" bottom="100" />
	
	<course:ToolBarView id="toolBar" bottom="38" left="0" right="0" />
	
	<!--alice p-->
	<s:VGroup id="publishVGroup" left="0" bottom="36" width="155" gap="-1" visible="{toolBar.currentState == 'normal'}" includeIn="uniteditor">	
		<s:VGroup paddingLeft="2" id="publishSelectionGroup" height="0" alpha="0">
			<s:Group>
				<s:Rect width="152" height="200" topLeftRadiusX="8" topRightRadiusX="8" filters="{dropShadowFilter}">
					<s:fill>
						<s:SolidColor color="0XF7F2F0" />
					</s:fill>
				</s:Rect>
				<courseui:PublishButton id="oneClickPublishButton" useHandCursor="true" buttonMode="true"
						  visible="{hostComponent.canPublish}" includeInLayout="{hostComponent.canPublish}" width="145" height="90" left="4" top="6" />
				<courseui:PublishButton id="publishSettingsButton" useHandCursor="true" buttonMode="true" left="4" top="103" width="145" height="90" />
			</s:Group>					
		</s:VGroup>		
		<s:Group>
			<s:ToggleButton id="publishCourseButton" height="50" fontWeight="bold" visible="{hostComponent.canPublish}" includeInLayout="{hostComponent.canPublish}" click="anim.play()" useHandCursor="true" buttonMode="true" />
			<s:Button id="publishChangeButton" height="50" fontWeight="bold" visible="{!hostComponent.canPublish}" includeInLayout="{!hostComponent.canPublish}" useHandCursor="true" buttonMode="true" />
		</s:Group>
	</s:VGroup>
	
	<s:Rect left="3" right="3" height="5" bottom="33">
		<s:fill>
			<s:SolidColor color="#ffffff" />
		</s:fill>
	</s:Rect>
</s:Skin>
