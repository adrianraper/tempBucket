<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		minWidth="800">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.rotterdam.builder.view.uniteditor.AuthoringView")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
		]]>
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="disabled" />
		<s:State name="normal" />
		
		<s:State name="MultipleChoiceQuestion_questions" stateGroups="MultipleChoiceQuestion,questions" />
		<s:State name="GapFillQuestion_questions" stateGroups="GapFillQuestion,questions" />
	</s:states>
	
	<s:VGroup width="100%" paddingLeft="4" paddingTop="4" paddingRight="4" paddingBottom="4" >
		<s:HGroup width="100%">
			<s:VGroup height="100%" includeIn="questions" width="80" >
				<s:Label id="questionsLabel" width="100%" />
				<s:List id="questionList" dataProvider="{hostComponent.questions}" width="80" height="100%" borderVisible="false" >
					<s:layout>
						<s:VerticalLayout requestedMinRowCount="1" horizontalAlign="justify" gap="0"/>
					</s:layout>
					<s:itemRenderer>
						<fx:Component>
							<!--gh#872 remove mouseOver effect in preview mode-->
							<s:ItemRenderer width="80" mouseOver="deleteQuestionButton.visible = true" mouseOut="deleteQuestionButton.visible = false">
								<fx:Script>
									<![CDATA[
										import com.clarityenglish.rotterdam.builder.view.uniteditor.events.QuestionDeleteEvent;
										import com.clarityenglish.rotterdam.view.course.events.UnitDeleteEvent;
										override public function set data(value:Object):void {
											super.data = value;
											
											if (value == null)
												return;
											
											if (data.hasOwnProperty("@caption")) {
												questionCaption.text = data.@caption;
											} else {
												questionCaption.text = String(itemIndex + 1);
											}
										}
									]]>
								</fx:Script>
								
								<s:Label id="questionCaption" width="50%" maxDisplayedLines="3" paddingTop="6" paddingBottom="4" />
								<s:Group right="2" verticalCenter="0" width="50%">
									<s:Button id="deleteQuestionButton"
											  skinClass="skins.rotterdam.ui.DeleteButtonSkin"
											  visible="false" useHandCursor="true" buttonMode="true" scaleX="0.8" scaleY="0.8"
											  click="dispatchEvent(new QuestionDeleteEvent(QuestionDeleteEvent.QUESTION_DELETE, data as XML, true))" />
								</s:Group>
								
							</s:ItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:List>
			</s:VGroup>
			
			<s:VGroup width="100%" enabled="{questionList.selectedItem != null}">
				<s:TextArea id="questionTextArea" width="100%" />
				
				<s:HGroup includeIn="GapFillQuestion">
					<s:Button id="addGapButton"  />
					<s:Button id="clearGapButton"  />
				</s:HGroup>
				
				<!-- TODO: Checkbox with editable area.  List and item renderers? -->
				<s:Label id="answersLabel" />
				<s:List id="answersList" width="100%" dataProvider="{hostComponent.answers}" enabled="{hostComponent.answers != null}" borderVisible="false" >
					<s:itemRenderer>
						<fx:Component>
							<s:ItemRenderer>
								<fx:Script>
									<![CDATA[
										import com.clarityenglish.rotterdam.builder.view.uniteditor.events.AnswerDeleteEvent;
									]]>
								</fx:Script>
								<s:HGroup width="100%">
									<s:CheckBox selected="{data.@correct == 'true'}" change="data.@correct = event.currentTarget.selected" />
									<s:TextInput width="100%" text="{data.text()}" change="data.setChildren(event.currentTarget.text)" />
									<s:Button skinClass="skins.rotterdam.ui.DeleteButtonSkin" click="dispatchEvent(new AnswerDeleteEvent(AnswerDeleteEvent.ANSWER_DELETE, data as XML, true))" />
								</s:HGroup>
							</s:ItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:List>
				<s:Button id="addAnswerButton" />
				
				<s:Label id="feedbackLabel" />
				<s:TextArea id="feedbackTextArea" width="100%" text="@{hostComponent.question.feedback}" />
			</s:VGroup>
		</s:HGroup>
		
		<s:HGroup>
			<s:Button id="okButton" />
		</s:HGroup>
	</s:VGroup>
	
</s:Skin>
