<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		minWidth="200">

	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.clarityenglish.rotterdam.builder.view.uniteditor.AuthoringView")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[

            var colWidth:uint = 250;

        ]]>
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="disabled" />
		<s:State name="normal" />
		
		<s:State name="MultipleChoiceQuestion_questions" stateGroups="MultipleChoiceQuestion,questions" />
		<s:State name="GapFillQuestion_questions" stateGroups="GapFillQuestion,questions" />
	</s:states>
	
	<s:VGroup width="100%" paddingLeft="8" paddingTop="8" paddingRight="8" paddingBottom="8" >
		<s:HGroup width="100%" >
			<s:VGroup height="100%" includeIn="questions" >
				<!-- <s:Label id="questionsLabel" width="100%" /> -->
				<s:List id="questionList" dataProvider="{hostComponent.questions}" width="70" height="100%" borderVisible="false" >
					<s:layout>
						<s:VerticalLayout requestedMinRowCount="1" horizontalAlign="justify" gap="0"/>
					</s:layout>
					<s:itemRenderer>
						<fx:Component>
							<!--gh#872 remove mouseOver effect in preview mode-->
							<s:ItemRenderer mouseOver="deleteQuestionButton.visible = true" mouseOut="deleteQuestionButton.visible = false">
								<fx:Script>
									<![CDATA[
										import com.clarityenglish.rotterdam.builder.view.uniteditor.events.QuestionDeleteEvent;
										import com.clarityenglish.rotterdam.view.course.events.UnitDeleteEvent;
										override public function set data(value:Object):void {
											super.data = value;
											
											if (value == null)
												return;
											
											if (data.hasOwnProperty("@caption")) {
												questionCaption.text = data.@caption;
											} else {
												questionCaption.text = String(itemIndex + 1);
											}
										}
									]]>
								</fx:Script>
								
								<s:Label id="questionCaption" left="4" width="20" maxDisplayedLines="1" paddingTop="6" paddingBottom="4" />
                                <s:Button id="deleteQuestionButton" right="2" verticalCenter="0"
                                              skinClass="skins.rotterdam.ui.DeleteButtonSkin"
											  visible="false" useHandCursor="true" buttonMode="true" scaleX="0.8" scaleY="0.8"
											  click="dispatchEvent(new QuestionDeleteEvent(QuestionDeleteEvent.QUESTION_DELETE, data as XML, true))" />

							</s:ItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:List>
			</s:VGroup>
            <s:Spacer width="6" />
			<s:VGroup width="{hostComponent.widgetNode.@span * colWidth}" enabled="{questionList.selectedItem != null}" gap="4">
				<s:TextArea id="questionTextArea" width="100%" />
				
				<s:HGroup includeIn="GapFillQuestion">
					<s:Button id="addGapButton"  />
					<s:Button id="clearGapButton"  />
				</s:HGroup>
				
                <s:HGroup includeIn="MultipleChoiceQuestion" >
                    <s:Label id="correctLabel" width="50"/>
                    <s:Label id="answersLabel" />
                </s:HGroup>

				<s:List id="answersList" width="100%" dataProvider="{hostComponent.answers}" enabled="{hostComponent.answers != null}"
                        borderVisible="false" >
                    <s:layout>
                        <s:VerticalLayout gap="4" />
                    </s:layout>
					<s:itemRenderer >
						<fx:Component >
							<s:ItemRenderer  mouseOver="deleteAnswerButton.visible = true" mouseOut="deleteAnswerButton.visible = false">
								<fx:Script>
									<![CDATA[
										import com.clarityenglish.rotterdam.builder.view.uniteditor.events.AnswerDeleteEvent;
									]]>
								</fx:Script>
								<s:HGroup width="{outerDocument.hostComponent.widgetNode.@span * outerDocument.colWidth}">
                                    <s:Spacer width="10" includeInLayout="{outerDocument.hostComponent.questionType == 'MultipleChoiceQuestion'}" visible="{outerDocument.hostComponent.questionType == 'MultipleChoiceQuestion'}" />
									<s:CheckBox width="30" selected="{data.@correct == 'true'}" change="data.@correct = event.currentTarget.selected" includeInLayout="{outerDocument.hostComponent.questionType == 'MultipleChoiceQuestion'}" visible="{outerDocument.hostComponent.questionType == 'MultipleChoiceQuestion'}" />
                                    <s:Spacer width="5" includeInLayout="{outerDocument.hostComponent.questionType == 'MultipleChoiceQuestion_questions'}" visible="{outerDocument.hostComponent.questionType == 'MultipleChoiceQuestion'}" />
									<s:TextInput width="100%" text="{data.text()}" change="data.setChildren(event.currentTarget.text)" />
								</s:HGroup>
                                <s:Button id="deleteAnswerButton" right="2" verticalCenter="0"
                                          skinClass="skins.rotterdam.ui.DeleteButtonSkin"
                                          visible="false" useHandCursor="true" buttonMode="true" scaleX="0.8" scaleY="0.8"
                                          click="dispatchEvent(new AnswerDeleteEvent(AnswerDeleteEvent.ANSWER_DELETE, data as XML, true))"  />
							</s:ItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:List>
				
				<s:Label id="feedbackLabel" />
				<s:TextArea id="feedbackTextArea" width="100%" text="@{hostComponent.question.feedback}" />
			</s:VGroup>
		</s:HGroup>
		
        <s:HGroup width="100%">
            <s:Spacer width="90%" />
            <s:Button id="okButton" useHandCursor="true" buttonMode="true" />
        </s:HGroup>

    </s:VGroup>
	
</s:Skin>
